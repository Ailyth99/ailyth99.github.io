<html lang="ja">
<!-- 見出し　１，部見出し -->
<head>

<script language="JavaScript">
<!--
  function startFixed(){
    fixedLAYER('fixedLay0','rightBottom',-35,-35)
  }

  var ie= !!document.all
  var n4= !!document.layers
  var w3c=!!document.getElementById
  var mac45 
    = navigator.userAgent.indexOf('MSIE 4.5; Mac_PowerPC')

  if(document.layers)window.onresize=resizeFunc
  function resizeFunc(e){location.reload()}

  function iniFunc(){
    if(ie&&!(mac45!=-1))window.onscroll = startFixed
    startFixed()
  }

  var tid=new Array()

  function fixedLAYER(layName,posString,offSetX,offSetY){

    offSetX = parseInt(offSetX,10)
    offSetY = parseInt(offSetY,10)

 if( posString == 'rightBottom' ){

      if(ie) offLeft = document.body.clientWidth   + offSetX
      else   offLeft = window.innerWidth           + offSetX
      if(ie) offTop  = document.body.clientHeight  + offSetY
      else   offTop  = window.innerHeight          + offSetY

    }
    else {

      if(ie) offLeft =                               offSetX
      else   offLeft =                               offSetX
      if(ie) offTop  =                               offSetY
      else   offTop  =                               offSetY

    }

    offLeft = parseInt(offLeft)
    offTop  = parseInt(offTop)

    if(document.all){
      var mx = parseInt(document.body.scrollLeft +offLeft)
      var my = parseInt(document.body.scrollTop  +offTop)
    } else {
      var mx = parseInt(self.pageXOffset+offLeft)
      var my = parseInt(self.pageYOffset+offTop)

    }

    moveLAYER(layName,mx,my)

    if(!(ie&&!(mac45!=-1)))
      setTimeout("fixedLAYER('"+layName+"','"+posString
                   +"','" +offSetX+"','"+offSetY+"')",100)
  }

  function moveLAYER(layName,x,y){
      
      if(document.getElementById){
        document.getElementById(layName).style.left=x
        document.getElementById(layName).style.top=y
      }
      else if(document.all){
        document.all(layName).style.pixelLeft=x
        document.all(layName).style.pixelTop=y
      }
      else if(document.layers)
        document.layers[layName].moveTo(x,y)
  }

// -->
</script>

<script language="JavaScript">
<!--
  function lj(ch,fm)
  {
    if ( parent.index ) {
      if ( ch == "libref" ){ parent.index.location.href="../libref/category.htm"; }
      else if ( ch == "../ee/libref" ){ parent.index.location.href="../../ee/libref/category.htm"; }
      else if ( ch == "../iop/libref" ){ parent.index.location.href="../../iop/libref/category.htm"; }
      else if ( ch == "../iop/overview" ){ parent.index.location.href="../../iop/overview/category.htm"; }
      else if ( ch == "../ee/overview" ){ parent.index.location.href="../../ee/overview/category.htm"; }
      else if ( ch == "overview" ){ parent.index.location.href="../overview/category.htm"; }
    }
    if ( parent.main ) {
      if ( fm != "" ){ parent.main.location.href=fm; }
    } else {
      if ( fm != "" ){ location.href=fm; }
    }
  }
//-->
</script>
<title>PlayStation File System概要</title>
<meta http-equiv="Content-Type"content= text/html; charset=UTF-8 >
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" Content="Sony Computer Entertainment Inc.">
<style type="text/css"><!--
    div.fixedLay{position:absolute;z-index:100;left:0px;top:0px;}
--></style>
</head>
<body onload="iniFunc()" bgcolor="#ffffff" text="#000000" >
<div id="fixedLay0" class="fixedLay">
<a href="#top"><img src="gif/link.gif" border="0" alt="TOP"></a>
</div>
<table WIDTH="100%">
<tr><td>
<h3>"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3</h3>
</td>
</tr>
<tr><td align= right >
<script language="JavaScript">
<!--
   var p,q;
   if ( parent.index ) {
   p = parent.index.location;
   q = p.toString();
   result = q.match(/\/category\.htm/gi);
   if(result == "/category.htm"){
          document.writeln("<a href=\"JavaScript:lj('libref','../libref/epfs_rf.htm')\"><img src=\"./gif/arrow.png\" border=0>構造体／関数一覧(EE)</a><br><a href=\"JavaScript:lj('../iop/libref','../../iop/libref/ipfs_rf.htm')\"><img src=\"./gif/arrow.png\" border=0>構造体／関数一覧(IOP)</a>");

    }
}
// -->
</script>
</td></tr>
</table>
<hr noshade size=6>
<a name=Heading2>
<center><h1>
PlayStation File System概要
</h1></center>
</a>
<div align=center>
<table border=0 bgcolor=#F5F5F5 width=90%><tr><td>
<h2><u>
        <b>目次</b><br>
</u></h2>

<ul>
<p><a href="#Heading3_1">  1 <b>ライブラリ概要</b><br></a>
    <ul>
    <a href="#Heading4_1_1"> <b>概要</b><br></a>
    <a href="#Heading4_1_2"> <b>関連ファイル</b><br></a>
    </ul>
<p><a href="#Heading3_2">  2 <b>モジュール</b><br></a>
    <ul>
    <a href="#Heading4_2_1"> <b>モジュールの依存関係</b><br></a>
    <a href="#Heading4_2_2"> <b>モジュールの引数</b><br></a>
    </ul>
<p><a href="#Heading3_3">  3 <b>PFSファイルシステムの特徴</b><br></a>
    <ul>
    <a href="#Heading4_3_1"> <b>構造</b><br></a>
    <a href="#Heading4_3_2"> <b>パフォーマンス</b><br></a>
    <a href="#Heading4_3_3"> <b>安全性</b><br></a>
    </ul>
<p><a href="#Heading3_4">  4 <b>ファイル操作以外の機能</b><br></a>
<p><a href="#Heading3_5">  5 <b>注意事項</b><br></a>
    <ul>
    <a href="#Heading4_5_1"> <b>パフォーマンス維持の条件</b><br></a>
    <a href="#Heading4_5_2"> <b>読み書き速度の無保証</b><br></a>
    <a href="#Heading4_5_3"> <b>電源OFF処理</b><br></a>
    <a href="#Heading4_5_4"> <b>エラー処理について</b><br></a>
    <a href="#Heading4_5_5"> <b>ソフトウェアリセット機能の実装について</b><br></a>
    <a href="#Heading4_5_6"> <b>空き容量等の確認について</b><br></a>
    </ul>
<br></td></tr></table></div>

<!-- 見出し　２，章見出し -->
<a name=#"Heading2">

<!-- 見出し　３，節見出し -->
<a name="Heading3_1">
<h2>
 1 <b>ライブラリ概要</b><br>
<hr noshade>
</h2>


<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_1_1">
<a href="#Heading3_1"> 1. </a>1 <b>概要</b><br>
</a>
</h3>
<div style="margin-left:50px;">pfsモジュールは、PFS（PlayStation File System）ファイルシステムを操作するためのモジュールです。<br>PFSファイルシステムは、"PlayStation 2"において少ないメモリ使用量で最大のパフォーマンスが得られるように設計されたファイルシステムです。階層ディレクトリやファイルモードなどUnix系のファイルシステムに類似した外部仕様を持ち、複数のパーティションをまとめてひとつのファイルシステムとする機能があります。また、データ破損の危険を抑えるROBUSTモードを持ち、さらに、ジャーナルファイルシステムを採用してデータ破損時にも迅速かつ的確に修復できるようになっています。<br>pfsモジュールに対するすべての操作はI/O manager経由で行います。デバイス名は"pfs0:" / "pfs1:" / "pfs2:" ...で、数字はマウント時に指定することができます。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_1_2">
<a href="#Heading3_1"> 1. </a>2 <b>関連ファイル</b><br>
</a>
</h3>
<div style="margin-left:50px;">pfsモジュールを使用するために必要なファイルは以下のとおりです。<br></div>

<div style="margin-left:40px;"><h4><b>EE</b><br></h4></div>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>カテゴリ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>ファイル名</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;ヘッダファイル&nbsp;</td>
<td valign="TOP">&nbsp;sifdev.h&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;ライブラリファイル&nbsp;</td>
<td valign="TOP">&nbsp;libkernl.a&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>IOP</b><br></h4></div>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>カテゴリ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>ファイル名</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;ヘッダファイル&nbsp;</td>
<td valign="TOP">&nbsp;stdio.h&nbsp;<br>&nbsp;dirent.h&nbsp;<br>&nbsp;errno.h&nbsp;<br>&nbsp;sys/file.h&nbsp;<br>&nbsp;sys/ioctl.h&nbsp;<br>&nbsp;sys/mount.h&nbsp;<br>&nbsp;sys/stat.h&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;ライブラリファイル&nbsp;</td>
<td valign="TOP">&nbsp;iop.ilb&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;モジュールファイル&nbsp;</td>
<td valign="TOP">&nbsp;dev9.irx&nbsp;<br>&nbsp;atad.irx&nbsp;<br>&nbsp;hdd.irx&nbsp;<br>&nbsp;pfs.irx&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 見出し　３，節見出し -->
<a name="Heading3_2">
<h2>
 2 <b>モジュール</b><br>
<hr noshade>
</h2>


<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_2_1">
<a href="#Heading3_2"> 2. </a>1 <b>モジュールの依存関係</b><br>
</a>
</h3>
<div style="margin-left:50px;">pfsモジュールを使用するには、pfs.irxよりも先に以下の3つのモジュールが順にロードされ、メモリに常駐している必要があります。<br><br></div>
<div style="margin-left:40px;"><ul>
         <li> dev9.irx	カードが接続されるデバイスのモジュール
         <li> atad.irx 	ハードディスクドライブのドライバモジュール
         <li> hdd.irx	ハードディスクドライブとパーティションの管理モジュール
</ul></div>
<div style="margin-left:50px;"><br>これらのモジュールは初期化時にエラーが発生すると常駐しません。pfsモジュールをロードする際には、IOP側ではLoadStartModule()、EE側ではsceSifLoadStartModule()を使用して、これらのモジュールが常駐しているかどうかを確認してください。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_2_2">
<a href="#Heading3_2"> 2. </a>2 <b>モジュールの引数</b><br>
</a>
</h3>

<div style="margin-left:40px;"><h4><b>-m 同時マウント数</b><br></h4></div>

<div style="margin-left:67px;">同時にマウントできるファイルシステムの数を指定することができます。現在のバージョンでは、1マウントあたり324バイトのメモリを消費します。<br></div>

<div style="margin-left:40px;"><h4><b>-n バッファキャッシュ数</b><br></h4></div>

<div style="margin-left:67px;">ドライバが使用するバッファキャッシュの数を指定することができます。現在のバージョンでは、1バッファあたり1052バイトのメモリを消費します。デフォルトでは8個のバッファを使用しますが、バッファ数を増やすことにより、モジュールの動作スピードが速くなる可能性があります。<br>指定できるバッファ数の最小値は9、最大値は現在のバージョンでは127です。<br>8以下を指定すると8が指定されます。<br></div>

<div style="margin-left:40px;"><h4><b>-o ファイル数</b><br></h4></div>

<div style="margin-left:67px;">同時にオープンできるファイル数を指定することができます。現在のバージョンでは、1オープンあたり560バイトのメモリを消費します。これとは別に、1オープンにつき1〜2つのバッファキャッシュを必要とします。<br></div>

<!-- 見出し　３，節見出し -->
<a name="Heading3_3">
<h2>
 3 <b>PFSファイルシステムの特徴</b><br>
<hr noshade>
</h2>


<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_3_1">
<a href="#Heading3_3"> 3. </a>1 <b>構造</b><br>
</a>
</h3>

<div style="margin-left:40px;"><h4><b>64ビットファイルシステム</b><br></h4></div>

<div style="margin-left:67px;">PFSは64ビットファイルシステムです。ただし、1回の read / write / seek操作の単位は32ビットです。<br></div>

<div style="margin-left:40px;"><h4><b>サイズの上限</b><br></h4></div>

<div style="margin-left:67px;">ひとつのファイルシステムのサイズは最大2Tバイトです。ファイルのサイズも最大2Tバイトです。<br></div>

<div style="margin-left:40px;"><h4><b>論理ボリューム</b><br></h4></div>

<div style="margin-left:67px;">PFSは、ディスクを有効に活用するために、複数の物理パーティションをまとめてひとつの論理ボリューム（ファイルシステム）として扱う機構を持っています。ファイルシステムを構築した後でも、パーティションを追加することによってファイルシステムの大きさを変更できます。<br>新しく追加されたパーティションは、ファイルシステムをマウントする際に自動的に認識されます。<br></div>

<div style="margin-left:40px;"><h4><b>ディレクトリ</b><br></h4></div>

<div style="margin-left:67px;">PFSでは、従来のファイルシステムと同様のディレクトリによる階層構造を持っています。ディレクトリサイズは可変長であり、ひとつのディレクトリに配置できるファイル数に制限はありません。ただし、ディレクトリルックアップキャッシュなどを持たないため、ひとつのディレクトリに多数のファイルを配置するとパフォーマンスが低下します。なるべく、ひとつのディレクトリに多数のファイルを配置しないようにしてください。<br></div>

<div style="margin-left:40px;"><h4><b>ファイル名</b><br></h4></div>

<div style="margin-left:67px;">ファイル名には「/」以外のすべての文字を使用することができます。ファイル名の長さは255文字まで、パス名の長さは1024文字までです。<br></div>

<div style="margin-left:40px;"><h4><b>ファイルモード</b><br></h4></div>

<div style="margin-left:67px;">PFSでは、ファイルのアクセスモード（パーミッション）として、従来のUnixファイルシステムと同様に、オーナー / グループ / アザーの3区分に対して実行権 / 書き込み権 / 読み込み権をそれぞれ設定することができます。<br>現在の"PlayStation 2"システムではユーザーの概念そのものが存在しないため、現在のライブラリでは、ファイルの所有者を表すユーザーID（uid）や属しているグループを表すグループID（gid）は0xffffに固定して扱っています。システムが作成するファイルについては、uid / gidはともに0になります。<br>将来的にはユーザーの概念が導入される可能性があります。ファイルやディレクトリの作成時にはモード指定を必ず行ってください。<br></div>

<div style="margin-left:40px;"><h4><b>リンク</b><br></h4></div>

<div style="margin-left:67px;">PFSでは、シンボリックリンクのみをサポートしています。ハードリンクはサポートしていません。<br></div>

<div style="margin-left:40px;"><h4><b>拡張アトリビュート</b><br></h4></div>

<div style="margin-left:67px;">MIMEタイプに似た"key/value"による拡張アトリビュートを各ファイルに設定することができます。keyとvalueに指定できる文字列の長さは最大255文字までで、使用できる文字に制限はありません。<br>ただし、現バージョンでは、拡張アトリビュートのための領域が1024バイトしかありません。そのため最悪の場合、最大2エントリしか設定できない可能性があります。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_3_2">
<a href="#Heading3_3"> 3. </a>2 <b>パフォーマンス</b><br>
</a>
</h3>

<div style="margin-left:40px;"><h4><b>メモリ効率</b><br></h4></div>

<div style="margin-left:67px;">PFSは、メモリの使用量を極力減らし、少ないメモリ使用量で最大のパフォーマンスが得られるように設計されています。また、ファイルシステムが使用するバッファキャッシュなどの使用量は、モジュールをロードする際にオプションによって変更することができるようになっています。<br></div>

<div style="margin-left:40px;"><h4><b>ファイルの配置</b><br></h4></div>

<div style="margin-left:67px;">PFSは、パフォーマンスのうちでもファイルの読み込みスピードを重視しています。ファイルを配置する際にも、高速に読み込めるようにするためできるだけ連続した領域を割り当てています。そのため相対的に、ファイル書き込みのスピードは領域確保処理の分だけ遅くなっています。<br>ファイル書き込みのスピードを上げたい場合には、領域確保のみを事前に行っておくことができます。<br></div>

<div style="margin-left:40px;"><h4><b>ゾーンサイズの設定</b><br></h4></div>

<div style="margin-left:67px;">PFSでは、ファイルの断片を構成する最小単位（FATでいうクラスタ、ext2等でいうブロックに相当するもの）をゾーンと呼びます。ゾーンのサイズは可変で、ファイルシステムのフォーマット時に、2K / 4K / 8K ... 128Kバイトのいずれかを指定します。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_3_3">
<a href="#Heading3_3"> 3. </a>3 <b>安全性</b><br>
</a>
</h3>

<div style="margin-left:40px;"><h4><b>ジャーナリング</b><br></h4></div>

<div style="margin-left:67px;">PFSではジャーナリングと呼ぶログ記録処理によって、システムクラッシュなどの際にファイルシステムが破損しても修復できるようになっています。ファイル作成などの操作に際して、ハードディスクドライブにはファイルの内容のほかにファイルシステムの構成情報、たとえばディレクトリやinode等に相当するなどのデータも書き込む必要があります（これらをメタデータと呼びます）。もし一連の書き込みシーケンスの途中でシステムがクラッシュすると、メタデータが矛盾した状態になり、ファイル内容を正しく読み取れなくなる場合があります。<br>従来のファイルシステムでも、ファイルシステム検査ユーティリティによってすべてのメタデータを調べ、矛盾を検出してファイルシステムを修復することは可能ですが、検査・修復には非常に時間がかかり、また完全に修復できるとは限りません。<br>PFSでは、ジャーナル領域を別に用意し、この領域に変更を記録してからメタデータを書き込みます。もし途中でシステムがクラッシュしても、ジャーナルデータに基づいて完全かつ迅速にファイルシステムを修復することができます。<br>なお、PFSはメタデータに対してのみジャーナリングを行います。ファイルデータは直接ディスクに書き込まれ、ファイルシステム上のバッファキャッシュにも保存されることはありません。<br></div>

<div style="margin-left:40px;"><h4><b>ROBUSTモード</b><br></h4></div>

<div style="margin-left:67px;">ファイルシステムをマウントする際に、データ破損の危険を最小に抑えるROBUSTモードというモードを選択することができます。<br>通常モードでマウントした場合には、メタデータの更新は、バッファキャッシュが更新すべきデータで一杯になったとき、Sync関数が呼ばれたとき、アンマウントされたときに行われます。たとえばファイルを新たに作成する場合、オープン関数から戻ってきた時点ではメタデータがまだ更新されていない可能性があります。この状態でシステムがクラッシュしたりすると、作成したはずのファイルが消失することになります。<br>ROBUSTモードでマウントした場合は、ファイルシステムを更新すべき処理が行われたときにその都度メタデータを更新します。たとえばオープン関数から処理が戻って来た時点で、Sync関数を呼び出したのと同様にメタデータが更新されていることが保証されます。<br>なお、ROBUSTモードを指定するとパフォーマンスが低下します。<br></div>

<!-- 見出し　３，節見出し -->
<a name="Heading3_4">
<h2>
 4 <b>ファイル操作以外の機能</b><br>
<hr noshade>
</h2>

<div style="margin-left:50px;">通常のファイル操作以外に、以下の機能が用意されています。<br><br></div>
<div style="margin-left:40px;"><ul>
         <li> 領域の確保 / 解放
         <li> ゾーンサイズの取得
         <li> 空きゾーン数の取得
         <li> 全ファイルの一括クローズ
         <li> 拡張アトリビュートの操作
</ul></div>
<div style="margin-left:50px;"><br>詳しくは関数リファレンスを参照してください。<br></div>

<!-- 見出し　３，節見出し -->
<a name="Heading3_5">
<h2>
 5 <b>注意事項</b><br>
<hr noshade>
</h2>


<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_5_1">
<a href="#Heading3_5"> 5. </a>1 <b>パフォーマンス維持の条件</b><br>
</a>
</h3>
<div style="margin-left:50px;">ハードディスクドライブに対する読み書きは512バイト単位で行うのが速度的に有利です。以下のケースではハードディスクドライブ読み書きのパフォーマンスが低下します。<br><br></div>
<div style="margin-left:40px;"><ul>
         <li> ファイルポインタが512の倍数でないとき
         <li> 読み書きサイズが512の倍数でないとき
         <li> EE側で、読み書き用バッファが64バイトアラインされていないとき
</ul></div>
<div style="margin-left:50px;"><br>512バイト単位が難しい場合でも、EE側では64バイト単位、最低でも4バイト単位で読み書きを行うようにしてください。ある程度大きな単位（16K - 128K）で読み書きを行うほうがパフォーマンスは向上します。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_5_2">
<a href="#Heading3_5"> 5. </a>2 <b>読み書き速度の無保証</b><br>
</a>
</h3>
<div style="margin-left:50px;">ハードディスクドライブの読み書きを行うプログラムは、ディスクアクセスのスピードに依存しないように作成してください。<br>ハードディスクドライブの種類によって速度はまちまちであり、また、ファイルの配置によっても読み書き速度は大きく変化します。制作時の読み書き速度がエンドユーザーの環境で再現される保証はありませんので、プログラムがディスクの読み書き速度に立脚するようなことのないよう、注意してください。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_5_3">
<a href="#Heading3_5"> 5. </a>3 <b>電源OFF処理</b><br>
</a>
</h3>
<div style="margin-left:50px;">ハードディスクドライブの使用中に"PlayStation 2"本体の電源が切られると、ファイルのデータが破壊されるおそれがあります。これを避けるため、必ず以下の手順でCD(DVD)-ROMライブラリの関数を使用してハードディスクドライブの電源OFF処理を行うようにしてください。<br><br></div>
    <div style="margin-left:55px;"><ol>
         <li VALUE=1> sceCdPOffCallback()で割り込み処理を検出する</li>
         <li VALUE=2> ファイル等をクローズする</li>
         <li VALUE=3> dev9の電源を切る</li>
         <li VALUE=4> sceCdPowerOff()で"PlayStation 2"本体の電源を切る</li>
</ol></div>
</ul></div>
<div style="margin-left:50px;"><br>(3)dev9の電源を切るには、直接dev9ライブラリのDDIOC_OFF devctlコマンドを使う方法とハードディスクライブラリのHDIOC_DEV9OFFコマンドを使う方法があります。<br>Release 2.5.2 までは、ハードディスクドライブを使用した場合は、必ずハードディスクライブラリのコマンドを使用することを推奨していましたが、Release2.5.3 からは、電源OFF 処理が dev9 ライブラリに統一されたため、dev9 ライブラリの方を使用することを推奨します。なお、互換性のためにHDIOC_DEV9OFFコマンドも使用することができます。<br><br>また、cdvdfsv.irxをアンロードした場合、EE側からlibcdvdの関数を使用できなくなります。この場合に電源OFF処理を行うには、上記(1)の代わりにscePowerOffHandler()を、(4)の代わりにsceDevctl()のCDIOC_POWEROFFを使用するようにしてください。<br>詳細は、ハードディスクライブラリのサンプル（ee/samle/hdd/basic）およびCD(DVD)-ROMライブラリリファレンス（cdvd_rf）、ネットワークライブラリ概要（inet）、標準入出力関数リファレンス（io_rf）を参照してください。<br>なお、上記の手順で電源OFF処理を行えるのは"PlayStation 2"専用ハードディスクドライブ(EXPANTION BAYタイプ)を使用している場合だけで、"PlayStation 2"専用ハードディスクドライブ(外付型)ではsceCdPOffCallback()で割り込みを検出することができません。このため、終了メニューを設けて電源OFF処理を行う、ハードディスクドライブへのアクセスを行う際には電源を切らないようにというメッセージを表示する、終了方法を解説書に記載するなど、安全にアプリケーションを終了する手段を講じることを推奨します。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_5_4">
<a href="#Heading3_5"> 5. </a>4 <b>エラー処理について</b><br>
</a>
</h3>
<div style="margin-left:50px;">pfsの各関数で-EIO（入出力エラー）が返された場合、ハードディスクドライブに障害が発生していると考えられますので、ハードディスクドライブの修復を行うようユーザーに促すメッセージを表示するようにしてください。<br>ファイルのリード時にユーザーファイルデータ中に不良セクタが発見された場合には、通常のEIOエラーではなく-(EIO|0x10000)が返されます。この場合は、ファイルを上書きするか消去するようにしてください。なおこのエラーは、pfsが返すエラーのうち現在のところ唯一errno.hに定義されていないデバイス依存のエラーです。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_5_5">
<a href="#Heading3_5"> 5. </a>5 <b>ソフトウェアリセット機能の実装について</b><br>
</a>
</h3>
<div style="margin-left:50px;">ユーザーが特別な操作を行うことによって強制的に別の処理に移るソフトウェアリセット機能を実装する場合、ハードディスクドライブに対する書き込み処理の間はその機能を無効にしなければなりません。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_5_6">
<a href="#Heading3_5"> 5. </a>6 <b>空き容量等の確認について</b><br>
</a>
</h3>
<div style="margin-left:50px;">ハードディスクドライブを使用するアプリケーションは、次の場面ではハードディスクドライブが接続されていることと必要なだけの空き容量があることを確認して、もし支障があればその旨のメッセージを表示しなければなりません。<br></div>
<div style="margin-left:40px;"><ul>
         <li> 起動時（ハードディスクドライブを必要とするタイトルのみ）
         <li> アプリケーションをインストールするとき
         <li> データをセーブしようとするとき<br>
</ol></div>
<br>
<p><p><hr>
<div ALIGN="right">
    Copyright (c) 2002 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
