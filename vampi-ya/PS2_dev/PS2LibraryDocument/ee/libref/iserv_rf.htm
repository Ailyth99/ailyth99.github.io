<html lang="ja">
<!-- 見出し　１，部見出し -->
<head>

<script language="JavaScript">
<!--
  function startFixed(){
    fixedLAYER('fixedLay0','rightBottom',-35,-35)
  }

  var ie= !!document.all
  var n4= !!document.layers
  var w3c=!!document.getElementById
  var mac45 
    = navigator.userAgent.indexOf('MSIE 4.5; Mac_PowerPC')

  if(document.layers)window.onresize=resizeFunc
  function resizeFunc(e){location.reload()}

  function iniFunc(){
    if(ie&&!(mac45!=-1))window.onscroll = startFixed
    startFixed()
  }

  var tid=new Array()

  function fixedLAYER(layName,posString,offSetX,offSetY){

    offSetX = parseInt(offSetX,10)
    offSetY = parseInt(offSetY,10)

 if( posString == 'rightBottom' ){

      if(ie) offLeft = document.body.clientWidth   + offSetX
      else   offLeft = window.innerWidth           + offSetX
      if(ie) offTop  = document.body.clientHeight  + offSetY
      else   offTop  = window.innerHeight          + offSetY

    }
    else {

      if(ie) offLeft =                               offSetX
      else   offLeft =                               offSetX
      if(ie) offTop  =                               offSetY
      else   offTop  =                               offSetY

    }

    offLeft = parseInt(offLeft)
    offTop  = parseInt(offTop)

    if(document.all){
      var mx = parseInt(document.body.scrollLeft +offLeft)
      var my = parseInt(document.body.scrollTop  +offTop)
    } else {
      var mx = parseInt(self.pageXOffset+offLeft)
      var my = parseInt(self.pageYOffset+offTop)

    }

    moveLAYER(layName,mx,my)

    if(!(ie&&!(mac45!=-1)))
      setTimeout("fixedLAYER('"+layName+"','"+posString
                   +"','" +offSetX+"','"+offSetY+"')",100)
  }

  function moveLAYER(layName,x,y){
      
      if(document.getElementById){
        document.getElementById(layName).style.left=x
        document.getElementById(layName).style.top=y
      }
      else if(document.all){
        document.all(layName).style.pixelLeft=x
        document.all(layName).style.pixelTop=y
      }
      else if(document.layers)
        document.layers[layName].moveTo(x,y)
  }

// -->
</script>

<script language="JavaScript">
<!--
  function lj(ch,fm)
  {
    if ( parent.index ) {
      if ( ch == "libref" ){ parent.index.location.href="../libref/category.htm"; }
      else if ( ch == "../ee/libref" ){ parent.index.location.href="../../ee/libref/category.htm"; }
      else if ( ch == "../iop/libref" ){ parent.index.location.href="../../iop/libref/category.htm"; }
      else if ( ch == "../iop/overview" ){ parent.index.location.href="../../iop/overview/category.htm"; }
      else if ( ch == "../ee/overview" ){ parent.index.location.href="../../ee/overview/category.htm"; }
      else if ( ch == "overview" ){ parent.index.location.href="../overview/category.htm"; }
    }
    if ( parent.main ) {
      if ( fm != "" ){ parent.main.location.href=fm; }
    } else {
      if ( fm != "" ){ location.href=fm; }
    }
  }
//-->
</script>
<title>標準IOPサービス</title>
<meta http-equiv="Content-Type"content= text/html; charset=UTF-8 >
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" Content="Sony Computer Entertainment Inc.">
<style type="text/css"><!--
    div.fixedLay{position:absolute;z-index:100;left:0px;top:0px;}
--></style>
</head>
<body onload="iniFunc()" bgcolor="#ffffff" text="#000000" >
<div id="fixedLay0" class="fixedLay">
<a href="#top"><img src="gif/link.gif" border="0" alt="TOP"></a>
</div>
<table WIDTH="100%">
<tr><td>
<h3>"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3</h3>
</td>
</tr>
<tr><td align= right >
<script language="JavaScript">
<!--
   var p,q;
   if ( parent.index ) {
   p = parent.index.location;
   q = p.toString();
   result = q.match(/\/category\.htm/gi);
   if(result == "/category.htm"){
          document.writeln("<a href=\"JavaScript:lj('overview','../overview/libiserv.htm')\"><img src=\"./gif/arrow.png\" border=0>ライブラリ概要</a>");
    }
}
// -->
</script>
</td></tr>
</table>
<hr noshade size=6>
<a name=Heading2>
<center><h1>
標準IOPサービス
</h1></center>
</a>
<font size=4><b>構造体</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceExecData"> sceExecData<br></a></td>
<td>&nbsp;</td><td>オブジェクトの実行データ<br></td></tr>
</table><br>
<font size=4><b>関数</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifAllocIopHeap"> sceSifAllocIopHeap<br></a></td>
<td>&nbsp;</td><td>IOP 側のヒープ領域を確保する<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifAllocSysMemory"> sceSifAllocSysMemory<br></a></td>
<td>&nbsp;</td><td>IOP 側のヒープ領域を確保する<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifFreeIopHeap"> sceSifFreeIopHeap<br></a></td>
<td>&nbsp;</td><td>IOP 側のヒープ領域を解放する<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifFreeSysMemory"> sceSifFreeSysMemory<br></a></td>
<td>&nbsp;</td><td>IOP 側のヒープ領域を解放する<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifInitIopHeap"> sceSifInitIopHeap<br></a></td>
<td>&nbsp;</td><td>IOP 側のヒープ領域を操作する準備をする<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadElf"> sceSifLoadElf<br></a></td>
<td>&nbsp;</td><td>EEメモリへのELFオブジェクトのロード<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadElfPart"> sceSifLoadElfPart<br></a></td>
<td>&nbsp;</td><td>EEメモリへのELFオブジェクトの一部をロード<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadFileReset"> sceSifLoadFileReset<br></a></td>
<td>&nbsp;</td><td>モジュールロードサービスのバインド情報を無効に<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadIopHeap"> sceSifLoadIopHeap<br></a></td>
<td>&nbsp;</td><td>IOP 側のメモリに指定ファイルを読み込む<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadModule"> sceSifLoadModule<br></a></td>
<td>&nbsp;</td><td>IOP メモリへのモジュールのロードと実行<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadModuleBuffer"> sceSifLoadModuleBuffer<br></a></td>
<td>&nbsp;</td><td>IOP の指定メモリからのモジュールロードと実行<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadStartModule"> sceSifLoadStartModule<br></a></td>
<td>&nbsp;</td><td>IOP メモリへのモジュールのロードと実行<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifLoadStartModuleBuffer"> sceSifLoadStartModuleBuffer<br></a></td>
<td>&nbsp;</td><td>IOP の指定メモリからのモジュールロードと実行<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifQueryBlockSize"> sceSifQueryBlockSize<br></a></td>
<td>&nbsp;</td><td>IOP 側のメモリブロックサイズの問い合わせ<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifQueryBlockTopAddress"> sceSifQueryBlockTopAddress<br></a></td>
<td>&nbsp;</td><td>IOP 側のメモリブロックの問い合わせ<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifQueryMaxFreeMemSize"> sceSifQueryMaxFreeMemSize<br></a></td>
<td>&nbsp;</td><td>IOP 側の割り当て可能最大メモリサイズを返す<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifQueryMemSize"> sceSifQueryMemSize<br></a></td>
<td>&nbsp;</td><td>IOP 側のメモリサイズを返す<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifQueryTotalFreeMemSize"> sceSifQueryTotalFreeMemSize<br></a></td>
<td>&nbsp;</td><td>IOP 側の割り当て可能メモリサイズの総計を返す<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifSearchModuleByAddress"> sceSifSearchModuleByAddress<br></a></td>
<td>&nbsp;</td><td>アドレスでIOP モジュールIDを検索<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifSearchModuleByName"> sceSifSearchModuleByName<br></a></td>
<td>&nbsp;</td><td>名前でIOP モジュールIDを検索<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifStopModule"> sceSifStopModule<br></a></td>
<td>&nbsp;</td><td>IOP モジュールの停止<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifUnloadModule"> sceSifUnloadModule<br></a></td>
<td>&nbsp;</td><td>IOP モジュールのアンロード<br></td></tr>
</table><br>
<font size=4><b>iopのリブートとモジュールの書き換え関数</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifRebootIop"> sceSifRebootIop<br></a></td>
<td>&nbsp;</td><td>IOPシステムをリブートする<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceSifSyncIop"> sceSifSyncIop<br></a></td>
<td>&nbsp;</td><td>IOPが再起動したかを確認する<br></td></tr>
</table>

<!-- 見出し　１，部見出し -->
<br></td></tr></table></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>構造体</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceExecData"><font size=6>sceExecData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>オブジェクトの実行データ<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	unsigned int <i>epc</i>;
	unsigned int <i>gp</i>;
	unsigned int <i>sp</i>;
	unsigned int <i>dummy</i>;
} <b>sceEexcData</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>epc</i>&nbsp;</td>
<td valign="TOP">&nbsp;オブジェクトエントリーポイント&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>gp</i>&nbsp;</td>
<td valign="TOP">&nbsp;オブジェクトグローバルポイント&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>sp</i>&nbsp;</td>
<td valign="TOP">&nbsp;オブジェクトスタックポイント&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>dummy</i>&nbsp;</td>
<td valign="TOP">&nbsp;未使用&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceSifLoadElf() や sceSifLoadElfPart() をつかってロードしたオブジェクトの実行情報を格納する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="#sceSifLoadElf">sceSifLoadElf</a>()<a href="#"></a>,<a href="#sceSifLoadElfPart">sceSifLoadElfPart</a>()<br><br><br><br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>関数</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifAllocIopHeap"><font size=6>sceSifAllocIopHeap<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のヒープ領域を確保する<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
void *<b>sceSifAllocIopHeap</b>(
	unsigned int <i>size</i> 
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>size</i>　　確保するサイズ(バイト単位)<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;NULL&nbsp;</td>
<td valign="TOP">&nbsp;失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;NULL以外&nbsp;</td>
<td valign="TOP">&nbsp;IOP での AllocSysMemory() の返り値&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で AllocSysMemory(0,size,NULL) を行い、その取得アドレスを返します。<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br>sceSifAllocIopHeap()で確保したメモリ領域を解放する場合は、sceSifFreeIopHeap()で行うようにしてください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifAllocSysMemory"><font size=6>sceSifAllocSysMemory<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のヒープ領域を確保する<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
void *<b>sceSifAllocSysMemory</b>(
	int <i>type</i> ,
	unsigned int <i>size</i> ,
	void *<i>addr</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>type</i>&nbsp;</td>
<td valign="TOP">&nbsp;メモリの割り当て方針（0、1、2）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>size</i>&nbsp;</td>
<td valign="TOP">&nbsp;確保するサイズ(バイト単位)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;<i>type = 2 の時の指定アドレス</i>&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;NULL&nbsp;</td>
<td valign="TOP">&nbsp;失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;NULL以外&nbsp;</td>
<td valign="TOP">&nbsp;IOP での AllocSysMemory() の返り値&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で AllocSysMemory(type,size,addr) を行い、その取得アドレスを返します。<br>この関数を使用することで、メモリ領域の割り当てを指定することができます。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifFreeIopHeap"><font size=6>sceSifFreeIopHeap<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のヒープ領域を解放する<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifFreeIopHeap</b>(
	void *<i>addr</i> 
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>addr</i>　　解放するアドレス(IOPのメモリアドレス)<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceSifAllocIopHeap()で確保したメモリ領域を解放します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifFreeSysMemory"><font size=6>sceSifFreeSysMemory<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のヒープ領域を解放する<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifFreeSysMemory</b>(
	void *<i>addr</i> 
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>addr</i>　　解放するアドレス(IOPのメモリアドレス)<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">IOP 側で FreeSysMemory(addr) を行い、その返り値を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceSifAllocSysMemory()で確保したメモリ領域を開放します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifInitIopHeap"><font size=6>sceSifInitIopHeap<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のヒープ領域を操作する準備をする<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifInitIopHeap</b>(void)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側のヒープ領域を操作するための初期化を行います。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadElf"><font size=6>sceSifLoadElf<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>EEメモリへのELFオブジェクトのロード<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadElf</b> (
	const char *<i>objfile</i>,
	sceExecData *<i>data</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>objfile</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードすべきオブジェクトのファイル名(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>data</i>&nbsp;</td>
<td valign="TOP">&nbsp;オブジェクトの実行情報&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ロード成功の場合、0を返します。<br>ロード失敗の場合、負の値を返し、以下のいずれかを返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10000&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EBINDMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールへのバインド失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10001&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_ECALLMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側への RPC が失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10003&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_ELOADMISS&nbsp;</td>
<td valign="TOP">&nbsp;ロード失敗&nbsp;<br>&nbsp;(ファイルがない、ELF形式ではないなど)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10004&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EVERSIONMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールのバージョンが合わない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>objfile</i> で指定したファイル名をELF形式のファイルとして EE のメモリ上に転送します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadElfPart"><font size=6>sceSifLoadElfPart<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>EEメモリへのELFオブジェクトの一部をロード<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadElfPart</b> (
	const char *<i>objfile</i>,
	const char *<i>secname</i>,
	sceExecData *<i>data</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>objfile</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードすべきオブジェクトのファイル名(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>scename</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードすべきセクション名(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>data</i>&nbsp;</td>
<td valign="TOP">&nbsp;オブジェクトの実行情報&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ロード成功の場合、0を返します。<br>ロード失敗の場合、負の値を返し、以下のいずれかを返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10000&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EBINDMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールへのバインド失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10001&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_ECALLMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側への RPC が失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10003&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_ELOADMISS&nbsp;</td>
<td valign="TOP">&nbsp;ロード失敗&nbsp;<br>&nbsp;(ファイルがない、ELF形式ではないなど)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10004&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EVERSIONMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールのバージョンが合わない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>objfile</i> で指定したファイル名をELF形式のファイルとして EE のメモリ上に転送します。<br>その際、<i>secname</i> で指定したセクション名(".text や".bss")のみロードします。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadFileReset"><font size=6>sceSifLoadFileReset<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>モジュールロードサービスのバインド情報を無効に<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadFileReset</b>( void )

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">現在、必ず０を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側をリセット後は、モジュールロードサービスの RPC バインド情報が無効になるので必ずこの関数を呼んでください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadIopHeap"><font size=6>sceSifLoadIopHeap<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のメモリに指定ファイルを読み込む<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadIopHeap</b>(
	const char *<i>fname</i>,
	void *<i>addr</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめ sceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>fname</i>&nbsp;</td>
<td valign="TOP">&nbsp;読み込むファイル名&nbsp;<br>&nbsp;(IOPでopen()できる名前。最大252文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;IOPのメモリアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で指定ファイル名 <i>fname</i> で open() を行い、成功すれば <i>addr</i> のメモリアドレスへファイルの内容を読み込みます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadModule"><font size=6>sceSifLoadModule<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP メモリへのモジュールのロードと実行<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadModule</b> (
	const char *<i>module</i>,
	int <i>args</i>,
	const char *<i>argp</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめ sceSifInitRpc(0) を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードすべきモジュールのファイル名(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>args</i>&nbsp;</td>
<td valign="TOP">&nbsp;argp のサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>argp</i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールのロード時に渡される引数(最大251文字)&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ロード成功の場合、0以上を返します。<br>ロード失敗の場合、負の値を返し、以下のいずれかを返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10000&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EBINDMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールへのバインド失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10001&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_ECALLMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側への RPC が失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10004&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EVERSIONMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールのバージョンが&nbsp;<br>&nbsp;合わない&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">上記以外は、IOP側の LoadStartModule() の返り値を返す。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>module</i> で指定したファイル名をロードすべき IOP モジュールのファイル名として IOP 側に送り、 LoadStartModule() を実行します。args/argp は LoadStartModule() の引数args/argp としてそのまま与えられます。<br><i>argp</i> は、NULL で区切られた複数の文字列が指定可能です。その複数の文字列の最初のものから順に、モジュールの初期化関数に arg[1] .. arg[n] として与えられます。<br>詳しくは、IOPの LoadStartModule() を参照してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadModuleBuffer"><font size=6>sceSifLoadModuleBuffer<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP の指定メモリからのモジュールロードと実行<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadModuleBuffer</b> (
	const void *<i>addr</i>,
	int <i>args</i>,
	const char *<i>argp</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;IOPモジュールの元がおいてあるIOPのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>args</i>&nbsp;</td>
<td valign="TOP">&nbsp;argp のサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>argp </i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールのロード時に渡される引数(最大251文字)&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;ロード成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;ロード失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>address</i> で指定した領域のデータをロードすべき IOP モジュールのアドレスとして IOP 側に送り、 LoadModuleBuffer()/StartModule()を実行します。<br><i>args</i>/<i>argp</i> は StarModule() の引数 <i>args</i>/<i>argp</i> としてそのまま与えられます。<br><i>argp</i> は、NULL で区切られた複数の文字列が指定可能です。その複数の文字列の最初のものから順に、モジュールの初期化関数に arg[1] .. arg[n] として与えられます。<br>詳しくは、IOP の LoadModuleBuffer()/StartModule() を参照してください。<br><br>使用例は以下のようになります。sio2man.irx をロードする場合。<br></div>
        <div style="margin-left:93px;"><pre><font size=3>
int fd, size;
void *mem,*iopaddr;
sceSifDmaData sd;

sceSifInitRpc(0);
sceSifInitIopHeap();

// irx モジュールデータを EE 側へ
fd = sceOpen( "host0:sio2man.irx", SCE_RDONLY );
if( fd &lt; 0 ) {
	// オープン失敗：エラー処理
}
size = sceLseek( fd, 0, SCE_SEEK_END);
sceLseek( fd , 0, SCE_SEEK_SET);
if ((mem = (void *)memalign(64, size)) == NULL) {
	// メモリ確保失敗：エラー処理
}
if (size != sceRead(fd, mem, size)) {
	// ファイルリード失敗：エラー処理
}
sceClose(fd);

// IOP 側のメモリ確保
iopaddr = sceSifAllocIopHeap( size );

// IOP 側へモジュールデータの送信
sd.data = (unsigned int) mem;
sd.addr = (unsigned int) iopaddr;
sd.size = size;
sd.mode = 0;
sceSifSetDma( &sd, 1);

// モジュールバッファの発行
if (sceSifLoadModuleBuffer(iopaddr, 0, NULL) &lt; 0) {
	// モジュールバッファ失敗：エラー処理
}

// EE/IOP の不要メモリの解放
free(mem);
sceSifFreeIopHeap(iopaddr);
</pre></font></div>
<div style="margin-left:50px;"><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadStartModule"><font size=6>sceSifLoadStartModule<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP メモリへのモジュールのロードと実行<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadStartModule</b> (
	const char *<i>module</i>,
	int <i>args</i>,
	const char *<i>argp,</i>
<i>	</i>int *<i>result</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめ sceSifInitRpc(0) を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードすべきモジュールのファイル名(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>args</i>&nbsp;</td>
<td valign="TOP">&nbsp;argp のサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>argp</i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールのロード時に渡される引数(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>result</i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールの初期化ルーチンが返す戻り値を格納する&nbsp;<br>&nbsp;変数へのポインタを指定します。&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ロード成功の場合、モジュールの番号(0以上)を返します。<br>ロード失敗の場合、負の値を返し、以下のいずれかを返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10000&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EBINDMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールへのバインド失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10001&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_ECALLMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側への RPC が失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-0x10004&nbsp;</td>
<td valign="TOP">&nbsp;-SCE_EVERSIONMISS&nbsp;</td>
<td valign="TOP">&nbsp;IOP側のモジュールのバージョンが&nbsp;<br>&nbsp;合わない&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">上記以外は、IOP側のLoadStartModule() の返り値を返す。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceSifLoadModule() に <i>result</i> 値を追加した関数です。<br>詳しくは、sceSifLoadModule() および、IOPの LoadStartModule() を参照してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifLoadStartModuleBuffer"><font size=6>sceSifLoadStartModuleBuffer<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP の指定メモリからのモジュールロードと実行<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifLoadStartModuleBuffer</b> (
	const void *<i>addr</i>,
	int <i>args</i>,
	const char *<i>argp</i>,
	int *<i>result</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;IOPモジュールの元がおいてあるIOPのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>args</i>&nbsp;</td>
<td valign="TOP">&nbsp;argp のサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>argp </i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールのロード時に渡される引数(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>result</i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールの初期化ルーチンが返す戻り値を格納する&nbsp;<br>&nbsp;変数へのポインタを指定します。&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;ロード成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;ロード失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceSifLoadModuleBuffer() に <i>result</i> 値を追加した関数です。<br>詳しくは、sceSifLoadModuleBuffer() および、IOPの LoadModuleBuffer()/StartModule() を参照してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifQueryBlockSize"><font size=6>sceSifQueryBlockSize<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のメモリブロックサイズの問い合わせ<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
unsigend int <b>sceSifQueryBlockSize</b>(
	void *<i>addr</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;IOP メモリ上の任意のアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;非KE_ERROR&nbsp;</td>
<td valign="TOP">&nbsp;最上位ビットはメモリの状態。&nbsp;<br>&nbsp;その他のビットはブロックのサイズを表す&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;KE_ERROR&nbsp;</td>
<td valign="TOP">&nbsp;アドレス値が不正、管理外のアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">RPC が失敗した場合は、0xffffffff を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で QueryBlcokSize(addr) を行い、指定したアドレスがどのブロックかをしらべ、そのブロックのサイズを返します。<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifQueryBlockTopAddress"><font size=6>sceSifQueryBlockTopAddress<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のメモリブロックの問い合わせ<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
void *<b>sceSifQueryTopAddress</b>(
	void *<i>addr</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;IOP メモリ上の任意のアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;非KE_ERROR&nbsp;</td>
<td valign="TOP">&nbsp;最上位ビットはメモリの状態&nbsp;<br>&nbsp;その他のビットはアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;KE_ERROR&nbsp;</td>
<td valign="TOP">&nbsp;アドレス値が不正、管理外のアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">RPC が失敗した場合は、0xffffffff を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で QueryBlcokTopAddress(addr) を行い、指定したアドレスがどのブロックかをしらべ、そのブロックの先頭のアドレスを返します。<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifQueryMaxFreeMemSize"><font size=6>sceSifQueryMaxFreeMemSize<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側の割り当て可能最大メモリサイズを返す<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
unsigend int <b>sceSifQueryMaxFreeMemSize</b> ()

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;割り当て可能な最大メモリブロックのバイト数&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">RPC が失敗した場合は、0xffffffff を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で QueryMaxFreeMemSize() を行い、現在割り当て可能なメモリブロックの中で最大のもののサイズを返します。<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifQueryMemSize"><font size=6>sceSifQueryMemSize<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側のメモリサイズを返す<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
unsigend int <b>sceSifQueryMemSize</b> ()

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;正（&gt;0）&nbsp;</td>
<td valign="TOP">&nbsp;管理対象のメモリ総バイト数&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">RPC が失敗の場合、0xffffffff を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で QueryMemSize() を行い、IOPシステムメモマネージャの管理対象のメモリサイズを返します。<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifQueryTotalFreeMemSize"><font size=6>sceSifQueryTotalFreeMemSize<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP 側の割り当て可能メモリサイズの総計を返す<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
unsigend int <b>sceSifQueryTotalFreeMemSize</b>()

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;割り当て可能なメモリの総バイト数&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">RPC が失敗した場合は、0xffffffff を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOP 側で QueryTotalFreeMemSize() を行い、現在割り当て可能なメモリの総計をレポートします。<br>あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifSearchModuleByAddress"><font size=6>sceSifSearchModuleByAddress<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>アドレスでIOP モジュールIDを検索<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifSearchModuleByAddress</b>(
	const void *<i>addr</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>addr</i>　　検索するアドレス<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;該当モジュールID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;検索失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定のアドレスに存在するIOPモジュールのモジュールID を返します。<br>IOP の SearchModuleByAddress () を呼び出す関数です。<br>詳しくは、IOPの SearchModuleByAddress () を参照してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifSearchModuleByName"><font size=6>sceSifSearchModuleByName<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>名前でIOP モジュールIDを検索<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifSearchModuleByName</b> (
	const char *<i>modulename</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>modulename</i>&nbsp;</td>
<td valign="TOP">&nbsp;検索するIOPモジュールの&nbsp;<br>&nbsp;モジュール名（最大251文字）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;該当モジュールID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;検索失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定の名前の IOPモジュールを検索してそのモジュールIDを返します。<br>IOP の SearchModuleByName() を呼び出す関数です。<br>詳しくは、IOPの SearchModuleByName() を参照してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifStopModule"><font size=6>sceSifStopModule<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP モジュールの停止<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifStopModule</b> (
	int <i>modid</i>,
	int <i>args</i>,
	const char *<i>argp</i>,
	int *<i>result</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>modid</i>&nbsp;</td>
<td valign="TOP">&nbsp;停止させる IOPモジュールのモジュールID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>args</i>&nbsp;</td>
<td valign="TOP">&nbsp;argp のサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>argp </i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールの停止時に渡される引数(最大251文字)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>result</i>&nbsp;</td>
<td valign="TOP">&nbsp;モジュールの停止ルーチンが返す戻り値を格納する&nbsp;<br>&nbsp;変数へのポインタを指定します。&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;停止成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;停止失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOPモジュールを停止するために、IOP の StopModule() を呼び出す関数です。<br>詳しくは、IOPの StopModule() を参照してください。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifUnloadModule"><font size=6>sceSifUnloadModule<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOP モジュールのアンロード<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifUnloadModule</b> (
	int <i>modid</i>,
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>modid</i>&nbsp;</td>
<td valign="TOP">&nbsp;停止させる IOPモジュールのモジュールID&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0以上&nbsp;</td>
<td valign="TOP">&nbsp;アンロード成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;負の値&nbsp;</td>
<td valign="TOP">&nbsp;アンロード失敗&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOPモジュールをアンロードするために、IOP の UnloadModule() を呼び出す関数です。<br>詳しくは、IOPの UnloadModule() を参照してください。<br><br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>iopのリブートとモジュールの書き換え関数</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifRebootIop"><font size=6>sceSifRebootIop<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOPシステムをリブートする<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifRebootIop</b>(
	const char *<i>imgfile</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>imgfile</i>&nbsp;</td>
<td valign="TOP">&nbsp;置き換えモジュールの&nbsp;<br>&nbsp;イメージファイル名(最大70文字)&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">成功の場合、０以外を返します。<br>失敗の場合、０を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOPシステムサービスをリブートして、デフォルトモジュールを置き換える為の関数です。<br>本関数をコールした後、sceSifSyncIop() を発行して IOP がリブートしたことが確認できるまでの間は sceGsResetGraph() を呼ばないようにしてください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceSifSyncIop"><font size=6>sceSifSyncIop<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IOPが再起動したかを確認する<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;sifdev.h&gt;
int <b>sceSifSyncIop</b>(void)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;IOPシステムサービスのリブートが完了&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;それ以外&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">IOPシステムサービスをリブート完了を確認する為の関数です。<br><br></div>
<p><p><hr>
<div ALIGN="right">
    Copyright (c) 2002 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
