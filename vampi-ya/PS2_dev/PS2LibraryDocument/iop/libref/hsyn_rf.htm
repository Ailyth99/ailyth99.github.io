<html lang="ja">
<!-- 見出し　１，部見出し -->
<head>

<script language="JavaScript">
<!--
  function startFixed(){
    fixedLAYER('fixedLay0','rightBottom',-35,-35)
  }

  var ie= !!document.all
  var n4= !!document.layers
  var w3c=!!document.getElementById
  var mac45 
    = navigator.userAgent.indexOf('MSIE 4.5; Mac_PowerPC')

  if(document.layers)window.onresize=resizeFunc
  function resizeFunc(e){location.reload()}

  function iniFunc(){
    if(ie&&!(mac45!=-1))window.onscroll = startFixed
    startFixed()
  }

  var tid=new Array()

  function fixedLAYER(layName,posString,offSetX,offSetY){

    offSetX = parseInt(offSetX,10)
    offSetY = parseInt(offSetY,10)

 if( posString == 'rightBottom' ){

      if(ie) offLeft = document.body.clientWidth   + offSetX
      else   offLeft = window.innerWidth           + offSetX
      if(ie) offTop  = document.body.clientHeight  + offSetY
      else   offTop  = window.innerHeight          + offSetY

    }
    else {

      if(ie) offLeft =                               offSetX
      else   offLeft =                               offSetX
      if(ie) offTop  =                               offSetY
      else   offTop  =                               offSetY

    }

    offLeft = parseInt(offLeft)
    offTop  = parseInt(offTop)

    if(document.all){
      var mx = parseInt(document.body.scrollLeft +offLeft)
      var my = parseInt(document.body.scrollTop  +offTop)
    } else {
      var mx = parseInt(self.pageXOffset+offLeft)
      var my = parseInt(self.pageYOffset+offTop)

    }

    moveLAYER(layName,mx,my)

    if(!(ie&&!(mac45!=-1)))
      setTimeout("fixedLAYER('"+layName+"','"+posString
                   +"','" +offSetX+"','"+offSetY+"')",100)
  }

  function moveLAYER(layName,x,y){
      
      if(document.getElementById){
        document.getElementById(layName).style.left=x
        document.getElementById(layName).style.top=y
      }
      else if(document.all){
        document.all(layName).style.pixelLeft=x
        document.all(layName).style.pixelTop=y
      }
      else if(document.layers)
        document.layers[layName].moveTo(x,y)
  }

// -->
</script>

<script language="JavaScript">
<!--
  function lj(ch,fm)
  {
    if ( parent.index ) {
      if ( ch == "libref" ){ parent.index.location.href="../libref/category.htm"; }
      else if ( ch == "../ee/libref" ){ parent.index.location.href="../../ee/libref/category.htm"; }
      else if ( ch == "../iop/libref" ){ parent.index.location.href="../../iop/libref/category.htm"; }
      else if ( ch == "../iop/overview" ){ parent.index.location.href="../../iop/overview/category.htm"; }
      else if ( ch == "../ee/overview" ){ parent.index.location.href="../../ee/overview/category.htm"; }
      else if ( ch == "overview" ){ parent.index.location.href="../overview/category.htm"; }
    }
    if ( parent.main ) {
      if ( fm != "" ){ parent.main.location.href=fm; }
    } else {
      if ( fm != "" ){ location.href=fm; }
    }
  }
//-->
</script>
<title>CSLハードウェア・シンセサイザ</title>
<meta http-equiv="Content-Type"content= text/html; charset=UTF-8 >
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" Content="Sony Computer Entertainment Inc.">
<style type="text/css"><!--
    div.fixedLay{position:absolute;z-index:100;left:0px;top:0px;}
--></style>
</head>
<body onload="iniFunc()" bgcolor="#ffffff" text="#000000" >
<div id="fixedLay0" class="fixedLay">
<a href="#top"><img src="gif/link.gif" border="0" alt="TOP"></a>
</div>
<table WIDTH="100%">
<tr><td>
<h3>"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3</h3>
</td>
</tr>
<tr><td align= right >
<script language="JavaScript">
<!--
   var p,q;
   if ( parent.index ) {
   p = parent.index.location;
   q = p.toString();
   result = q.match(/\/category\.htm/gi);
   if(result == "/category.htm"){
          document.writeln("<a href=\"JavaScript:lj('overview','../overview/modhsyn.htm')\"><img src=\"./gif/arrow.png\" border=0>ライブラリ概要</a>");
    }
}
// -->
</script>
</td></tr>
</table>
<hr noshade size=6>
<a name=Heading2>
<center><h1>
CSLハードウェア・シンセサイザ
</h1></center>
</a>
<font size=4><b>構造体</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_EffectAttr"> sceHSyn_EffectAttr<br></a></td>
<td>&nbsp;</td><td>エフェクトパラメータ<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_VoiceStat"> sceHSyn_VoiceStat<br></a></td>
<td>&nbsp;</td><td>モジュールの状態<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSynChStat"> sceHSynChStat<br></a></td>
<td>&nbsp;</td><td>チャンネル毎のボイス使用状況取得用構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSynEnv"> sceHSynEnv<br></a></td>
<td>&nbsp;</td><td>入力環境<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSynUserLfoWave"> sceHSynUserLfoWave<br></a></td>
<td>&nbsp;</td><td>ユーザー定義LFO波形<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSynUserVelocityMap"> sceHSynUserVelocityMap<br></a></td>
<td>&nbsp;</td><td>ユーザー定義velocity変換テーブル<br></td></tr>
</table><br>
<font size=4><b>関数</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_AllNoteOff"> sceHSyn_AllNoteOff<br></a></td>
<td>&nbsp;</td><td>入力バッファの全てのVoiceをKEY_OFF<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_AllSoundOff"> sceHSyn_AllSoundOff<br></a></td>
<td>&nbsp;</td><td>入力バッファの全Voiceを消音<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_ATick"> sceHSyn_ATick<br></a></td>
<td>&nbsp;</td><td>割り込み処理<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_GetChStat"> sceHSyn_GetChStat<br></a></td>
<td>&nbsp;</td><td>全チャンネルのボイス使用状況の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_GetOutputMode"> sceHSyn_GetOutputMode<br></a></td>
<td>&nbsp;</td><td>出力のモノ／ステレオ切り替え状況の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_GetReservVoice"> sceHSyn_GetReservVoice<br></a></td>
<td>&nbsp;</td><td>予約Voice状況の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_GetVoiceCtrlPort"> sceHSyn_GetVoiceCtrlPort<br></a></td>
<td>&nbsp;</td><td>ボイス使用入力ポートの取得（MACRO）<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_GetVoiceStat"> sceHSyn_GetVoiceStat<br></a></td>
<td>&nbsp;</td><td>ボイス利用状態の取得（MACRO）<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_GetVolume"> sceHSyn_GetVolume<br></a></td>
<td>&nbsp;</td><td>入力毎のボリューム値の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_Init"> sceHSyn_Init<br></a></td>
<td>&nbsp;</td><td>初期化<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_Load"> sceHSyn_Load<br></a></td>
<td>&nbsp;</td><td>波形データ情報を登録<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_MSGetVoiceEnvelopeByID"> sceHSyn_MSGetVoiceEnvelopeByID<br></a></td>
<td>&nbsp;</td><td>MIDIストリームで発音されたボイスのエンベロープ値をIDから検索<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_MSGetVoiceStateByID"> sceHSyn_MSGetVoiceStateByID<br></a></td>
<td>&nbsp;</td><td>MIDIストリームで発音されたボイスの状態をIDから検索<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_ResetAllControler"> sceHSyn_ResetAllControler<br></a></td>
<td>&nbsp;</td><td>入力バッファのコントローラの値を初期化<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SEAllNoteOff"> sceHSyn_SEAllNoteOff<br></a></td>
<td>&nbsp;</td><td>SE用入力バッファの全てのVoiceをKEY_OFF<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SEAllSoundOff"> sceHSyn_SEAllSoundOff<br></a></td>
<td>&nbsp;</td><td>SE用入力バッファの全Voiceを消音<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SERetrieveAllSEMsgIDs"> sceHSyn_SERetrieveAllSEMsgIDs<br></a></td>
<td>&nbsp;</td><td>SEストリームで発音されたボイスで使用されている全てのSEメッセージIDを検索<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SERetrieveVoiceNumberByID"> sceHSyn_SERetrieveVoiceNumberByID<br></a></td>
<td>&nbsp;</td><td>SEストリームで発音されたボイスのボイス番号をIDから検索<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SESetMaxVoices"> sceHSyn_SESetMaxVoices<br></a></td>
<td>&nbsp;</td><td>SEストリームで発音されるボイス数全体の上限の設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SetEffectAttr"> sceHSyn_SetEffectAttr<br></a></td>
<td>&nbsp;</td><td>EFFECTの設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SetOutputMode"> sceHSyn_SetOutputMode<br></a></td>
<td>&nbsp;</td><td>出力のモノ／ステレオ切り替え<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SetReservVoice"> sceHSyn_SetReservVoice<br></a></td>
<td>&nbsp;</td><td>予約Voiceの設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SetVoiceStatBuffer"> sceHSyn_SetVoiceStatBuffer<br></a></td>
<td>&nbsp;</td><td>モジュールの状態モニタバッファの登録<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_SetVolume"> sceHSyn_SetVolume<br></a></td>
<td>&nbsp;</td><td>入力毎のボリュームの設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_Unload"> sceHSyn_Unload<br></a></td>
<td>&nbsp;</td><td>波形データ情報の登録を解除<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHSyn_VoiceTrans"> sceHSyn_VoiceTrans<br></a></td>
<td>&nbsp;</td><td>SPU2へwave dataを転送<br></td></tr>
</table>

<!-- 見出し　１，部見出し -->
<br></td></tr></table></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>構造体</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_EffectAttr"><font size=6>sceHSyn_EffectAttr<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>エフェクトパラメータ<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>core</i>;
</font></pre></div>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_OFF&nbsp;</td>
<td valign="TOP">&nbsp;0&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_ROOM&nbsp;</td>
<td valign="TOP">&nbsp;1&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_STUDIO_A&nbsp;</td>
<td valign="TOP">&nbsp;2&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_STUDIO_B&nbsp;</td>
<td valign="TOP">&nbsp;3&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_STUDIO_C&nbsp;</td>
<td valign="TOP">&nbsp;4&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_HALL &nbsp;</td>
<td valign="TOP">&nbsp;5&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_SPACE&nbsp;</td>
<td valign="TOP">&nbsp;6&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_ECHO&nbsp;</td>
<td valign="TOP">&nbsp;7&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_DELAY&nbsp;</td>
<td valign="TOP">&nbsp;8&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_PIPE&nbsp;</td>
<td valign="TOP">&nbsp;9&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_MAX&nbsp;</td>
<td valign="TOP">&nbsp;10&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;#define SCEHS_REV_MODE_CLEAR_WA&nbsp;</td>
<td valign="TOP">&nbsp;(1&lt;&lt;8)&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><pre><font size=3>	int <i>mode</i>;
	short <i>depth_L, depth_R</i>;
	int <i>delay</i>;
	int <i>feedback</i>;
	short <i>vol_l, vol_r</i>;
} <b>sceHSyn_EffectAttr</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>vol_l, vol_r</i>&nbsp;</td>
<td valign="TOP">&nbsp;エフェクトのリターンボリューム（深さ）&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;">その他は、libsd.h sceSdEffectAttr と同一<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エフェクト属性を設定するための構造体です。<br>エフェクトのリターンボリューム（深さ）の指定において、現在の実装では<i>depth_L</i> == <i>vol_L</i>, <i>depth_R</i> == <i>vol_R</i>となるように、それぞれの値を指定してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_VoiceStat"><font size=6>sceHSyn_VoiceStat<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>モジュールの状態<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>pendingVoiceCount</i>;
	int <i>workVoiceCount</i>;
	unsigned char <i>voice_state</i>[sceHSyn_NumCore][sceHSyn_NumVoice];
	unsigned short <i>voice_env</i>[sceHSyn_NumCore][sceHSyn_NumVoice];
} <b>sceHSyn_VoiceStat</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>pendingVoiceCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;発音待機中のボイスの数&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>workVoiceCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;発音中のボイスの数(KEY_OFFを含む)&nbsp;</td>
</tr>
<tr>
<td rowspan= 6  valign="top">&nbsp;<i>voice_state</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ボイスの状態&nbsp;<br>&nbsp;bit-7: データ有効ビット&nbsp;<br>&nbsp;　== 1 の場合、bit-0 -- bit-6 の内容が有効となる。&nbsp;<br>&nbsp;bit-4,5,6: ボイスの状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;　sceHSyn_VoiceStat_Free&nbsp;</td>
<td valign="top">&nbsp;空き&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;　sceHSyn_VoiceStat_Pending&nbsp;</td>
<td valign="top">&nbsp;発音待ち&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;　sceHSyn_VoiceStat_KeyOn&nbsp;</td>
<td valign="top">&nbsp;キーオン・発音中&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;　sceHSyn_VoiceStat_KeyOff&nbsp;</td>
<td valign="top">&nbsp;キーオフ・発音中&nbsp;</td>
</tr>
<tr>
<td colspan= 2  valign="top">&nbsp;bit-0,1,2,3: 使用しているポートの番号&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>voice_env</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;エンベロープ値（sceHSyn_VoiceStat_KeyOn,&nbsp;<br>&nbsp;sceHSyn_VoiceStat_KeyOff 時のみ有効）&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">モジュールの状態を取得するための構造体です。<br>メンバ<i>voice_state</i>を取り扱うマクロとして次のものが用意されています。<br></div>
<div style="margin-left:70px;">sceHSyn_GetVoiceStat(voice_state[?][?])　　　ボイス状態の取得<br>sceHSyn_GetVoiceCtrlPort(voice_state[?][?])　使用ポートの取得<br></div>
<div style="margin-left:50px;">いずれも、bit-7 == 0の場合、-1が返ります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSynChStat"><font size=6>sceHSynChStat<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>チャンネル毎のボイス使用状況取得用構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	unsigned char <i>ch</i>[16];
} <b>sceHSynChStat</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>ch[XX]</i>&nbsp;</td>
<td valign="TOP">&nbsp;XXチャンネルのボイスの使用状況&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;">以下のビットにより検査し状態を知ることができる。<br><br></div>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;sceHSynChStat_KeyOn&nbsp;</td>
<td valign="TOP">&nbsp;KEY ONで発音中のボイスあり&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceHSynChStat_Hold&nbsp;</td>
<td valign="TOP">&nbsp;MIDI Note Off Messageを受信したが&nbsp;<br>&nbsp;HOLD ONのため発音が継続しているボイスあり&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceHSynChStat_KeyOff&nbsp;</td>
<td valign="TOP">&nbsp;KEY OFFでまだ発音が終了していないボイスあり&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">空きチャンネル（まったく発音していないチャンネル）はch[<i>XX</i>]==0となります。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHSyn_GetChStat()で各チャンネルの発音状態を調べる際に、結果を受け取るための構造体です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSynEnv"><font size=6>sceHSynEnv<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>入力環境<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	unsigned char <i>priority</i>;
	unsigned char <i>maxPolyphony</i>;
	unsigned char <i>portMode</i>;
	unsigned char <i>waveType</i>;
	int <i>lfoWaveNum</i>;
	sceHSynUserLfoWave *<i>lfoWaveTbl</i>;
	int <i>velocityMapNum</i>;
	sceHSynUserVelocityMap *<i>velocityMapTbl</i>;
	unsigned char <i>system</i>[sceHSynEnvSize];
} <b>sceHSynEnv</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>priority</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;入力buffer毎の優先度&nbsp;<br>&nbsp;wave parameterの優先度をw_priとした場合&nbsp;<br>&nbsp;priority + w_priが、発音中のvoiceの優先度となり、&nbsp;<br>&nbsp;最大優先度は 255&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>maxPolyphony</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;この入力で使用する最大音数（デフォルト 48)&nbsp;</td>
</tr>
<tr>
<td rowspan= 2  valign="top">&nbsp;<i>portMode</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;この入力で使用するストリームのモード&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;sceHSynModeHSyn&nbsp;<br>&nbsp;sceHSynModeSESyn&nbsp;</td>
<td valign="top">&nbsp;MIDIストリーム (デフォルト)&nbsp;<br>&nbsp;SEストリーム&nbsp;</td>
</tr>
<tr>
<td rowspan= 2  valign="top">&nbsp;<i>waveType</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;この入力で使用するバンクバイナリデータ内のChunk&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;sceHSynTypeProgram&nbsp;<br>&nbsp;sceHSynTypeTimbre&nbsp;</td>
<td valign="top">&nbsp;Program Chunkの利用(デフォルト)&nbsp;<br>&nbsp;Timbre Chunk (SE)の利用&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>lfoWaveNum</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ユーザー定義LFOの数&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>lfoWaveTbl</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ユーザー定義LFO配列の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>velocityMapNum</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ユーザー定義velocity変換テーブルの数&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>velocityMapTbl</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ユーザー定義velocity変換テーブル配列の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>system</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;このモジュールが使う内部変数領域&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">入力buffer毎に演奏状態等を管理するための環境バッファです。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSynUserLfoWave"><font size=6>sceHSynUserLfoWave<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ユーザー定義LFO波形<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	unsigned char <i>id</i>;
	unsigned short <i>waveLen</i>;	// in sample
	short *<i>wave</i>;
} <b>sceHSynUserLfoWave</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>id</i>&nbsp;</td>
<td valign="TOP">&nbsp;Wave Parameterで指定するLFOのID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>waveLen</i>&nbsp;</td>
<td valign="TOP">&nbsp;波形データの数&nbsp;<br>&nbsp;16bitを単位として扱います。&nbsp;<br>&nbsp;(20byteの波形の場合 10)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>wave</i>&nbsp;</td>
<td valign="TOP">&nbsp;波形データ&nbsp;<br>&nbsp;符号付き16bit&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ユーザー定義LFOを定義するための構造体です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSynUserVelocityMap"><font size=6>sceHSynUserVelocityMap<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ユーザー定義velocity変換テーブル<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	unsigned char <i>velMap</i>[sceHSynNumVelocity];
} <b>sceHSynUserVelocityMap</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>velMap[v]</i>&nbsp;</td>
<td valign="TOP">&nbsp;Velocity == vに対応する値（1 -- 127）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Note On MessageのVelocityを修飾するためのテーブルです。<br><br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>関数</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_AllNoteOff"><font size=6>sceHSyn_AllNoteOff<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>入力バッファの全てのVoiceをKEY_OFF<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_AllNoteOff</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定された入力バッファの全ボイスをキーオフ状態にします。<br>対象となるボイスはキーオフ後、エンベロープがリリース状態に移ります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_AllSoundOff"><font size=6>sceHSyn_AllSoundOff<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>入力バッファの全Voiceを消音<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_AllSoundOff</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定された入力バッファの全ボイスを消音します。<br>対象となるボイスはエンベロープ：リリースレートが最小に変更されてキーオフ処理が行われます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_ATick"><font size=6>sceHSyn_ATick<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>割り込み処理<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_ATick</b>(
	sceCslCtx *<i>module_context</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出し、および他のCSLモジュールのsce???_Atick()の呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">常に0を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みから定期的に呼出される処理です。<br>すべての入力メッセージを処理し、Voiceの状態を更新します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_GetChStat"><font size=6>sceHSyn_GetChStat<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>全チャンネルのボイス使用状況の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_GetChStat</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>,
	sceHSynChStat *<i>buff_addr</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>buff_addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;状態取得バッファのアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたポートの全チャンネルのボイス使用状況を調べます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_GetOutputMode"><font size=6>sceHSyn_GetOutputMode<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>出力のモノ／ステレオ切り替え状況の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_GetOutputMode</b>(
	void
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynOutputMode_Mono&nbsp;</td>
<td valign="TOP">&nbsp;パンポットが無効になり、&nbsp;<br>&nbsp;すべてがセンターになる&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynOutputMode_Stereo&nbsp;</td>
<td valign="TOP">&nbsp;パンポットが有効&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">出力モード（パンポットの有効／無効）の設定状況を取得します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_GetReservVoice"><font size=6>sceHSyn_GetReservVoice<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>予約Voice状況の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_GetReservVoice</b>(
	unsigned int <i>voice_bit[2]</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>voice_bit[0]</i>にはcore 0の予約ボイス、<i>voice_bit[1]</i>にはcore 1の予約ボイスが返る。<br>bit-0がvoice 0, bit-Nがvoice Nに対応し、該当ビットが1のボイスが予約ボイスとなる。<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">常に0を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHSyn_SetReservVoiceにて設定したシンセサイザモジュールでの使用を禁止されている予約ボイスの状況を取得します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_GetVoiceCtrlPort"><font size=6>sceHSyn_GetVoiceCtrlPort<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ボイス使用入力ポートの取得（MACRO）<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_GetVoiceCtrlPort</b>(
	unsigned char v<i>oice_state_value</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>voice_state_value</i>　ボイス状態<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">成功の場合、使用されている入力ポート番号を返します（ボイス利用状態がsceHSyn_VoiceStat_KeyOn, sceHSyn_VoiceStat_KeyOff 時のみ有効）。<br>エラーの場合、-1を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ボイスが使用されている入力ポート番号を取得します。<br>構造体 sceHSyn_VoiceStatで宣言される状態モニタバッファのメンバ voice_stateにおいて、利用状態を調べたいボイスの配列要素に含まれている値を<i>voice_state_value</i>として指定します。<br>状態モニタバッファは、関数sceHSyn_SetVoiceStatBuffer() にて事前に登録されている必要があります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="#sceHSyn_VoiceStat">sceHSyn_VoiceStat</a>,<a href="#sceHSyn_SetVoiceStatBuffer">sceHSyn_SetVoiceStatBuffer</a>()<br><br><br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_GetVoiceStat"><font size=6>sceHSyn_GetVoiceStat<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ボイス利用状態の取得（MACRO）<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_GetVoiceStat</b>(
	unsigned char v<i>oice_state_value</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>voice_state_value</i>　ボイス状態<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ボイスの利用状態<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSyn_VoiceStat_Free&nbsp;</td>
<td valign="TOP">&nbsp;ボイスは現在使用されていない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;16&nbsp;</td>
<td valign="TOP">&nbsp;sceHSyn_VoiceStat_Pending&nbsp;</td>
<td valign="TOP">&nbsp;ボイスは発音待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;32&nbsp;</td>
<td valign="TOP">&nbsp;sceHSyn_VoiceStat_KeyOn&nbsp;</td>
<td valign="TOP">&nbsp;ボイスはキーオンされ発音中&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;48&nbsp;</td>
<td valign="TOP">&nbsp;sceHSyn_VoiceStat_KeyOff&nbsp;</td>
<td valign="TOP">&nbsp;ボイスはキーオフされたが発音中&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー（指定されたボイス状態は不正）&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ボイスの利用状態を取得します。<br>構造体 sceHSyn_VoiceStatで宣言される状態モニタバッファのメンバ voice_stateにおいて、利用状態を調べたいボイスの配列要素に含まれている値を<i>voice_state_value</i>として指定します。<br>状態モニタバッファは、関数sceHSyn_SetVoiceStatBuffer() にて事前に登録されている必要があります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="#sceHSyn_VoiceStat">sceHSyn_VoiceStat</a>,<a href="#sceHSyn_SetVoiceStatBuffer">sceHSyn_SetVoiceStatBuffer</a>()<br><br><br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_GetVolume"><font size=6>sceHSyn_GetVolume<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>入力毎のボリューム値の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>unsigned short <b>sceHSyn_GetVolume</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">成功の場合、指定された入力バッファのボリューム値を返します。<br>エラーの場合、0を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">入力バッファ単位でのボリューム値を取得します。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_Init"><font size=6>sceHSyn_Init<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>初期化<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_Init</b>(
	sceCslCtx *<i>module_context</i>, 
	unsigned int <i>interval</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br>既にボイスが発音されている状態で本関数を呼んだ場合、その発音状態は不定になりますのでご注意ください。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>interval</i>&nbsp;</td>
<td valign="TOP">&nbsp;sceHSyn_ATick()が呼出される周期をマイクロ秒で&nbsp;<br>&nbsp;表した値&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ハードウェア・シンセサイザモジュールの内部環境およびSPU2の初期化を行ないます。<br>EffectはOFFになります。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_Load"><font size=6>sceHSyn_Load<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>波形データ情報を登録<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_Load</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>,
	void *<i>spu2_wave_address</i>,
	void *<i>header_address</i>,
	unsigned int <i>bank</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>spu2_wave_address</i>&nbsp;</td>
<td valign="TOP">&nbsp;SPU2ローカルメモリ上のBDデータアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>header_address</i>&nbsp;</td>
<td valign="TOP">&nbsp;IOPメモリ上のHDデータアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>bank</i>&nbsp;</td>
<td valign="TOP">&nbsp;バンク番号（0〜15）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">波形データ情報を登録します。<br>事前にSPU2ローカルメモリ上にBDデータが転送され、IOPメモリ上にHDデータが配置されている必要があります。<br>発音中のポートの波形データ情報を変更した場合の動作は保証されません。<br>なお、指定された入力ポートの入力環境の属性として、ストリームのモード(portMode)にSEストリーム(sceHSynModeSESyn)、Chunk利用(waveType)にTimbre Chunk (sceHSynTypeTimbre) を指定した場合、バンク番号の指定は無視され、その入力ポートでは常に最後に指定されたHD/BDデータが使用されます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_MSGetVoiceEnvelopeByID"><font size=6>sceHSyn_MSGetVoiceEnvelopeByID<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>MIDIストリームで発音されたボイスのエンベロープ値をIDから検索<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_ MSGetVoiceEnvelopeByID</b> (
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number,</i>
<i>	</i>unsigned char<i> id,</i>
	unsigned short <i>ret</i> [max_voices],
	char <i>max_voices</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>id</i>&nbsp;</td>
<td valign="TOP">&nbsp;ID番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ret</i>&nbsp;</td>
<td valign="TOP">&nbsp;ID番号が使われているボイスのエンベロープ値&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>max_voices</i>&nbsp;</td>
<td valign="TOP">&nbsp;検索されるボイスの最大数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">成功の場合、見つかったボイスの数（&gt;=0）を返します。<br>エラーの場合、sceHSynError（-1）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたMIDIストリーム入力指定の入力バッファにおいて、拡張MIDIメッセージにて指定したID番号で発音処理が行われているボイスの現在のエンベロープ値(*)を、構造体sceHSyn_VoiceStatのメンバ<i>voice_env</i>と同じ形式で、<i>ret</i>に最大<i>max_voices</i>を個数の上限として返します。<br><i>ret</i>は要素数が最低<i>max_voices</i>個持つユーザ側の配列です。<br><br>(*)...直前にsceHSyn_ATick()が呼ばれた時点の状態です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_MSGetVoiceStateByID"><font size=6>sceHSyn_MSGetVoiceStateByID<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>MIDIストリームで発音されたボイスの状態をIDから検索<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_ MSGetVoiceStateByID</b> (
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number,</i>
<i>	</i>unsigned char<i> id,</i>
	unsigned char <i>ret</i> [max_voices],
	char <i>max_voices</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>id</i>&nbsp;</td>
<td valign="TOP">&nbsp;ID番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ret</i>&nbsp;</td>
<td valign="TOP">&nbsp;ID番号が使われているボイスのボイス状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>max_voices</i>&nbsp;</td>
<td valign="TOP">&nbsp;検索されるボイスの最大数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">成功の場合、見つかったボイスの数（&gt;=0）を返します。<br>エラーの場合、sceHSynError（-1）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたMIDIストリーム入力指定の入力バッファにおいて、拡張MIDIメッセージにて指定したID番号で発音処理が行われているボイスの状態(*)を、構造体sceHSyn_VoiceStatのメンバ<i>voice_state</i>と同じ形式で、<i>ret</i>に最大<i>max_voices</i>を個数の上限として返します。<br><i>ret</i>は要素数が最低<i>max_voices</i>個持つユーザ側の配列です。<br><br>(*)...直前にsceHSyn_ATick()が呼ばれた時点の状態です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_ResetAllControler"><font size=6>sceHSyn_ResetAllControler<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>入力バッファのコントローラの値を初期化<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_ResetAllControler</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定された入力バッファのコントローラの値を初期値に戻します。<br>初期値に戻すコントローラは<br></div>
<div style="margin-left:70px;">ホールド<br>ピッチベンド<br>モジュレーション<br>ポルタメント<br></div>
<div style="margin-left:50px;">です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SEAllNoteOff"><font size=6>sceHSyn_SEAllNoteOff<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>SE用入力バッファの全てのVoiceをKEY_OFF<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SEAllNoteOff</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたSEストリーム入力指定の入力バッファの全ボイスをキーオフ状態にします。<br>対象となるボイスはキーオフ後、エンベロープがリリース状態に移ります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SEAllSoundOff"><font size=6>sceHSyn_SEAllSoundOff<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>SE用入力バッファの全Voiceを消音<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SEAllSoundOff</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Context のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError0&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたSEストリーム入力指定の入力バッファの全ボイスを消音・解放します。<br>対象となるボイスはエンベロープ：リリースレートが最小に変更されてキーオフ処理が行われます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SERetrieveAllSEMsgIDs"><font size=6>sceHSyn_SERetrieveAllSEMsgIDs<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>SEストリームで発音されたボイスで使用されている全てのSEメッセージIDを検索<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SERetrieveAllSEMsgIDs</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number,</i>
<i>	</i>unsigned int *<i>ret</i>,
	int <i>max_voices</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ret</i>&nbsp;</td>
<td valign="TOP">&nbsp;ボイスで使用されているSEメッセージID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>max_voices</i>&nbsp;</td>
<td valign="TOP">&nbsp;検索されるSEメッセージIDの最大数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">成功の場合、見つかったSEメッセージIDの数（&gt;=0）を返します。<br>エラーの場合、sceHSynError（-1）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたSEストリーム入力指定の入力バッファにおいて、発音処理が行われているボイスの全てのSEメッセージIDを、<i>ret</i>に最大<i>max_voices</i>を個数の上限として返します。<br><i>ret</i>は要素数が最低<i>max_voices</i>個持つユーザ側の配列です。<br>SEストリームが演奏中でも、データの内容によってはボイス割り当てが一つも行われていない状態があるため、演奏中のSEシーケンスが使用しているSEメッセージIDが全て検索されない場合があります。SEシーケンスが演奏中かどうかはsceSESq_SeqIsInPlay()にて判別を行ってください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SERetrieveVoiceNumberByID"><font size=6>sceHSyn_SERetrieveVoiceNumberByID<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>SEストリームで発音されたボイスのボイス番号をIDから検索<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SERetrieveVoiceNumberByID</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number,</i>
<i>	</i>unsigned int<i> id,</i>
	char *<i>ret</i>,
	char <i>max_voices</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>id</i>&nbsp;</td>
<td valign="TOP">&nbsp;ID番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ret</i>&nbsp;</td>
<td valign="TOP">&nbsp;ID番号が使われているボイスのボイス番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>max_voices</i>&nbsp;</td>
<td valign="TOP">&nbsp;検索されるボイスの最大数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">成功の場合、見つかったボイスの数（&gt;=0）を返します。<br>エラーの場合、sceHSynError（-1）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたSEストリーム入力指定の入力バッファにおいて、指定したID番号で発音処理が行われているボイスのボイス番号（0〜47。24以降はCORE1）を、<i>ret</i>に最大<i>max_voices</i>を個数の上限として返します。<br><i>ret</i>は要素数が最低<i>max_voices</i>個持つユーザ側の配列です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SESetMaxVoices"><font size=6>sceHSyn_SESetMaxVoices<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>SEストリームで発音されるボイス数全体の上限の設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SESetMaxVoices</b>(
	unsigned char <i>max_voices</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>max_voices</i>&nbsp;</td>
<td valign="TOP">&nbsp;SEストリームで発音されるボイス数全体の上限&nbsp;<br>&nbsp;あるいは0&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">SEストリームで発音されるボイス数全体の上限を設定します。<br>SEストリームはこの上限の範囲でボイスを割り当てられ、処理が行われます。<br><i>max_voices</i>に0を指定した場合は全てのボイスを対象に、空きボイス、及びプライオリティによってボイス割り当てが行われます。<br>ボイスが発音中に呼出された場合の動作は保証されません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SetEffectAttr"><font size=6>sceHSyn_SetEffectAttr<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>EFFECTの設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SetEffectAttr</b>(
	sceHSyn_EffectAttr *<i>effect_attribute</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">モード指定により異なります。<br></div>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;SCEHS_REV_MODE_CLEAR_WA&nbsp;</td>
<td valign="TOP">&nbsp;割り込みハンドラから呼び出し不可&nbsp;<br>&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;マルチスレッドセーフでない&nbsp;<br>&nbsp;(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;上記のモード以外&nbsp;</td>
<td valign="TOP">&nbsp;割り込みハンドラから呼び出し可能&nbsp;<br>&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;マルチスレッドセーフでない&nbsp;<br>&nbsp;(割り込み禁止状態で呼ぶこと)&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;">ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>effect_attribute</i>&nbsp;</td>
<td valign="TOP">&nbsp;設定するエフェクトの状態&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">常にsceHSynNoError（0）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">SPU2のエフェクトの設定を行ないます。<br><i>effect_attr</i>の各メンバの指定については構造体sceHSyn_EffectAttrの解説を参照してください。<br>特に、モードにSCEHS_REV_MODE_CLEAR_WAを追加指定した場合には内部でクリア処理が行われるため、呼び出し条件が異なることにご注意ください。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SetOutputMode"><font size=6>sceHSyn_SetOutputMode<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>出力のモノ／ステレオ切り替え<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SetOutputMode</b>(
	int <i>output_mode</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>output_mode</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;出力モード&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;sceHSynOutputMode_Mono&nbsp;</td>
<td valign="top">&nbsp;パンポットが無効になり、&nbsp;<br>&nbsp;すべてがセンターになる&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;sceHSynOutputMode_Stereo&nbsp;</td>
<td valign="top">&nbsp;パンポットが有効&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">出力モード（パンポットの有効／無効）の設定を行ないます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SetReservVoice"><font size=6>sceHSyn_SetReservVoice<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>予約Voiceの設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SetReservVoice</b>(
	unsigned int <i>voice_bit[2]</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>voice_bit[0]</i>にはcore0の予約ボイス、<i>voice_bit[1]</i>にはcore1の予約ボイスを指定する。<br>bit-0がvoice 0,bit-Nがvoice Nに対応し、該当ビットが1のボイスが予約ボイスとなる。<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">常に0を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">各コアの持つボイスのうち、一部のボイスを予約ボイスとして、シンセサイザモジュールでの使用を禁止します。<br>ボイスが発音中に呼出された場合の動作は保証されません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SetVoiceStatBuffer"><font size=6>sceHSyn_SetVoiceStatBuffer<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>モジュールの状態モニタバッファの登録<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SetVoiceStatBuffer</b>(
	sceHSyn_VoiceStat *<i>status_buffer</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>status_buffer</i>&nbsp;</td>
<td valign="TOP">&nbsp;状態格納用バッファアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">常にsceHSynNoError（0）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">モジュールの現在の状態モニタ用バッファを登録します。<br>状態はsceHSyn_ATick()の実行によって更新されます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_SetVolume"><font size=6>sceHSyn_SetVolume<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>入力毎のボリュームの設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_SetVolume</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>,
	unsigned short<i> vol</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>vol</i>&nbsp;</td>
<td valign="TOP">&nbsp;ボリューム値&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">入力バッファ単位でのボリュームの設定を行ないます。<br>voiceのvolumeをv_volとした場合、実際に出力される値は以下のようになります。<br>(v_vol * vol) / sceHSyn_Volume_0db<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_Unload"><font size=6>sceHSyn_Unload<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>波形データ情報の登録を解除<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_Unload</b>(
	sceCslCtx *<i>module_context</i>,
	unsigned int <i>port_number</i>,
	unsigned int <i>bank</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止状態で呼ぶこと）<br>ただし、この関数の呼び出しが他のsceHSyn関数呼び出しと競合しない場合、マルチスレッド環境にて割り込み許可状態で呼び出すことができます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>module_context</i>&nbsp;</td>
<td valign="TOP">&nbsp;Module Contextのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port_number</i>&nbsp;</td>
<td valign="TOP">&nbsp;入力ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>bank</i>&nbsp;</td>
<td valign="TOP">&nbsp;バンク番号（0〜15）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">波形データ情報の登録を解除します。<br>発音中のポートに対して波形データ情報の登録を解除した場合の動作は保証されません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHSyn_VoiceTrans"><font size=6>sceHSyn_VoiceTrans<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>SPU2へwave dataを転送<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHSyn_VoiceTrans</b>(
	short <i>channel</i>,
	unsigned char *<i>data_address</i>,
	unsigned char *<i>spu2_address</i>,
	unsigned int <i>size</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み許可状態で呼ぶこと）<br>注意：<br>複数のスレッド間でこの関数を同時に呼び出さないように注意してください。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>channel</i>&nbsp;</td>
<td valign="TOP">&nbsp;使用チャンネル&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>data_address</i>&nbsp;</td>
<td valign="TOP">&nbsp;データのメモリ上アドレス（転送元）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>spu2_address</i>&nbsp;</td>
<td valign="TOP">&nbsp;SPU2のアドレス（転送先）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>size</i>&nbsp;</td>
<td valign="TOP">&nbsp;転送サイズ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynNoError&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;sceHSynError&nbsp;</td>
<td valign="TOP">&nbsp;エラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">SPU2ローカルメモリに波形データ(BDファイル)をDMA転送します。<br>SPU2ローカルメモリ上にある発音中の波形データを上書きした場合、その元データを使っていたボイスの動作、ならびに出力されていたサウンドは保証されません。<br>libsdで用意されている転送関数を使うことにより、より細かな制御が可能です。<br><br></div>
<p><p><hr>
<div ALIGN="right">
    Copyright (c) 2002 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
