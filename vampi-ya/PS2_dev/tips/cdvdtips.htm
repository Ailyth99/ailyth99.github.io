<html lang="ja">
<!-- 見出し　１，部見出し -->
<head>
<script language="JavaScript">
<!--
  function startFixed(){
    fixedLAYER('fixedLay0','rightBottom',-35,-35)
  }

  var ie= !!document.all
  var n4= !!document.layers
  var w3c=!!document.getElementById
  var mac45 
    = navigator.userAgent.indexOf('MSIE 4.5; Mac_PowerPC')

  if(document.layers)window.onresize=resizeFunc
  function resizeFunc(e){location.reload()}

  function iniFunc(){
    if(ie&&!(mac45!=-1))window.onscroll = startFixed
    startFixed()
  }

  var tid=new Array()

  function fixedLAYER(layName,posString,offSetX,offSetY){

    offSetX = parseInt(offSetX,10)
    offSetY = parseInt(offSetY,10)

 if( posString == 'rightBottom' ){

      if(ie) offLeft = document.body.clientWidth   + offSetX
      else   offLeft = window.innerWidth           + offSetX
      if(ie) offTop  = document.body.clientHeight  + offSetY
      else   offTop  = window.innerHeight          + offSetY

    }
    else {

      if(ie) offLeft =                               offSetX
      else   offLeft =                               offSetX
      if(ie) offTop  =                               offSetY
      else   offTop  =                               offSetY

    }

    offLeft = parseInt(offLeft)
    offTop  = parseInt(offTop)

    if(document.all){
      var mx = parseInt(document.body.scrollLeft +offLeft)
      var my = parseInt(document.body.scrollTop  +offTop)
    } else {
      var mx = parseInt(self.pageXOffset+offLeft)
      var my = parseInt(self.pageYOffset+offTop)

    }

    moveLAYER(layName,mx,my)

    if(!(ie&&!(mac45!=-1)))
      setTimeout("fixedLAYER('"+layName+"','"+posString
                   +"','" +offSetX+"','"+offSetY+"')",100)
  }

  function moveLAYER(layName,x,y){
      
      if(document.getElementById){
        document.getElementById(layName).style.left=x
        document.getElementById(layName).style.top=y
      }
      else if(document.all){
        document.all(layName).style.pixelLeft=x
        document.all(layName).style.pixelTop=y
      }
      else if(document.layers)
        document.layers[layName].moveTo(x,y)
  }

// -->
</script>
<title>CD(DVD)-ROM tips</title>
<meta http-equiv="Content-Type"content= text/html; charset=Shift_JIS >
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" Content="Sony Computer Entertainment Inc.">
<style type="text/css"><!--
    div.fixedLay{position:absolute;z-index:100;left:0px;top:0px;}
--></style>
</head>
<body onload="iniFunc()" bgcolor="#ffffff" text="#000000" >
<div id="fixedLay0" class="fixedLay">
<a href="#top"><img src="gif/link.gif" border="0" alt="TOP"></a>
</div>
<table WIDTH="100%">
<tr><td>
<h3>"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<a name=Heading2>
<center><h1>
CD(DVD)-ROM tips
</h1></center>
</a>
<div align=center>
<table border=0 bgcolor=#F5F5F5 width=90%><tr><td>
<h2><u>
        <b>目次</b><br>
</u></h2>

<ul>
<p><a href="#Heading3_1">  1 <b>このドキュメントについて</b><br></a>
<p><a href="#Heading3_2">  2 <b>ディスク読み込みの高速化</b><br></a>
    <ul>
    <a href="#Heading4_2_1"> <b>高速化のポイント</b><br></a>
    <a href="#Heading4_2_2"> <b>高速化のケーススタディ</b><br></a>
    </ul>
<br></td></tr></table></div>

<!-- 見出し　２，章見出し -->
<a name=#"Heading2">

<!-- 見出し　３，節見出し -->
<a name="Heading3_1">
<h2>
 1 <b>このドキュメントについて</b><br>
<hr noshade>
</h2>

<div style="margin-left:50px;">このドキュメントでは、CD(DVD)-ROMに関するプログラミングのノウハウを紹介します。<br>まず第2章では、CD(DVD)-ROMからの読み込み処理を高速化する手法について、事例とともに解説します。<br></div>

<!-- 見出し　３，節見出し -->
<a name="Heading3_2">
<h2>
 2 <b>ディスク読み込みの高速化</b><br>
<hr noshade>
</h2>

<div style="margin-left:50px;">CD(DVD)-ROMからデータを読み込む際のちょっとした工夫によって、読み込みに要する時間を数十％短縮できるケースがあります。ディスク読み込みの速さによってゲーム自体の印象が変わることも少なくありませんので、以下の資料を参考に、積極的に高速化を行ってください。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_2_1">
<a href="#Heading3_2"> 2. </a>1 <b>高速化のポイント</b><br>
</a>
</h3>
<div style="margin-left:50px;">CD(DVD)-ROMからの読み込みを高速化するためのポイントとして、次の点が挙げられます。<br></div>
    <div style="margin-left:55px;"><ol>
         <li VALUE=1> ディレクトリをまたがないようにする</li>
         <li VALUE=2> MAPファイルを利用してsceCdSearchFile()を省く</li>
         <li VALUE=3> データをまとめておき、ディスクから一括して読み込んでメモリ上で振り分ける</li>
         <li VALUE=4> 近いセクタにデータを配置する</li>
         <li VALUE=5> EEからの読み込みでは64byteアライメントを意識する</li>
</ol></div>
</ul></div>
<div style="margin-left:50px;">結局のところは読み出しヘッドを無駄に移動しないようにすることといえますが、以下、上記のポイントについて背景を解説します。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_1_1"><h4>
(1)&nbsp;<b>ディレクトリをまたがないようにする</b><br></h4>
</a></div>
<div style="margin-left:67px;">一般的なCD(DVD)-ROMへのアクセスは、まずsceCdSearchFile()を用いてファイル名からセクタ番号を求め、そのセクタのデータをsceCdRead()で読み出すという手順を踏みます。この前段階であるsceCdSearchFile()は、ディスクの最内周に記録されているエントリ情報を読み出してセクタ番号を求めていますが、検索対象のファイルと同じディレクトリにあるファイルのエントリ情報を読み出してライブラリ内のエントリキャッシュに保存しています。これにより、次に検索されるファイルが同じディレクトリのファイルであればエントリ情報をディスクから読み出さずに済み、処理時間を短縮できるしくみになっています。しかし、次に検索されるファイルが他のディレクトリに存在しているとエントリキャッシュの効果はなくなります。極端な場合としてふたつのディレクトリにあるファイルを交互に読むような処理を行うと、エントリ情報とデータとを交互に読み出すことになり、読み出しヘッドの移動だけでかなりの時間がかかってしまいます。<br>このようなしくみから、ファイルの種類などによってディレクトリを分けるよりも、ファイルが使用される場面ごとにディレクトリを分けるという構成法を取ると、実行速度の面で有利です。複数の場面で共用するデータも、容量に余裕があるなら各ディレクトリにコピーしておくとよいでしょう。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_1_2"><h4>
(2)&nbsp;<b>MAPファイルを利用してsceCdSearchFile()を省く</b><br></h4>
</a></div>
<div style="margin-left:67px;">CD(DVD)-ROM Generatorの「Export map file」機能によって、各ファイルの記録されているセクタ番号をMAPファイルに出力させることができます。このMAPファイルをプログラム中で利用するとsceCdSearchFile()によるエントリ情報の読み込みを省くことができ、ディスク読み込みの高速化につながります。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_1_3"><h4>
(3)&nbsp;<b>データをまとめておき、ディスクから一括して読み込んでメモリ上で振り分ける</b><br></h4>
</a></div>
<div style="margin-left:67px;">ディスクからのデータ読み込みは、なるべく一度のsceCdRead()にまとめるのが効率的です。ある場面で必要になるデータをひとつのファイルにつなぎ合わせておき、いったんヒープ領域へまとめて読み込んでから切り分けるという処理手順をぜひ検討してみてください。この手法が使える場面は限られますが、大きな効果があります。<br>開発の序盤ではデータがフィックスしていないため、sceOpen()などを使ってファイルを個別に読み込むプログラミングをせざるを得ない場合も多いでしょうけれども、できるだけ早い段階からデータのパッキングを考慮してください。<br>なお、IOPモジュールの読み込みにもこの手法は応用できます。後で実例を示しますので参照してください。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_1_4"><h4>
(4)&nbsp;<b>近いセクタにデータを配置する</b><br></h4>
</a></div>
<div style="margin-left:67px;">CD(DVD)-ROMの読み出しヘッドは、レンズ部とベース部との2段階で移動するしくみになっています。現在のヘッド位置と移動先の位置とがセクタ番号にして次の範囲内にあれば、レンズ部の移動だけで済んでヘッド移動が比較的早く終わる可能性があります。<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>メディア</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>レンズ部の移動範囲</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;CD-ROM&nbsp;</td>
<td valign="TOP">&nbsp;4371セクタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DVD-ROM(Single Layer)&nbsp;</td>
<td valign="TOP">&nbsp;14764セクタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DVD-ROM(Dual Layer)&nbsp;</td>
<td valign="TOP">&nbsp;13360セクタ&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:67px;">したがって、引き続いて読み込むファイルをなるべく近い位置に配置するようにしておくと、高速化が期待できることになります。<br>一例として、ブートシーケンス（アプリケーションが起動される前の処理）で読みこまれるSYSTEM.CNFを最内周に置いておくと、わずかとはいえ起動時間が短くなることが期待できます。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_1_5"><h4>
(5)&nbsp;<b>EEからの読み込みでは64byteアライメントを意識する</b><br></h4>
</a></div>
<div style="margin-left:67px;">sceCdRead()はバッファのアドレスが64byteアライメントに無い場合、内部で補正処理を行うしくみになっています。この補正処理を避けるためにバッファのアライメントを合わせるだけでも、高速化の効果があります。<br>バッファ領域を取得する際にはmemalign(64, size)とするか、スタティックなバッファであれば__attribute__((aligned(64)))として確保してください。<br></div>

<!-- 見出し　４，小見出し -->
<h3>
<a name="Heading4_2_2">
<a href="#Heading3_2"> 2. </a>2 <b>高速化のケーススタディ</b><br>
</a>
</h3>
<div style="margin-left:50px;">まず比較対照として、次のような読み込み処理を想定します。特にデータの読み込みについては、やや作為的ですがワーストケースに近い処理を想定しています。<br></div>
    <div style="margin-left:65px;"><ol TYPE="a">
         <li VALUE=1> IOPモジュールの読み込み<br>sio2man.irx, padman.irx, mcman.irx, mcserv.irx, libsd.irxをディスクから読み込んで起動する処理</li>
         <li VALUE=2> バイナリデータの読み込み<br>256KBのバイナリデータファイルを20個ずつ2つのディレクトリに置き、交互にsceCdSearchFile() + sceCdRead()でEEメモリに読み込む処理</li>
</ol></div>
</ul></div>
<div style="margin-left:50px;">以下、4つの手法で高速化を図った効果を、上記の各処理に要する時間を100%として示します。測定はCD-Rを使って行っていますが、DVD-Rでも同じ手法を適用できます。メディアやドライブの状態によって実時間は変動すること、処理時間の測定には数％程度の誤差があることをご理解ください。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_2_1"><h4>
(1)&nbsp;<b>ケーススタディ1：IOPモジュールの一括読み込み</b><br></h4>
</a></div>
<div style="margin-left:67px;">IOPモジュールの読み込みにはsceSifLoadModule()を使用するのが一般的な方法です。しかしモジュール数の分だけ読み込み処理を分けて行うことになり、またsceSifLoadModule()の内部でsceCdSearchFile()相当の処理をそのつど行うため、たとえばハードディスクやネットワークやlibskを用いる場合など、読み込むモジュール数が増えてくると軽視できないオーバーヘッドが発生します。<br>この対策として、IOPモジュールを一括してEEメモリ経由で読み込む手法をご紹介します。手順としては次のようになります。<br></div>
    <div style="margin-left:55px;"><ol>
         <li VALUE=1> IOPモジュールを1ファイルにまとめる<br>あらかじめ、必要なIOPモジュールをひとつのファイルにつなぎ合わせておきます。後でEEからIOPへ転送するので、各モジュールの先頭が16bytesアライメントになるようパディングを入れておきます。</li>
         <li VALUE=2> まとめたファイルをEEメモリに読み込む<br>EEのヒープ領域を確保し、IOPモジュールをまとめたファイルをsceCdRead()で一度に読み込みます。</li>
         <li VALUE=3> モジュールをEEからIOPへ転送する<br>ひとつのモジュールに相当するデータをIOPのヒープ領域へsceSifSetDma()で転送します。</li>
         <li VALUE=4> モジュールを起動する<br>転送したモジュールをsceSifLoadModuleBuffer()で実行します。</li>
         <li VALUE=5> (3)〜(4)をモジュールの数だけ繰り返す</li>
         <li VALUE=6> EE / IOPにそれぞれ確保したヒープ領域を開放する</li>
</ol></div>
</ul></div>
<div style="margin-left:67px;">この手法により、IOPモジュールの読み込み処理にかかる時間は対照例を100%として13%まで短縮することができました。<br>なお、dev9.irxとatad.irxは、この手法によらずsceSifLoadModule()などでファイル名を指定してロードする必要がありますので注意してください。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_2_2"><h4>
(2)&nbsp;<b>ケーススタディ2：EE側バッファのアライメント調整</b><br></h4>
</a></div>
<div style="margin-left:67px;">40個のデータファイル読み込み処理に際して、バッファアドレスを64byteアライメントに合わせてみたところ、64byteアライメントでない場合の所要時間を100%として、78%にまで短縮されました。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_2_3"><h4>
(3)&nbsp;<b>ケーススタディ3：データファイルの一括読み込み</b><br></h4>
</a></div>
<div style="margin-left:67px;">40個のデータファイルを一度のsceCdRead()でまとめてヒープ領域へ読み込むようにしたところ、対照例の所要時間を100%として、23%にまで短縮されました。<br></div>

<!-- 見出し　５，（１） -->
<div style="margin-left:40px;"><a name="Heading5_2_2_4"><h4>
(4)&nbsp;<b>ケーススタディ4：ベストケース</b><br></h4>
</a></div>
<div style="margin-left:67px;">上記の各手法を総合して採り入れたところ、対照例の所要時間を100%として、IOPモジュールの読み込みは8%（1/12）、データの読み込みは6%（1/17）にまで短縮されました。<br><br></div>
<div style="margin-left:50px;"></div>
<div style="margin-left:50px;"></div>
<div style="margin-left:67px;">
<p>
<img src="gif/cdvdtips001.gif"><p>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    Copyright (c) 2002 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
