<html lang="ja">
<!-- 見出し　１，部見出し -->
<head>

<script language="JavaScript">
<!--
  function startFixed(){
    fixedLAYER('fixedLay0','rightBottom',-35,-35)
  }

  var ie= !!document.all
  var n4= !!document.layers
  var w3c=!!document.getElementById
  var mac45 
    = navigator.userAgent.indexOf('MSIE 4.5; Mac_PowerPC')

  if(document.layers)window.onresize=resizeFunc
  function resizeFunc(e){location.reload()}

  function iniFunc(){
    if(ie&&!(mac45!=-1))window.onscroll = startFixed
    startFixed()
  }

  var tid=new Array()

  function fixedLAYER(layName,posString,offSetX,offSetY){

    offSetX = parseInt(offSetX,10)
    offSetY = parseInt(offSetY,10)

 if( posString == 'rightBottom' ){

      if(ie) offLeft = document.body.clientWidth   + offSetX
      else   offLeft = window.innerWidth           + offSetX
      if(ie) offTop  = document.body.clientHeight  + offSetY
      else   offTop  = window.innerHeight          + offSetY

    }
    else {

      if(ie) offLeft =                               offSetX
      else   offLeft =                               offSetX
      if(ie) offTop  =                               offSetY
      else   offTop  =                               offSetY

    }

    offLeft = parseInt(offLeft)
    offTop  = parseInt(offTop)

    if(document.all){
      var mx = parseInt(document.body.scrollLeft +offLeft)
      var my = parseInt(document.body.scrollTop  +offTop)
    } else {
      var mx = parseInt(self.pageXOffset+offLeft)
      var my = parseInt(self.pageYOffset+offTop)

    }

    moveLAYER(layName,mx,my)

    if(!(ie&&!(mac45!=-1)))
      setTimeout("fixedLAYER('"+layName+"','"+posString
                   +"','" +offSetX+"','"+offSetY+"')",100)
  }

  function moveLAYER(layName,x,y){
      
      if(document.getElementById){
        document.getElementById(layName).style.left=x
        document.getElementById(layName).style.top=y
      }
      else if(document.all){
        document.all(layName).style.pixelLeft=x
        document.all(layName).style.pixelTop=y
      }
      else if(document.layers)
        document.layers[layName].moveTo(x,y)
  }

// -->
</script>

<script language="JavaScript">
<!--
  function lj(ch,fm)
  {
    if ( parent.index ) {
      if ( ch == "libref" ){ parent.index.location.href="../libref/category.htm"; }
      else if ( ch == "../ee/libref" ){ parent.index.location.href="../../ee/libref/category.htm"; }
      else if ( ch == "../iop/libref" ){ parent.index.location.href="../../iop/libref/category.htm"; }
      else if ( ch == "../iop/overview" ){ parent.index.location.href="../../iop/overview/category.htm"; }
      else if ( ch == "../ee/overview" ){ parent.index.location.href="../../ee/overview/category.htm"; }
      else if ( ch == "overview" ){ parent.index.location.href="../overview/category.htm"; }
    }
    if ( parent.main ) {
      if ( fm != "" ){ parent.main.location.href=fm; }
    } else {
      if ( fm != "" ){ location.href=fm; }
    }
  }
//-->
</script>
<title>ネットワークライブラリ</title>
<meta http-equiv="Content-Type"content= text/html; charset=Shift_JIS >
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" Content="Sony Computer Entertainment Inc.">
<style type="text/css"><!--
    div.fixedLay{position:absolute;z-index:100;left:0px;top:0px;}
--></style>
</head>
<body onload="iniFunc()" bgcolor="#ffffff" text="#000000" >
<div id="fixedLay0" class="fixedLay">
<a href="#top"><img src="gif/link.gif" border="0" alt="TOP"></a>
</div>
<table WIDTH="100%">
<tr><td>
<h3>"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3</h3>
</td>
</tr>
<tr><td align= right >
<script language="JavaScript">
<!--
   var p,q;
   if ( parent.index ) {
   p = parent.index.location;
   q = p.toString();
   result = q.match(/\/category\.htm/gi);
   if(result == "/category.htm"){
          document.writeln("<a href=\"JavaScript:lj('overview','../overview/inet.htm')\"><img src=\"./gif/arrow.png\" border=0>ライブラリ概要</a>");
    }
}
// -->
</script>
</td></tr>
</table>
<hr noshade size=6>
<a name=Heading2>
<center><h1>
ネットワークライブラリ
</h1></center>
</a>
<font size=4><b>構造体</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetAddress_t"> sceInetAddress_t<br></a></td>
<td>&nbsp;</td><td>内部形式IPアドレス構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetInfo_t"> sceInetInfo_t<br></a></td>
<td>&nbsp;</td><td>Connection情報受け渡し用構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetIP_MREQ_t"> sceInetIP_MREQ_t<br></a></td>
<td>&nbsp;</td><td>IPマルチキャスト設定用構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetParam_t"> sceInetParam_t<br></a></td>
<td>&nbsp;</td><td>Connection生成用パラメータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetPollFd_t"> sceInetPollFd_t<br></a></td>
<td>&nbsp;</td><td>Poll用構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetRoutingEntry_t"> sceInetRoutingEntry_t<br></a></td>
<td>&nbsp;</td><td>経路制御表の各エントリ<br></td></tr>
</table><br>
<font size=4><b>関数</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetAbort"> sceInetAbort<br></a></td>
<td>&nbsp;</td><td>処理中断<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetAbortLog"> sceInetAbortLog<br></a></td>
<td>&nbsp;</td><td>ログの取得を中断する<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetAddress2Name"> sceInetAddress2Name<br></a></td>
<td>&nbsp;</td><td>ドット形式IPアドレスからホスト名への変換（逆引き）<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetAddress2String"> sceInetAddress2String<br></a></td>
<td>&nbsp;</td><td>内部形式IPアドレスからドット形式への変換<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetChangeThreadPriority"> sceInetChangeThreadPriority<br></a></td>
<td>&nbsp;</td><td>スレッドのプライオリティ変更<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetClose"> sceInetClose<br></a></td>
<td>&nbsp;</td><td>Connectionを閉じる<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetControl"> sceInetControl<br></a></td>
<td>&nbsp;</td><td>Connectionの制御<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCreate"> sceInetCreate<br></a></td>
<td>&nbsp;</td><td>Connection生成<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetGetInterfaceList"> sceInetGetInterfaceList<br></a></td>
<td>&nbsp;</td><td>ネットワークインタフェースのリスト取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetGetLog"> sceInetGetLog<br></a></td>
<td>&nbsp;</td><td>ログの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetGetNameServers"> sceInetGetNameServers<br></a></td>
<td>&nbsp;</td><td>ネームサーバ情報の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetGetRoutingTable"> sceInetGetRoutingTable<br></a></td>
<td>&nbsp;</td><td>経路制御表の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetInterfaceControl"> sceInetInterfaceControl<br></a></td>
<td>&nbsp;</td><td>ネットワークインタフェースの各パラメータの参照・設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetName2Address"> sceInetName2Address<br></a></td>
<td>&nbsp;</td><td>ホスト名またはドット形式から内部形式IPアドレスへの変換<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetOpen"> sceInetOpen<br></a></td>
<td>&nbsp;</td><td>Connection確立<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetPoll"> sceInetPoll<br></a></td>
<td>&nbsp;</td><td>イベントを待つ<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetRecv"> sceInetRecv<br></a></td>
<td>&nbsp;</td><td>データの受信<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetRecvFrom"> sceInetRecvFrom<br></a></td>
<td>&nbsp;</td><td>データ受信(送信元のIPアドレス・ポート番号も取得)<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetSend"> sceInetSend<br></a></td>
<td>&nbsp;</td><td>データ送信<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetSendTo"> sceInetSendTo<br></a></td>
<td>&nbsp;</td><td>指定IPアドレス・ポート番号へのデータ送信<br></td></tr>
</table><br>
<font size=4><b>Connection制御用制御コード</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_GET_FLAGS"> sceINETC_CODE_GET_FLAGS<br></a></td>
<td>&nbsp;</td><td>制御フラグの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_GET_INFO"> sceINETC_CODE_GET_INFO<br></a></td>
<td>&nbsp;</td><td>Connectionの情報取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_SET_FLAGS"> sceINETC_CODE_SET_FLAGS<br></a></td>
<td>&nbsp;</td><td>制御フラグの設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_SET_MULTICAST_IF"> sceINETC_CODE_SET_MULTICAST_IF<br></a></td>
<td>&nbsp;</td><td>マルチキャストアドレスのインターフェース設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_GET_MULTICAST_IF"> sceINETC_CODE_GET_MULTICAST_IF<br></a></td>
<td>&nbsp;</td><td>マルチキャストアドレスのインターフェース取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_SET_MULTICAST_TTL"> sceINETC_CODE_SET_MULTICAST_TTL<br></a></td>
<td>&nbsp;</td><td>マルチキャストアドレスのTTL設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_GET_MULTICAST_TTL"> sceINETC_CODE_GET_MULTICAST_TTL<br></a></td>
<td>&nbsp;</td><td>マルチキャストアドレスのTTL取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_SET_MULTICAST_LOOP"> sceINETC_CODE_SET_MULTICAST_LOOP<br></a></td>
<td>&nbsp;</td><td>マルチキャストアドレスのループバック設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_GET_MULTICAST_LOOP"> sceINETC_CODE_GET_MULTICAST_LOOP<br></a></td>
<td>&nbsp;</td><td>マルチキャストアドレスのループバック取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_ADD_MEMBERSHIP"> sceINETC_CODE_ADD_MEMBERSHIP<br></a></td>
<td>&nbsp;</td><td>グループへの参加<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_DROP_MEMBERSHIP"> sceINETC_CODE_DROP_MEMBERSHIP<br></a></td>
<td>&nbsp;</td><td>グループからの脱退<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_GET_SNDBUF"> sceINETC_CODE_GET_SNDBUF<br></a></td>
<td>&nbsp;</td><td>送信バッファリング動作の上限バイト数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_SET_SNDBUF"> sceINETC_CODE_SET_SNDBUF<br></a></td>
<td>&nbsp;</td><td>送信バッファリング動作の上限バイト数設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_GET_RCVBUF"> sceINETC_CODE_GET_RCVBUF<br></a></td>
<td>&nbsp;</td><td>受信バッファリング動作の上限バイト数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_SET_RCVBUF"> sceINETC_CODE_SET_RCVBUF<br></a></td>
<td>&nbsp;</td><td>受信バッファリング動作の上限バイト数設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceINETC_CODE_SEND_FIN"> sceINETC_CODE_SEND_FIN<br></a></td>
<td>&nbsp;</td><td>相手側にFINの送信<br></td></tr>
</table><br>
<font size=4><b>INETレイヤ制御コード</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetAddress"> sceInetCC_GetAddress<br></a></td>
<td>&nbsp;</td><td>IPアドレスの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetBroadcast"> sceInetCC_GetBroadcast<br></a></td>
<td>&nbsp;</td><td>ブロードキャストアドレスの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetBusLoc"> sceInetCC_GetBusLoc<br></a></td>
<td>&nbsp;</td><td>デバイス位置情報の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetBusType"> sceInetCC_GetBusType<br></a></td>
<td>&nbsp;</td><td>バス種別の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetDeviceName"> sceInetCC_GetDeviceName<br></a></td>
<td>&nbsp;</td><td>デバイス名の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetDHCPFlags"> sceInetCC_GetDHCPFlags<br></a></td>
<td>&nbsp;</td><td>DHCP用制御フラグの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetDHCPHostName"> sceInetCC_GetDHCPHostName<br></a></td>
<td>&nbsp;</td><td>DHCP用ホスト名の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetFlags"> sceInetCC_GetFlags<br></a></td>
<td>&nbsp;</td><td>フラグの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetHWaddr"> sceInetCC_GetHWaddr<br></a></td>
<td>&nbsp;</td><td>ハードウェアアドレスの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetImpl"> sceInetCC_GetImpl<br></a></td>
<td>&nbsp;</td><td>実装バージョンの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetInterfaceName"> sceInetCC_GetInterfaceName<br></a></td>
<td>&nbsp;</td><td>インタフェース名の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetIP_RxPackets"> sceInetCC_GetIP_RxPackets<br></a></td>
<td>&nbsp;</td><td>IP レイヤの受信パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetIP_TxPackets"> sceInetCC_GetIP_TxPackets<br></a></td>
<td>&nbsp;</td><td>IP レイヤの送信パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetIP_RxDropped"> sceInetCC_GetIP_RxDropped<br></a></td>
<td>&nbsp;</td><td>IP レイヤの受信時の破棄パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetIP_TxDropped"> sceInetCC_GetIP_TxDropped<br></a></td>
<td>&nbsp;</td><td>IP レイヤの送信時の破棄パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetTCP_RxPackets"> sceInetCC_GetTCP_RxPackets<br></a></td>
<td>&nbsp;</td><td>TCP レイヤの受信パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetTCP_TxPackets"> sceInetCC_GetTCP_TxPackets<br></a></td>
<td>&nbsp;</td><td>TCP レイヤの送信パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetTCP_RxDropped"> sceInetCC_GetTCP_RxDropped<br></a></td>
<td>&nbsp;</td><td>TCP レイヤの受信時の破棄パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetTCP_TxDropped"> sceInetCC_GetTCP_TxDropped<br></a></td>
<td>&nbsp;</td><td>TCP レイヤの送信時の破棄パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetUDP_RxPackets"> sceInetCC_GetUDP_RxPackets<br></a></td>
<td>&nbsp;</td><td>UDP レイヤの受信パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetUDP_TxPackets"> sceInetCC_GetUDP_TxPackets<br></a></td>
<td>&nbsp;</td><td>UDP レイヤの送信パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetUDP_RxDropped"> sceInetCC_GetUDP_RxDropped<br></a></td>
<td>&nbsp;</td><td>UDP レイヤの受信時の破棄パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetUDP_TxDropped"> sceInetCC_GetUDP_TxDropped<br></a></td>
<td>&nbsp;</td><td>UDP レイヤの送信時の破棄パケット総数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetMemFreeCurrent"> sceInetCC_GetMemFreeCurrent<br></a></td>
<td>&nbsp;</td><td>inet.irx の現在の空きメモリバイト数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetMemFreeMinimum"> sceInetCC_GetMemFreeMinimum<br></a></td>
<td>&nbsp;</td><td>inet.irx の現在までの最小空きメモリバイト数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetModuleName"> sceInetCC_GetModuleName<br></a></td>
<td>&nbsp;</td><td>モジュール名の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetMTU"> sceInetCC_GetMTU<br></a></td>
<td>&nbsp;</td><td>MTU値の取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetNetmask"> sceInetCC_GetNetmask<br></a></td>
<td>&nbsp;</td><td>サブネットマスクの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetProt"> sceInetCC_GetProt<br></a></td>
<td>&nbsp;</td><td>プロトコルバージョンの取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceInetCC_GetVendorName"> sceInetCC_GetVendorName<br></a></td>
<td>&nbsp;</td><td>ベンダ名の取得<br></td></tr>
</table><br>
<font size=4><b>エラーコード</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#エラーコード"> エラーコード<br></a></td>
<td>&nbsp;</td><td>INET関数の返り値<br></td></tr>
</table>

<!-- 見出し　１，部見出し -->
<br></td></tr></table></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>構造体</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetAddress_t"><font size=6>sceInetAddress_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>内部形式IPアドレス構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct <b>sceInetAddress</b> {
	int <i>reserved</i>;
	char <i>data[12]</i>; 
} sceInetAddress_t;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>reserved</i>&nbsp;</td>
<td valign="TOP">&nbsp;予約領域（0固定）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>data[12]</i>&nbsp;</td>
<td valign="TOP">&nbsp;IP address (4bytes) + 予約 (8bytes)&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ライブラリ内部でIPアドレスを保持するための構造体です。<br>IPv4ではdataの先頭の4bytesにIPアドレスが保持されますが、将来の拡張に備えるため、ユーザプログラムはこの構造体に直接アクセスしてはなりません。sceInetName2Address()およびsceInetAddress2String()を使用してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetInfo_t"><font size=6>sceInetInfo_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Connection情報受け渡し用構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct <b>sceInetInfo</b> {
	int <i>cid</i>;
	int <i>proto</i>;
	int <i>recv_queue_length</i>;
	int <i>send_queue_length</i>;
	struct sceInetAddress <i>local_adr</i>;
	int <i>local_port</i>;
	struct sceInetAddress <i>remote_adr</i>;	
	int <i>remote_port</i>;
	int <i>state</i>;	
	int <i>reserved[4]</i>;
} sceInetInfo_t;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>proto</i>&nbsp;</td>
<td valign="TOP">&nbsp;プロトコル&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>recv_queue_length</i>&nbsp;</td>
<td valign="TOP">&nbsp;受信バッファ中のデータバイト数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>send_queue_length</i>&nbsp;</td>
<td valign="TOP">&nbsp;送信バッファ中のデータバイト数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>local_adr</i>&nbsp;</td>
<td valign="TOP">&nbsp;ローカルアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>local_port</i>&nbsp;</td>
<td valign="TOP">&nbsp;ローカルポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>remote_adr</i>&nbsp;</td>
<td valign="TOP">&nbsp;リモートアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>remote_port</i>&nbsp;</td>
<td valign="TOP">&nbsp;リモートポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>state</i>&nbsp;</td>
<td valign="TOP">&nbsp;コネクションの状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>reserved</i>&nbsp;</td>
<td valign="TOP">&nbsp;予約領域（0）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceInetControl()でcodeにsceINETC_CODE_GET_INFO（＝1）を指定して、Connectionに関する情報を得るときに使用する構造体です。<br>protoには次のいずれかの定数が格納されます。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味（対応するConnectionタイプ）</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_PROTO_TCP&nbsp;</td>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;TCP（sceINETT_CONNECT&nbsp;<br>&nbsp;またはsceINETT_LISTEN）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_PROTO_UDP&nbsp;</td>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;UDP（sceINETT_DGRAM）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_PROTO_IP&nbsp;</td>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;Raw IP（sceINETT_RAW）&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">stateには次のいずれかの定数が格納されます。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味(対応するプロトコル)</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_UNKNOWN&nbsp;</td>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;状態不明&nbsp;<br>&nbsp;（TCP、UDP、Raw IP）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_CLOSED&nbsp;</td>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;閉じている&nbsp;<br>&nbsp;（TCP、UDP、Raw IP）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_CREATED&nbsp;</td>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;生成済み（UDP）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_OPENED&nbsp;</td>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;オープン済み&nbsp;<br>&nbsp;（UDP、Raw IP）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_LISTEN&nbsp;</td>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_SYN_SENT&nbsp;</td>
<td valign="TOP">&nbsp;5&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_SYN_RECEIVED&nbsp;</td>
<td valign="TOP">&nbsp;6&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_ESTABLISHED&nbsp;</td>
<td valign="TOP">&nbsp;7&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_FIN_WAIT_1&nbsp;</td>
<td valign="TOP">&nbsp;8&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_FIN_WAIT_2&nbsp;</td>
<td valign="TOP">&nbsp;9&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_CLOSE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;10&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_CLOSING&nbsp;</td>
<td valign="TOP">&nbsp;11&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_LAST_ACK&nbsp;</td>
<td valign="TOP">&nbsp;12&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETI_STATE_TIME_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;13&nbsp;</td>
<td valign="TOP">&nbsp;TCPの各内部状態&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="#sceINETC_CODE_GET_INFO">sceINETC_CODE_GET_INFO</a><br><br><br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetIP_MREQ_t"><font size=6>sceInetIP_MREQ_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IPマルチキャスト設定用構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct sceInetIP_MREQ {
	sceInetAddress_t multiaddr;  /* IP multicast address of group */
	sceInetAddress_t interface;  /* local IP address of interface */
} <b>sceInetIP_MREQ_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>multiaddr</i>&nbsp;</td>
<td valign="TOP">&nbsp;IPマルチキャストグループ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>interface</i>&nbsp;</td>
<td valign="TOP">&nbsp;インターフェースのローカルIPアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceINETC_ADD_MEMBERSHIP, sceINETC_DROP_MEMBERSHIP で使用する。<br>interface メンバにはsceINETC_SET_MULTICAST_IF と同じ 3 つの指定方法が使えます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetParam_t"><font size=6>sceInetParam_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Connection生成用パラメータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct <b>sceInetParam</b> {
	int <i>type</i>;	
	int <i>local_port</i>;
	struct sceInetAddress <i>remote_addr</i>;	
	int <i>remote_port</i>;
	int <i>reserved[9]</i>;
} sceInetParam_t;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>type</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connectionタイプ（TCP,UDP等）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>local_port</i>&nbsp;</td>
<td valign="TOP">&nbsp;ローカルポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>remote_addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;接続先IPアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>remote_port</i>&nbsp;</td>
<td valign="TOP">&nbsp;接続先ポート番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>reserved</i>&nbsp;</td>
<td valign="TOP">&nbsp;予約領域（0固定）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceInetCreate()でConnectionを生成する際に渡すパラメータの構造体です。<br>typeにはConnectionタイプを次の定数のいずれかで指定します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETT_DGRAM&nbsp;</td>
<td valign="TOP">&nbsp;0x0&nbsp;</td>
<td valign="TOP">&nbsp;UDP&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETT_CONNECT&nbsp;</td>
<td valign="TOP">&nbsp;0x1&nbsp;</td>
<td valign="TOP">&nbsp;TCPのConnect動作（Active-Open）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETT_LISTEN&nbsp;</td>
<td valign="TOP">&nbsp;0x2&nbsp;</td>
<td valign="TOP">&nbsp;TCPのListen動作（Passive-Open）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETT_RAW&nbsp;</td>
<td valign="TOP">&nbsp;0x3&nbsp;</td>
<td valign="TOP">&nbsp;Raw IP(IPパケットを直接扱う)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">local_portおよびremote_portはそれぞれポート番号の指定で、ポート番号を表す数値もしくは次の定数を使用します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETP_AUTO&nbsp;</td>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;自動割り当て&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETP_ANY&nbsp;</td>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;任意ポート&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">ConnectionタイプがsceINETT_CONNECTの際にlocal_portに対して、もしくはsceINETT_LISTENの際にremote_portに対してsceINETP_AUTOを指定した場合、sceInetCreate()を呼び出した時点でユーザ用ポート（5000-65535）のうち空いているポートが自動的に割り当てられます。<br>ConnectionタイプがsceINETT_LISTENの際にremote_portに対してsceINETP_ANYを指定した場合、TCP接続であれば最初の受信によってポート番号が確定され、以後の通信にはその送信元ポート番号が使われます。一方、UDP接続であればこのような確定は行われず、以後の受信においても任意のポート番号を受け入れることになります。<br>remote_addrには接続先の内部形式IPアドレスを指定します。任意のアドレスに一致する内部形式（sceInetName2Address参照）である場合は、TCP接続であれば最初の受信によってIPアドレスが確定されます。UDP接続やRaw IPであればこのような確定は行われず、任意のIPアドレスからの受信データを受け入れることになります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="#sceInetCreate">sceInetCreate</a>()<br><br><br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetPollFd_t"><font size=6>sceInetPollFd_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Poll用構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct <b>sceInetPollFd</b> {
	int cid;
	short events;
	short revents;
} sceInetPollFd_t;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>events</i>&nbsp;</td>
<td valign="TOP">&nbsp;調べるイベント&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>revents</i>&nbsp;</td>
<td valign="TOP">&nbsp;発生したイベント&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceInetPollFd_t は sceInetPoll() 関数の引数として指定するデータ構造です。<br>eventsには次の定数、または拡張分を指定します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLIN&nbsp;</td>
<td valign="TOP">&nbsp;0x0001&nbsp;</td>
<td valign="TOP">&nbsp;データをnormalで読める&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLPRI&nbsp;</td>
<td valign="TOP">&nbsp;0x0002&nbsp;</td>
<td valign="TOP">&nbsp;データをurgentで読める&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLOUT&nbsp;</td>
<td valign="TOP">&nbsp;0x0004&nbsp;</td>
<td valign="TOP">&nbsp;データをnormalで書ける&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">reventsには次の定数、または拡張分が設定されます。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLIN&nbsp;</td>
<td valign="TOP">&nbsp;0x0001&nbsp;</td>
<td valign="TOP">&nbsp;データをnormalで読める&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLPRI&nbsp;</td>
<td valign="TOP">&nbsp;0x0002&nbsp;</td>
<td valign="TOP">&nbsp;データをurgentで読める&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLOUT&nbsp;</td>
<td valign="TOP">&nbsp;0x0004&nbsp;</td>
<td valign="TOP">&nbsp;データをnormalで書ける&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLERR&nbsp;</td>
<td valign="TOP">&nbsp;0x0008&nbsp;</td>
<td valign="TOP">&nbsp;error condition&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLHUP&nbsp;</td>
<td valign="TOP">&nbsp;0x0010&nbsp;</td>
<td valign="TOP">&nbsp;disconnected&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLNVAL&nbsp;</td>
<td valign="TOP">&nbsp;0x0020&nbsp;</td>
<td valign="TOP">&nbsp;invalid entry&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">以下は、events、revents のINET 独自の拡張分です。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLFIN&nbsp;</td>
<td valign="TOP">&nbsp;0x0200&nbsp;</td>
<td valign="TOP">&nbsp;FINを送信できる&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLCLS&nbsp;</td>
<td valign="TOP">&nbsp;0x0400&nbsp;</td>
<td valign="TOP">&nbsp;closeできる&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="#sceInetPoll">sceInetPoll</a>()<br><br><br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetRoutingEntry_t"><font size=6>sceInetRoutingEntry_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>経路制御表の各エントリ<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct <b>sceInetRoutingEntry</b> {
	struct sceInetAddress <i>dstaddr</i>;
	struct sceInetAddress <i>gateway</i>;
	struct sceInetAddress <i>genmask</i>;
	int <i>flags</i>;
	int <i>mss</i>;
	int <i>window</i>;
	char <i>interface</i>[8 + 1];
} sceInetRoutingEntry_t;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>dstaddr</i>&nbsp;</td>
<td valign="TOP">&nbsp;宛先アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>gateway</i>&nbsp;</td>
<td valign="TOP">&nbsp;次ホップルータアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>genmask</i>&nbsp;</td>
<td valign="TOP">&nbsp;サブネットマスク&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>flags</i>&nbsp;</td>
<td valign="TOP">&nbsp;状態を示すフラグ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>mss</i>&nbsp;</td>
<td valign="TOP">&nbsp;最大セグメントサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>window</i>&nbsp;</td>
<td valign="TOP">&nbsp;TCPのウインドウサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>interface</i>&nbsp;</td>
<td valign="TOP">&nbsp;ネットワークインタフェース名&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">経路制御表の各エントリの情報を格納する構造体です。<br><i>flags</i>には次のビットフラグのORを取った値が入ります。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetRoutingF_Up&nbsp;</td>
<td valign="TOP">&nbsp;0x01&nbsp;</td>
<td valign="TOP">&nbsp;経路が有効&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetRoutingF_Host&nbsp;</td>
<td valign="TOP">&nbsp;0x02&nbsp;</td>
<td valign="TOP">&nbsp;直接配送（ルータを介さない）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetRoutingF_Gateway&nbsp;</td>
<td valign="TOP">&nbsp;0x04&nbsp;</td>
<td valign="TOP">&nbsp;間接配送（ルータを介する）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetRoutingF_Dynamic&nbsp;</td>
<td valign="TOP">&nbsp;0x08&nbsp;</td>
<td valign="TOP">&nbsp;動的に設定された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetRoutingF_Modified&nbsp;</td>
<td valign="TOP">&nbsp;0x10&nbsp;</td>
<td valign="TOP">&nbsp;同エントリの変更あり&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">ウィンドウサイズ（<i>windows</i>）は参照はできますが、現在のところINET内部ではその値を使用していません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="#sceInetAddress_t">sceInetAddress_t</a>,<a href="#sceInetGetRoutingTable">sceInetGetRoutingTable</a>()<br><br><br><br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>関数</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetAbort"><font size=6>sceInetAbort<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>処理中断<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetAbort</b>(
	int <i>cid</i>,
	int <i>flags</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>flags</i>&nbsp;</td>
<td valign="TOP">&nbsp;予約（0を指定すること）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-508&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;DOES_NOT_EXIST&nbsp;</td>
<td valign="TOP">&nbsp;Connectionが確立していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-510&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;RESET&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがResetされた&nbsp;<br>&nbsp;（TCPのみ）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込み&nbsp;<br>&nbsp;ハンドラからの呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定したConnectionに関して待ち状態となっている関数（sceInetOpen / sceInetClose / sceInetRecv / sceInetRecvFrom / sceInetSend / sceInetSendTo）のすべての待ち状態を解消します。個別指定はできません。<br>アボートされた関数はすべてsceINETE_ABORTのエラーでリターンします。<br><i>flags</i>は将来のための予約です。常に0を指定してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetAbortLog"><font size=6>sceInetAbortLog<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ログの取得を中断する<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetAbortLog</b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正の値を返した場合、SetEventFlag() の呼び出しがエラーとなった回数を表します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceInetGetLog() による待ち状態を sceINETE_ABORT で中断させます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetAddress2Name"><font size=6>sceInetAddress2Name<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ドット形式IPアドレスからホスト名への変換（逆引き）<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetAddress2Name</b>(
	int <i>flags</i>,
	char *<i>buf</i>,
	int <i>len</i>,
	sceInetAddress_t *<i>paddr</i>
<i>	</i>int <i>ms</i>,
	int <i>nretry</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>flags</i>&nbsp;</td>
<td valign="TOP">&nbsp;変換フラグ（0固定）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>buf</i>&nbsp;</td>
<td valign="TOP">&nbsp;変換結果を格納するバッファアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;バッファ長（バイト数）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>paddr</i>&nbsp;</td>
<td valign="TOP">&nbsp;内部形式IPアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>nretry</i>&nbsp;</td>
<td valign="TOP">&nbsp;リトライ回数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK （=0 ）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;その他のエラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">内部形式のIPアドレスをもとにDNSへの逆引き問い合わせを行い、得たドメイン名を<i>buf</i>と<i>len</i>で指定された領域に格納します。<br>変換フラグ（<i>flags</i>）には常に0を指定してください。<br>タイムアウト時間（<i>ms</i>）は、ひとつのDNSへの問い合わせに対するタイムアウト時間の指定です。0または負の値を指定した場合は、デフォルトである6秒とみなされます。<br>あるひとつのDNSへの問い合わせがタイムアウトとなった場合、複数のDNSが設定されていれば他のDNSへ問い合わせを試みます。すべてのDNSへの問い合わせで指定したリトライ回数（<i>nretry</i>）のタイムアウトが発生すると、エラー（sceINETE_TIMEOUT）としてリターンします。<br>リトライ回数（<i>nretry</i>）に0または負の値を指定した場合は、デフォルトである4回とみなされます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetAddress2String"><font size=6>sceInetAddress2String<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>内部形式IPアドレスからドット形式への変換<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetAddress2String</b>(
	char *<i>buf</i>,
	int <i>len</i>,
	sceInetAddress_t *<i>paddr</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>buf</i>&nbsp;</td>
<td valign="TOP">&nbsp;変換結果を格納するバッファアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;バッファ長（バイト数）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>paddr</i>&nbsp;</td>
<td valign="TOP">&nbsp;内部形式IPアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK （=0）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">内部形式のIPアドレスをドット形式の文字列に変換します。<br>表示およびデバッグ用の関数です。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetChangeThreadPriority"><font size=6>sceInetChangeThreadPriority<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>スレッドのプライオリティ変更<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetChangeThreadPriority</b>(
	int <i>prio</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>prio</i>　　プライオリティ（1〜63）<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK （＝0 ）を返します。<br>エラーの場合、以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-403&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_PRIORITY&nbsp;</td>
<td valign="TOP">&nbsp;優先度の指定が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">INETレイヤが生成したスレッドのプライオリティを<i>prio</i>に変更します。これ以後に生成するスレッドのプライオリティも<i>prio</i>になります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetClose"><font size=6>sceInetClose<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Connectionを閉じる<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetClose</b>(
	int <i>cid</i>,
	int <i>ms</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK （=0 ）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-508&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;DOES_NOT_EXIST&nbsp;</td>
<td valign="TOP">&nbsp;Connectionが確立していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-509&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;CLOSING&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがClosing状態&nbsp;<br>&nbsp;（TCPのみ）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">TCPのみ以下の返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-501&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_ABORT&nbsp;</td>
<td valign="TOP">&nbsp;sceInetAbort()の呼び出しにより中断&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-510&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;RESET&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがResetされた(TCP のみ)&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">TCPのみIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-400&nbsp;</td>
<td valign="TOP">&nbsp;KE_NO_MEMORY&nbsp;</td>
<td valign="TOP">&nbsp;メモリ不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-401&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_ATTR&nbsp;</td>
<td valign="TOP">&nbsp;attr の指定が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-409&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_EVFID&nbsp;</td>
<td valign="TOP">&nbsp;対象イベントフラグが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Connectionのクローズ処理を行います。<br>未送信（送信後確認応答を未確認）のデータがバッファに残っている場合には送信完了まで待ってから、FINを送信してTime-WaitまたはClosed状態になるのを待ちます。<br>タイムアウト時間（<i>ms</i>）はこの2つの待ち時間の合計の上限値となります。<br>sceInetClose()を呼び出した時点で<i>cid</i>に指定したConnection IDは無効になります。それ以後、sceInetAbort()も含めてそのConnection IDを用いた処理を行ってはいけません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetControl"><font size=6>sceInetControl<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Connectionの制御<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetControl</b>(
	int <i>cid</i>,
	int <i>code</i>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>code</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作の内容を表す制御コード&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（バイト数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK （＝0 ）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-513&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_CALL&nbsp;</td>
<td valign="TOP">&nbsp;不正な関数呼び出し&nbsp;<br>&nbsp;（TCPのみ）&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定されたConnectionに対してさまざまな制御操作を行う関数です。操作の内容は<i>code</i>で指定しますが、現在定義されている制御コードは次のとおりです。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>制御コード</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>機能</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetC_CODE_GET_INFO&nbsp;</td>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;Connectionの情報取得&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetC_CODE_GET_FLAGS&nbsp;</td>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;制御フラグの取得&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetC_CODE_SET_FLAGS&nbsp;</td>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;制御フラグの設定&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">詳細は「制御コード」の項を参照してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCreate"><font size=6>sceInetCreate<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Connection生成<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetCreate</b>(
	sceInetParam_t *<i>param</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>param</i>　　Connectionパラメータ<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Connection IDを返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-505&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_LOCAL_&nbsp;<br>&nbsp;SOCKET_UNSPECIFIED&nbsp;</td>
<td valign="TOP">&nbsp;local_portとして不正な値を指定した&nbsp;<br>&nbsp;(TCP,UDP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-506&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_FOREIGN_&nbsp;<br>&nbsp;SOCKET_UNSPECIFIED&nbsp;</td>
<td valign="TOP">&nbsp;remote_addr、remote_portとして&nbsp;<br>&nbsp;不正な値を指定した&nbsp;<br>&nbsp;(TCP,UDP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-507&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;ALREAY_EXISTS &nbsp;</td>
<td valign="TOP">&nbsp;すでに確立しているConnectionを&nbsp;<br>&nbsp;オープンしようとした&nbsp;<br>&nbsp;(TCP,UDP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Connectionを生成してConnection ID（cid）を返します。<br>このあとsceInetOpen()を呼ぶまでは、外部へのパケット送信は行われず、受信したパケットは破棄されます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetGetInterfaceList"><font size=6>sceInetGetInterfaceList<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ネットワークインタフェースのリスト取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetGetInterfaceList</b>(
	int *<i>interface_id</i>,
	int <i>n</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;インタフェースIDリストを格納するバッファのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>n</i>&nbsp;</td>
<td valign="TOP">&nbsp;取得するインタフェースIDの最大数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、取得した ID 数（0 &lt;= n）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">接続されているネットワークインタフェースのIDリストを取得します。<br>バッファの大きさはsizeof(int) ×<i>n</i>バイト必要になります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetGetLog"><font size=6>sceInetGetLog<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ログの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetGetLog</b>(
	char *<i>buf</i>,
	int <i>len</i>,
	int <i>ms</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>buf</i>&nbsp;</td>
<td valign="TOP">&nbsp;ログを格納するバッファへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;ログを格納するバッファのサイズ（バイト数）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウトまでの時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正の値を返す場合は、転送したログのバイト数を表します。<br>エラーの場合、エラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-501&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_ABORT&nbsp;</td>
<td valign="TOP">&nbsp;sceInetAbort()の呼び出しにより中断&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-409&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_EVFID&nbsp;</td>
<td valign="TOP">&nbsp;対象イベントフラグが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-400&nbsp;</td>
<td valign="TOP">&nbsp;KE_NO_MEMORY&nbsp;</td>
<td valign="TOP">&nbsp;メモリ不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-401&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_ATTR&nbsp;</td>
<td valign="TOP">&nbsp;attr の指定が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">INET内部に保存されているログを取得し、<i>buf</i>と<i>len</i>で示される領域に格納します。<br>この関数はブロック型で、ログを取得できるか、タイムアウトが発生するか、sceInetAbortLog() による中断までリターンしません。<br>第三引数が負（-１）のときはタイムアウトまでの時間はありません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetGetNameServers"><font size=6>sceInetGetNameServers<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ネームサーバ情報の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetGetNameServers</b>(
	sceInetAddress_t *<i>paddr</i>,
	int <i>n</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>paddr</i>&nbsp;</td>
<td valign="TOP">&nbsp;ネームサーバ情報を取得する領域へのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>n</i>&nbsp;</td>
<td valign="TOP">&nbsp;取得するエントリの最大数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、取得したエントリ数（0以上）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;"><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">現在のネームサーバアドレスを取得します。<br><i>paddr</i>が指す領域はsizeof(sceInetAddress_t) * <i>n</i> バイトのサイズが必要です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetGetRoutingTable"><font size=6>sceInetGetRoutingTable<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>経路制御表の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetGetRoutingTable</b>(
	sceInetRoutingEntry_t *<i>p</i>,
	int <i>n</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p </i>&nbsp;</td>
<td valign="TOP">&nbsp;経路制御表を取得する領域へのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>n </i>&nbsp;</td>
<td valign="TOP">&nbsp;取得するエントリの最大数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、取得したエントリ数（0以上）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">INETが持っている経路制御表を<i>n</i>個まで取得し、<i>p</i>の指すアドレスに格納します。必要な領域のサイズはsizeof(sceInetRoutingEntry_t) * <i>n</i> バイトです。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetInterfaceControl"><font size=6>sceInetInterfaceControl<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ネットワークインタフェースの各パラメータの参照・設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	int <i>code</i>,
	void *<i>ptr</i>,
	int <i>len</i>
);
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>code</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作の内容を表す制御コード&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（バイト数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）または、正の値を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1 〜 -499&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;NETDEV レイヤもしくは&nbsp;<br>&nbsp;MODEM レイヤ内部で&nbsp;<br>&nbsp;IOP Kernel 関数を呼び出した場合の&nbsp;<br>&nbsp;エラーコード&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-513&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;CALL&nbsp;</td>
<td valign="TOP">&nbsp;不正な関数呼び出し&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-550〜-599&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;NETDEV レイヤ依存のエラーコード&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-600〜-649&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;MODEM レイヤ依存のエラーコード&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_SEMID &nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ネットワークインタフェースの各パラメータの参照(一部設定も可能)を行う関数です。<br><i>code</i>は制御の種別を表すコードで、大きく次の5つに分類されています。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>範囲</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>種別</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0x00000000 - 0x7fffffff&nbsp;</td>
<td valign="TOP">&nbsp;INETレイヤ用制御コード&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0x80000000 - 0x8fffffff&nbsp;</td>
<td valign="TOP">&nbsp;NETDEVレイヤ共通制御コード ※&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0x90000000 - 0xbfffffff&nbsp;</td>
<td valign="TOP">&nbsp;NETDEVモジュール依存制御コード ※&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0xc0000000 - 0xcfffffff&nbsp;</td>
<td valign="TOP">&nbsp;MODEMレイヤ共通制御コード ※&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0xd0000000 - 0xffffffff&nbsp;</td>
<td valign="TOP">&nbsp;MODEMモジュール依存制御コード ※&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;"><i>code</i>のbit31が1のとき（上記の※）は、INETレイヤでは特別な処理は行わず、code, ptr, lenをそのまま該当するNETDEVモジュールに中継します。<br><i>ptr</i>,<i>len</i>はデータの受渡しを伴う場合のデータ領域の先頭アドレスと、その領域のバイト数です。<br>制御コードによっては、データを関数の返り値として返す場合もあります。<br>INETレイヤ用に定義されている制御コードは次のとおりです。各制御コードはネットワークインタフェース構造体sceInetDevOps_tの各メンバに対応していますので、詳細はネットワークデバイスI/F仕様の該当箇所を参照してください。他のレイヤの制御コードについてはそれぞれのドキュメントを参照してください。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>制御コード</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>機能</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_&nbsp;<br>&nbsp;GetInterfaceName&nbsp;</td>
<td valign="TOP">&nbsp;0x00000000&nbsp;</td>
<td valign="TOP">&nbsp;インターフェース名（文字列）&nbsp;<br>&nbsp;を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_&nbsp;<br>&nbsp;GetModuleName&nbsp;</td>
<td valign="TOP">&nbsp;0x00000001&nbsp;</td>
<td valign="TOP">&nbsp;モジュール名（文字列）を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_&nbsp;<br>&nbsp;GetVendorName&nbsp;</td>
<td valign="TOP">&nbsp;0x00000002&nbsp;</td>
<td valign="TOP">&nbsp;ベンダ名（文字列）を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_&nbsp;<br>&nbsp;GetDeviceName&nbsp;</td>
<td valign="TOP">&nbsp;0x00000003&nbsp;</td>
<td valign="TOP">&nbsp;デバイス名（文字列）を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_&nbsp;<br>&nbsp;GetBusType&nbsp;</td>
<td valign="TOP">&nbsp;0x00000004&nbsp;</td>
<td valign="TOP">&nbsp;バスの種別を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetBusLoc&nbsp;</td>
<td valign="TOP">&nbsp;0x00000005&nbsp;</td>
<td valign="TOP">&nbsp;デバイスの位置情報を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetProt&nbsp;</td>
<td valign="TOP">&nbsp;0x00000006&nbsp;</td>
<td valign="TOP">&nbsp;NETDEVレイヤのプロトコル&nbsp;<br>&nbsp;バージョンを取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetImpl&nbsp;</td>
<td valign="TOP">&nbsp;0x00000007&nbsp;</td>
<td valign="TOP">&nbsp;NETDEVレイヤの実装バージョン&nbsp;<br>&nbsp;を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetFlags&nbsp;</td>
<td valign="TOP">&nbsp;0x00000008&nbsp;</td>
<td valign="TOP">&nbsp;NETDEVレイヤが持つsceInetDevOps&nbsp;<br>&nbsp;構造体中のフラグ（flags）を取得&nbsp;<br>&nbsp;する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetAddress&nbsp;</td>
<td valign="TOP">&nbsp;0x00000009&nbsp;</td>
<td valign="TOP">&nbsp;インターフェースのIPアドレス&nbsp;<br>&nbsp;を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetNetmask&nbsp;</td>
<td valign="TOP">&nbsp;0x0000000a&nbsp;</td>
<td valign="TOP">&nbsp;インターフェースのサブネット&nbsp;<br>&nbsp;マスクを取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetBroadcast&nbsp;</td>
<td valign="TOP">&nbsp;0x0000000b&nbsp;</td>
<td valign="TOP">&nbsp;インターフェースのブロード&nbsp;<br>&nbsp;キャストアドレスを取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetMTU&nbsp;</td>
<td valign="TOP">&nbsp;0x0000000c&nbsp;</td>
<td valign="TOP">&nbsp;インターフェースのMTU値を&nbsp;<br>&nbsp;取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_GetHWaddr&nbsp;</td>
<td valign="TOP">&nbsp;0x0000000d&nbsp;</td>
<td valign="TOP">&nbsp;インターフェースのハードウェア&nbsp;<br>&nbsp;アドレスを取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_&nbsp;<br>&nbsp;GetDHCPHostName&nbsp;</td>
<td valign="TOP">&nbsp;0x0000000e&nbsp;</td>
<td valign="TOP">&nbsp;DHCP用ホスト名を取得する&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetCC_&nbsp;<br>&nbsp;GetDHCPFlags&nbsp;</td>
<td valign="TOP">&nbsp;0x0001000f&nbsp;</td>
<td valign="TOP">&nbsp;DHCP用制御フラグを取得する&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ネットワークインタフェースに対する設定操作は、タイトルアプリケーションから直接この関数を呼び出して行うのではなく、NET設定ファイルとinetctl.irxを用いて行います(優先度設定およびアプリケーションから直接モデムレイヤ設定をする場合は例外として本関数で設定を行います)。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetName2Address"><font size=6>sceInetName2Address<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ホスト名またはドット形式から内部形式IPアドレスへの変換<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetName2Address</b>(
	int <i>flags</i>,
	sceInetAddress_t *<i>paddr</i>,
	const char *<i>name</i>,
	int <i>ms</i>,
	int <i>nretry</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>flags</i>&nbsp;</td>
<td valign="TOP">&nbsp;変換フラグ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>paddr</i>&nbsp;</td>
<td valign="TOP">&nbsp;内部形式IPアドレスを受け取る構造体変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>name</i>&nbsp;</td>
<td valign="TOP">&nbsp;ドット形式のIPアドレスまたはホスト名&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>nretry</i>&nbsp;</td>
<td valign="TOP">&nbsp;リトライ回数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（=0）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE&nbsp;<br>&nbsp;_INVALID_ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-1&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;その他のエラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-100&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_CONTEXT&nbsp;</td>
<td valign="TOP">&nbsp;例外ハンドラ／割り込みハンドラからの&nbsp;<br>&nbsp;呼びだしだった&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-408&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_ SEMID&nbsp;</td>
<td valign="TOP">&nbsp;対象セマフォが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ドット形式で表されたIPアドレスを内部形式のIPアドレスに変換します。ホスト名を与えて、DNS（ネームサーバ）からIPアドレスを得て内部形式に変換することもできます。<br>変換フラグ（<i>flags</i>）には、通常は0を指定しますが、必要に応じて以下のビット値のORを指定します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetN2AF_NoDot&nbsp;</td>
<td valign="TOP">&nbsp;0x01&nbsp;</td>
<td valign="TOP">&nbsp;ドット形式の変換を禁止&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetN2AF_NoHosts&nbsp;</td>
<td valign="TOP">&nbsp;0x02&nbsp;</td>
<td valign="TOP">&nbsp;（予約）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetN2AF_NoDNS&nbsp;</td>
<td valign="TOP">&nbsp;0x04&nbsp;</td>
<td valign="TOP">&nbsp;DNSへの問い合わせを禁止&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">変換処理は以下の順序で行われ、すべて失敗した場合にはエラーとなります。<br><br></div>
    <div style="margin-left:50px;"><ol>
         <li VALUE=1> <i>name</i>がNULLの場合は、任意のアドレスに一致する内部形式に変換します。</li>
         <li VALUE=2> 変換フラグでsceInetN2AF_NoDotが指定されていない場合は、<i>name</i>をドット形式のIPアドレスとみなして変換を試みます。</li>
         <li VALUE=3> 変換フラグ中の sceInetN2AF_NoHosts ビットが指定されていない場合は、hosts テーブルによる変換を試みます。現在の実装での hosts テーブルは固定で以下の一つのエントリだけを保持しています。<br><br>　　localhost → "127.0.0.1"<br></li>
         <li VALUE=4> 変換フラグ中でsceInetN2AF_NoDNSが指定されていない場合は、<i>name</i>をホスト名とみなしてDNSへの問い合わせを試みます。</li>
</ol></div>
</ul></div>
<div style="margin-left:50px;"><br>タイムアウト時間（<i>ms</i>）は、ひとつのDNSへの問い合わせに対するタイムアウト時間の指定です。0または負の値を指定した場合は、デフォルトである6秒とみなされます。<br>あるひとつのDNSへの問い合わせがタイムアウトとなった場合、複数のDNSが設定されていれば他のDNSへ問い合わせを試みます。すべてのDNSへの問い合わせで指定したリトライ回数（<i>nretry</i>）のタイムアウトが発生すると、エラー（sceINETE_TIMEOUT）としてリターンします。<br>リトライ回数（<i>nretry</i>）に0または負の値を指定した場合は、デフォルトである4回とみなされます。<br></div>

<div style="margin-left:40px;"><h4><b>ドット形式</b><br></h4></div>

<div style="margin-left:50px;">ドット形式のIPアドレスとは、以下のいずれかの形式を指します。<br><br></div>
    <div style="margin-left:50px;"><ol>
         <li VALUE=1> <i>num8</i>.<i>num8</i>.<i>num8</i>.<i>num8　　</i>(Class C)</li>
         <li VALUE=2> <i>num8</i>.<i>num8</i>.<i>num16</i>　　　　(Class B)</li>
         <li VALUE=3> <i>num8</i>.<i>num24　　　　　　　</i>(Class A)</li>
         <li VALUE=4> <i>num32</i>　　　　　　　　　　(直接指定)</li>
</ol></div>
</ul></div>
<div style="margin-left:70px;"><i>　　num8 </i>　unsigned 8bitで表現可能な範囲の8/10/16進数<br><i>　　num16　</i>unsigned 16bitで表現可能な範囲の8/10/16進数<br><i>　　num24</i>　unsigned 24bitで表現可能な範囲の8/10/16進数<br><i>　　num32</i>　unsigned 32bitで表現可能な範囲の8/10/16進数<br></div>
<div style="margin-left:50px;"><br>8/10/16進数の表記規則はC言語でのそれと同様です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetOpen"><font size=6>sceInetOpen<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Connection確立<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetOpen</b>(
	int <i>cid</i>,
	int <i>ms</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（=0）を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-501&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_ABORT&nbsp;</td>
<td valign="TOP">&nbsp;sceInetAbort()の呼び出しにより中断&nbsp;<br>&nbsp;(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-506&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_FOREIGN_&nbsp;<br>&nbsp;SOCKET_UNSPECIFIED&nbsp;</td>
<td valign="TOP">&nbsp;remote_addr、remote_portとして&nbsp;<br>&nbsp;不正な値を指定した(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-507&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;ALREADY_EXISTS&nbsp;</td>
<td valign="TOP">&nbsp;すでに確立しているConnectionを&nbsp;<br>&nbsp;オープンしようとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-510&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE&nbsp;<br>&nbsp;_CONNECTION_RESET&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがResetされた&nbsp;<br>&nbsp;（TCPのみ）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-514&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_NO_ROUTE &nbsp;</td>
<td valign="TOP">&nbsp;相手先へのルーティングが存在しない&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-400&nbsp;</td>
<td valign="TOP">&nbsp;KE_NO_MEMORY&nbsp;</td>
<td valign="TOP">&nbsp;(メモリ不足TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-401&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_ATTR&nbsp;</td>
<td valign="TOP">&nbsp;attr の指定が不正(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-409&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_EVFID&nbsp;</td>
<td valign="TOP">&nbsp;対象イベントフラグが存在しない(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;<br>&nbsp;(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;<br>&nbsp;(TCP のみ)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定したConnectionを開きます。<br>TCPの場合は、以下いずれかの条件が成立するまで待ち状態となります。<br><br>(a) Connectionが確立した（=Established）<br>(b) タイムアウトを除くエラーが発生した<br>(c) 指定されたタイムアウト時間（<i>ms</i>）が経過した（sceINETE_TIMEOUT）<br><br>上記 (c) の場合この関数はsceINETE_TIMEOUTを返しますが、そのままsceInetRecv() / sceInetSend()を呼び出すと、その関数内でConnectionの確立を待つようになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetPoll"><font size=6>sceInetPoll<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>イベントを待つ<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetPoll</b> (
	sceInetPollFd_t *fds,
	int nfds,
	int ms
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>fds</i>&nbsp;</td>
<td valign="TOP">&nbsp;sceInetPollFd_t構造体の配列&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>nfds</i>&nbsp;</td>
<td valign="TOP">&nbsp;配列の要素数(バイト数ではありません)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、以下の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;イベントが一つもない状態でタイムアウトが発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;正の値&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;イベントが少なくとも 1 つあるコネクションの数&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;<br>&nbsp;（fds が NULL、nfds が 0 または負)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;KE_XXX&nbsp;</td>
<td valign="TOP">&nbsp;WaitSema() がエラーとなった時の&nbsp;<br>&nbsp;戻り値&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コネクションの集合を調べ、それらのコネクションのどれが入出力可能なのかを調べるための関数です。この関数を使用すれば単一スレッドでも複数コネクションの同時処理が可能です。<br>fds[0] から fds[nfds - 1] までが調査対象となります。<br><br>sceInetPollFd_t の各メンバは以下の通りです。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>メンバ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;cid&nbsp;</td>
<td valign="TOP">&nbsp;調べるコネクションのConnection IDを指定します。&nbsp;<br>&nbsp;cid値が-1の時にはreventは0 に設定され、eventは&nbsp;<br>&nbsp;参照しません。sceInetCreate()されていないcid 値、&nbsp;<br>&nbsp;もしくは既にsceInetClose()されて解放済のcid値の場合には&nbsp;<br>&nbsp; reventにsceINET_POLLNVALが設定されます。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;events&nbsp;</td>
<td valign="TOP">&nbsp;調べるイベント&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;revents&nbsp;</td>
<td valign="TOP">&nbsp;発生したイベント(sceInetPoll() の呼び出し前の設定は不要)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">events と revent の値は以下の値のビット OR です。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLIN&nbsp;</td>
<td valign="TOP">&nbsp;Urgent データを除く通常データを待ち状態に&nbsp;<br>&nbsp;入る事なしに読み込む事ができます。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLPRI&nbsp;</td>
<td valign="TOP">&nbsp;Urgent データを待ち状態に入ることなしに&nbsp;<br>&nbsp;読み込む事ができます。(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLOUT&nbsp;</td>
<td valign="TOP">&nbsp;Urgent データを除く通常データを待ち状態に&nbsp;<br>&nbsp;入る事なしに書き込む事ができます。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLERR&nbsp;</td>
<td valign="TOP">&nbsp;デバイスまたはコネクション上で例外状態が発生。&nbsp;<br>&nbsp;現在の実装では発生しません。&nbsp;<br>&nbsp;将来のための予約ビットです。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLHUP&nbsp;</td>
<td valign="TOP">&nbsp;デバイスまたはコネクションの切断された。&nbsp;<br>&nbsp;現在の実装では発生しません。&nbsp;<br>&nbsp;将来のための予約ビットです。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLNVAL&nbsp;</td>
<td valign="TOP">&nbsp;指定された cid 値が不正。&nbsp;<br>&nbsp;events で指定されていなくても必ず&nbsp;<br>&nbsp;チェックします。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLFIN&nbsp;</td>
<td valign="TOP">&nbsp;待ち状態に入る事なしに FIN を送信できます。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINET_POLLCLS&nbsp;</td>
<td valign="TOP">&nbsp;待ち状態に入る事なしにコネクションを&nbsp;<br>&nbsp;クローズできます。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">TCP の場合には以下の場合にも sceINET_POLLIN のイベントが発生します。<br><br></div>
<div style="margin-left:35px;"><ul>
         <li> FIN を受信した場合や RST を受信した等で sceInetRecv() が0もしくはエラーを返す状態の時。sceINET_POLLHUP ではない事に注意して下さい。
         <li> Listen 状態のコネクションが Established 状態に遷移した最初の sceInetPoll() の呼び出し時。
</ul></div>
<div style="margin-left:50px;"><br>UDP,RAW の送信時および TCP の Urgent データの送信時に関しては待ち状態に入る事はなく sceINET_POLLOUT のイベントも発生しません。<br><br>タイムアウト引数 (ms) が正の値の場合には少なくとも 1 つのイベントが発生するまで指定されたタイムアウト時間を上限として待ち状態に入ります。タイムアウト引数 (ms) が負の値の場合には少なくとも 1 つのイベントが発生するまで無限に待ち状態に入ります。タイムアウト引数 (ms) が 0 の値の場合にはイベントの有無に関わらず待ち状態に入る事なしに呼び出し元へ戻ります。<br><br>注意: タイムアウト引数に 0 を指定し VSYNC ごとに sceInetPoll() を呼び出すような処理は行わないで下さい。転送効率が落ち CPU の使用効率が著しく落ちます。<br><br>sceInetClose() で待ち状態に入る事なしにコネクションをクローズする方法は、FIN のやり取りを含むシーケンスで、かつ sceInetPoll() を用いて単一スレッドで待ち状態に入らずにコネクションをクローズするには以下の手順で処理する必要があります。<br><br></div>
<div style="margin-left:70px;">step1) sceInetPoll() を用いて sceINET_POLLFIN のイベントを待つ。このイベントを待つ事で step2 の待ち状態に入る事を回避できます。<br><br>step2) sceInetControl(code=sceINETC_CODE_SEND_FIN) を呼び出し、相手側にFINを送信する。<br><br>step3) sceInetPoll() を用いて sceINET_POLLCLS のイベントを待つ。このイベントを待つ事で step4 の待ち状態に入る事を回避できます。<br></div>
<div style="margin-left:50px;"><br></div>
<div style="margin-left:70px;">step4) sceInetClose() を ms=0 (タイムアウト時間 0) で呼び出す。最後の sceInetClose() では先に FIN の送信を行っているため、ほとんどの場合に戻り値がsceINETE_CONNECTION_DOES_NOT_EXIST となりますが、これは状態を示すものであり、クローズ処理は正常に終了しています。<br></div>
<div style="margin-left:50px;"><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetRecv"><font size=6>sceInetRecv<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>データの受信<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetRecv</b>(
	int <i>cid</i>,
	void *<i>ptr</i>,
	int <i>count</i>,
	int *<i>pflags</i>,
	int <i>ms</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;受信データを格納するバッファアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>count</i>&nbsp;</td>
<td valign="TOP">&nbsp;受信すべきデータサイズ（バイト数）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>pflags</i>&nbsp;</td>
<td valign="TOP">&nbsp;ステータスフラグを格納する変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">受信したバイト数を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-501&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_ABORT&nbsp;</td>
<td valign="TOP">&nbsp;sceInetAbort()の呼び出しにより中断&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-508&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;DOES_NOT_EXIST&nbsp;</td>
<td valign="TOP">&nbsp;Connectionが確立していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-509&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;CLOSING &nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがClosing状態(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-510&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE&nbsp;<br>&nbsp;_CONNECTION_RESET&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがResetされた(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE&nbsp;<br>&nbsp;_INVALID_ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-400&nbsp;</td>
<td valign="TOP">&nbsp;KE_NO_MEMORY&nbsp;</td>
<td valign="TOP">&nbsp;メモリ不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-401&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_ATTR&nbsp;</td>
<td valign="TOP">&nbsp;attr の指定が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-409&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_EVFID&nbsp;</td>
<td valign="TOP">&nbsp;対象イベントフラグが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定したConnectionからデータを受信し、<i>ptr</i>と<i>count</i>で指定したバッファに格納します。<br>*<i>pflags</i>には受信終了条件として下記定数のORを指定し、また終了ステータスとしても下記定数のORが返されます。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETF_URG&nbsp;</td>
<td valign="TOP">&nbsp;0x02&nbsp;</td>
<td valign="TOP">&nbsp;Urgentフラグ付きセグメントを受信した&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETF_FIN&nbsp;</td>
<td valign="TOP">&nbsp;0x04&nbsp;</td>
<td valign="TOP">&nbsp;Finフラグ付きセグメントを受信した&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETF_TIM&nbsp;</td>
<td valign="TOP">&nbsp;0x08&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウトが発生した&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;"><i>ms</i>にはデータ受信を待つ時間の上限を指定します。0は待ち時間なしでリターンすることの指定、負の値は無限に待つことの指定になります。<br><br>TCP接続の場合、次の条件でリターンします。【】内はステータスとして*<i>pflags</i>に返されるフラグを示します。<br></div>
    <div style="margin-left:50px;"><ol>
         <li VALUE=1> エラーが発生した（Connectionがリセットされたなど）</li>
         <li VALUE=2> <i>count</i>で指定したデータ数を受信した</li>
         <li VALUE=3> 少なくとも1バイトのデータを受信した</li>
         <li VALUE=4> FINを受け取り、それまでのデータをすべて受信した<br>【sceINETF_FIN】</li>
         <li VALUE=5> Urgentフラグ付きのセグメントを受信した<br>【sceINETF_URG】</li>
         <li VALUE=6> <i>ms</i>で指定したタイムアウト時間が経過した<br>【sceINETF_TIM】</li>
</ol></div>
</ul></div>
<div style="margin-left:50px;">(3)の条件はRelease2.1.4までは特別なフラグを指定しないと成立しませんでしたが、Release2.2以降はデフォルトで成立するように変更されました。<br>なおUrgentデータの受信時には、<i>ptr</i>で示されるバッファにはUrgentデータのみが転送されます。通常データとUrgentデータが混在することはありません。<br><br>UDPやRaw IP接続の場合、*<i>pflags</i>には0を指定して呼び出してください。この場合1パケットを受信すると、<i>count</i>の指定に関らずリターンします。<i>count</i>よりも大きなパケットを受信したときは、指定サイズのデータだけをバッファに転送し、パケットの残りは破棄されます。ステータスとして*<i>pflags</i>に設定される値はsceINETF_TIMのみです。<br><br>タイムアウトが発生した場合でも、それまでに受信したバイト数が関数の返り値となります。タイムアウト発生の有無は*<i>pflags</i>のsceINETF_TIMビットで判断してください。<br><br>タイムアウト時間（<i>ms</i>）に負の値を指定してあれば（無限待ちであれば）、接続先から接続が閉じられた場合（FINを受信した場合）関数の返り値が0となります。しかし、タイムアウト時間に0または正の値を指定してあると、タイムアウト発生時にも0が返されますので、接続先から接続が閉じられたことの判定には*<i>pflags</i>のsceINETF_FINビットを参照してください。<br><br>タイムアウト時間（<i>ms</i>）に0を指定した場合は待ち時間なしでリターンしますが、他のスレッドが動作しなくなるため、次のように待ち時間なしでリードを繰り返す処理を行ってはいけません。Connectionごとに受信用スレッドを生成し、無限もしくは適切なタイムアウトを指定してください。<br><br></div>
        <div style="margin-left:93px;"><pre><font size=3>while(1){
     flags = 0;
     if(0 &gt; (r = sceInetRecv(cid, buf, sizeof(buf), &flags, 0)))
         エラー処理;
     else
         受信処理;
}
</pre></font></div>
<div style="margin-left:50px;"><br>受信バッファリング動作の上限バイト数のデフォルト値は以下の通りです。<br><br></div>
<div style="margin-left:70px;">TCP: 22 * 1460 = 32120 = 約 31.4 KB<br>UDP: 8MB<br>RAW: 32KB<br></div>
<div style="margin-left:50px;"><br>この上限値は sceInetControl(code=sceINETC_CODE_SET_RCVBUF) にて変更する事ができます。<br>TCP の場合にはこの上限値が相手側への通知 window サイズとなります。<br>UDP,RAW の場合にはこの上限値を越えるデータは先に届いた順に破棄します。<br><br></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">TCP の受信バッファは固定領域ではなく常に動的に確保します。<br>TCP における相手側への通知 window サイズとして使用される値は、<br><br></div>
<div style="margin-left:70px;">sceInetRecv() を呼び出さずに INET 内部に溜めておける<br>全体のデータ量の上限値<br></div>
<div style="margin-left:50px;"><br>と等しくなります。これにより、この上限値を越えるデータは相手側から送られてこないことになり、万一送られてきた場合にも越えた部分は破棄されます。ちなみに、動的に確保されるメモリ消費量はEthernet の場合には１パケットあたり、<br><br></div>
<div style="margin-left:70px;">データ量<br>Ethernet,IP,TCP ヘッダ(通常14+20+20バイト)<br>メモリ管理用ヘッダ（メモリの確保、解放用の12バイト）<br>パケット管理用ヘッダ（パケットごとに必要なリンク、フラグ、ポインタの 24バイト）<br></div>
<div style="margin-left:50px;"><br>の合計となるので、データ量とメモリ消費量は一致しません。なお、TCPは信頼性のあるプロトコルですので、受信バッファがあふれてもデータが消滅することはありません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetRecvFrom"><font size=6>sceInetRecvFrom<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>データ受信(送信元のIPアドレス・ポート番号も取得)<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetRecvFrom</b>(
	int <i>cid</i>,
	void *<i>ptr</i>,
	int <i>count</i>,
	int *<i>pflags</i>,
	sceInetAddress_t *<i>iadr</i>,
	int *<i>port</i>,
	int <i>ms</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;受信データを格納するバッファアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>count</i>&nbsp;</td>
<td valign="TOP">&nbsp;受信すべきデータサイズ（バイト数）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>pflags</i>&nbsp;</td>
<td valign="TOP">&nbsp;ステータスフラグを格納する変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>iadr</i>&nbsp;</td>
<td valign="TOP">&nbsp;送信元のIPアドレスを格納する変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port</i>&nbsp;</td>
<td valign="TOP">&nbsp;ポートを格納する変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">受信したバイト数を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-501&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_ABORT&nbsp;</td>
<td valign="TOP">&nbsp;sceInetAbort()の呼び出しにより中断&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-508&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;DOES_NOT_EXIST&nbsp;</td>
<td valign="TOP">&nbsp;Connectionが確立していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE&nbsp;<br>&nbsp;_INVALID_ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-513&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_CALL&nbsp;</td>
<td valign="TOP">&nbsp;不正な関数呼び出し&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-400&nbsp;</td>
<td valign="TOP">&nbsp;KE_NO_MEMORY&nbsp;</td>
<td valign="TOP">&nbsp;メモリ不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-401&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_ATTR&nbsp;</td>
<td valign="TOP">&nbsp;attr の指定が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-409&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_EVFID&nbsp;</td>
<td valign="TOP">&nbsp;対象イベントフラグが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に&nbsp;<br>&nbsp;入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceInetRecv()と同様に<i>cid</i>で指定したConnectionからデータを受信して<i>ptr</i>と<i>count</i>で指定したバッファに格納し、さらに送信元のIPアドレスを*<i>iadr</i>に、ポートを*<i>port</i>に格納します。UDP接続の場合のみ使用可能で、TCP接続の場合はエラー（sceINETE_INVALID_CALL）となります。<br><br>UDPはTCPとは違ってstatelessなので、Connection生成時にsceInetParam中のremote_addrを任意とするかまたはremote_portをsceINETP_ANYとすると、ひとつのConnectionで複数の相手から受信することができます。sceInetRecvFrom()はそのような場合に、どの相手から受信したデータか判別するために使用します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetSend"><font size=6>sceInetSend<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>データ送信<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetSend</b>(
	int <i>cid</i>,
	void *<i>ptr</i>,
	int <i>count</i>,
	int *<i>pflags</i>,
	int <i>ms</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;送信データを格納したバッファアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>count</i>&nbsp;</td>
<td valign="TOP">&nbsp;送信データのサイズ（バイト数）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>pflags</i>&nbsp;</td>
<td valign="TOP">&nbsp;ステータスフラグを格納する変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信したバイト数を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-501&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_ABORT&nbsp;</td>
<td valign="TOP">&nbsp;sceInetAbort()の呼び出しにより中断&nbsp;<br>&nbsp;(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-505&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_LOCAL_SOCKET_&nbsp;<br>&nbsp;UNSPECIFIED&nbsp;</td>
<td valign="TOP">&nbsp;local_portとして不正な値を指定した&nbsp;<br>&nbsp;(TCP,UDP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-506&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_FOREIGN_SOCKET_&nbsp;<br>&nbsp;UNSPECIFIED &nbsp;</td>
<td valign="TOP">&nbsp;remote_addr、remote_portとして&nbsp;<br>&nbsp;不正な値を指定した(TCP,UDP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-508&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;DOES_NOT_EXIST&nbsp;</td>
<td valign="TOP">&nbsp;Connectionが確立していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-509&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;CLOSING&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがClosing状態(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-510&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;RESET &nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがResetされた(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-514&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_NO_ROUTE&nbsp;</td>
<td valign="TOP">&nbsp;相手先へのルーティングが存在しない&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-400&nbsp;</td>
<td valign="TOP">&nbsp;KE_NO_MEMORY&nbsp;</td>
<td valign="TOP">&nbsp;メモリ不足(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-401&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_ATTR&nbsp;</td>
<td valign="TOP">&nbsp;attr の指定が不正(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-409&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_EVFID&nbsp;</td>
<td valign="TOP">&nbsp;対象イベントフラグが存在しない(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に入ろうとした&nbsp;<br>&nbsp;(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された(TCP のみ)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;<br>&nbsp;(TCP のみ)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定したConnectionへ、<i>ptr</i>と<i>count</i>で指定したバッファにあるデータを送信し、エラーがなければ送信したバイト数を返します。<br>TCP接続の場合は、*<i>pflags</i>にはsceINETF_URGビットが指定できます。<br>sceINETF_URGビットを指定した場合はUrgentデータとして直接送信されるため、待ち状態が生じることはありませんが、通常データの場合は送信バッファに空きがないと待ち状態が生じます。タイムアウト時間（<i>ms</i>）は、この送信バッファの空き待ちに対する上限指定となります。<br>以前のバージョンでは、特別なフラグ指定によって指定データの最後のデータを含むセグメントをPUSHフラグ付で送信しましたが、現在ではスタック内部で自動的にPUSHフラグを付加するようになっており、アプリケーション側で意識する必要はありません。<br><br>TCPは、送信先から確認応答が返ってこない場合には再送処理を行います。確認応答を待つ時間は最初は1秒で、確認応答が来なければ64秒に達するまで順次2倍して、最大11回の再送を行います。したがって、タイムアウト時間（<i>ms</i>）に充分に大きな値を指定しても、まったく確認応答がなければ383秒後にタイムアウトとなります。<br>タイムアウトが発生した場合にもsceInetSend()は送信バイト数を返します。タイムアウト発生の有無は*<i>pflags</i>に返される値のsceINETF_TIMビットで判断してください。なおINETが設定するビットはこのビットのみです。<br><br>タイムアウト時間（<i>ms</i>）に0を指定すると待ち時間なしでリターンしますが、他のスレッドが動作しなくなるため、次のように待ち時間なしで送信を繰り返す処理を行ってはいけません。Connectionごとにスレッドを生成し、無限もしくは適切なタイムアウトを指定してください。<br><br></div>
        <div style="margin-left:93px;"><pre><font size=3>while(1){
    flags = 0;
    if(0 &gt; (r = sceInetSend(cid, buf, sizeof(buf), &flags, 0)))
        エラー処理;
    else
        送信処理;
}
</pre></font></div>
<div style="margin-left:50px;"><br>UDPおよびRaw IPでは送信時にバッファを経由しないため、待ち状態が生じることはありません。<br>TCP の場合、送信バッファリング動作の上限バイト数のデフォルト値は<br><br></div>
<div style="margin-left:70px;">22 * 1460 = 32120 = 約 31.4 KB<br></div>
<div style="margin-left:50px;"><br>ですが、この上限値はsceInetControl(code=sceINETC_CODE_SET_SNDBUF) にて変更する事ができます。<br>相手からの ACK がまだ届いていない sceInetSend() による送信データのバイト数の合計がこの上限値以上である場合には、その条件を満たす間sceInetSend() の処理は待ち状態に入ります。sceInetSend() の呼び出しによるネットワーク上への送信動作はsceInetControl() のcode=sceINETC_CODE_SET_FLAGS によって影響を受けます。<br><br></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">TCP の送信バッファは固定領域ではなく常に動的に確保します。<br>INET 内部のバッファリング処理は相手側からの通知 window サイズには影響されず、上限値 までをINET 内部にバッファリングすることができます。これは、上限値までは INET 内部にバッファリングされsceInetSend() はすぐに呼び出し元へ返り、上限値以上である間は 上限値未満になるまで呼び出しスレッドが待ち状態に入ることを意味します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetSendTo"><font size=6>sceInetSendTo<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>指定IPアドレス・ポート番号へのデータ送信<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inet.h&gt;
int <b>sceInetSendTo</b>(
	int <i>cid</i>,
	void *<i>ptr</i>,
	int <i>count</i>,
	int <i>*pflags</i>,
	sceInetAddress_t *<i>iadr</i>,
	int <i>port</i>,
	int <i>ms</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み許可状態で呼ぶこと）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;Connection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;受信データを格納するバッファアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>count</i>&nbsp;</td>
<td valign="TOP">&nbsp;受信すべきデータサイズ（バイト数）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>pflags</i>&nbsp;</td>
<td valign="TOP">&nbsp;ステータスフラグを格納する変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>iadr</i>&nbsp;</td>
<td valign="TOP">&nbsp;送信元のIPアドレスを格納する変数のアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>port</i>&nbsp;</td>
<td valign="TOP">&nbsp;ポート&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ms</i>&nbsp;</td>
<td valign="TOP">&nbsp;タイムアウト時間（ミリ秒）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信したバイト数を返します。<br>エラーの場合、以下のエラーコード（負の値）を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-505&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_LOCAL_SOCKET_&nbsp;<br>&nbsp;UNSPECIFIED &nbsp;</td>
<td valign="TOP">&nbsp;local_portとして不正な値を指定した&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-506&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_FOREIGN_SOCKET&nbsp;<br>&nbsp;_UNSPECIFIED&nbsp;</td>
<td valign="TOP">&nbsp;remote_addr、remote_portとして&nbsp;<br>&nbsp;不正な値を指定した&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-508&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;DOES_NOT_EXIST&nbsp;</td>
<td valign="TOP">&nbsp;Connectionが確立していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE&nbsp;<br>&nbsp;_INVALID_ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-513&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_INVALID_CALL&nbsp;</td>
<td valign="TOP">&nbsp;不正な関数呼び出し&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-514&nbsp;</td>
<td valign="TOP">&nbsp;sceINETE_NO_ROUTE&nbsp;</td>
<td valign="TOP">&nbsp;相手先へのルーティングが存在しない&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">以下のIOP Kernel APIの返り値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-400&nbsp;</td>
<td valign="TOP">&nbsp;KE_NO_MEMORY&nbsp;</td>
<td valign="TOP">&nbsp;メモリ不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-401&nbsp;</td>
<td valign="TOP">&nbsp;KE_ILLEGAL_ATTR&nbsp;</td>
<td valign="TOP">&nbsp;attr の指定が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-409&nbsp;</td>
<td valign="TOP">&nbsp;KE_UNKNOWN_EVFID&nbsp;</td>
<td valign="TOP">&nbsp;対象イベントフラグが存在しない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-417&nbsp;</td>
<td valign="TOP">&nbsp;KE_CAN_NOT_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;ディスパッチ禁止状態で待ち状態に入ろうとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-418&nbsp;</td>
<td valign="TOP">&nbsp;KE_RELEASE_WAIT&nbsp;</td>
<td valign="TOP">&nbsp;WAIT状態は強制解除された&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;-425&nbsp;</td>
<td valign="TOP">&nbsp;KE_WAIT_DELETE&nbsp;</td>
<td valign="TOP">&nbsp;WAIT対象のオブジェクトが削除された&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定したConnectionに対し、送信先のIPアドレス（*<i>iadr</i>）とポート（<i>port</i>）を指定して、<i>ptr</i>と<i>count</i>で指定したバッファにあるデータをsceInetSend()と同様に送信し、エラーがなければ送信したバイト数を返します。UDP接続の場合のみ呼び出し可能で、TCP接続の場合はエラー（sceINETE_INVALID_CALL）となります。<br><br>UDPはTCPと違ってstatelessなので、sceInetCreate()でsceInetParam中のremote_addrを任意、またはremote_portをsceINETP_ANYと指定すると、ひとつのConnection IDで複数の相手に送信することが可能です。その場合に、このsceInetSendTo()を使って相手のIPアドレスとポート番号を指定します。<br>remote_addrが任意でない、もしくはremote_portがsceINETP_ANYではないConnectionに対してそれと異なる値を指定して送信しようとするなど、不整合がある場合はエラー（sceINETE_INVALID_ARGUMENT）となります。<br><br>現在、*<i>pflags</i>に返される値はありません。<br><br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>Connection制御用制御コード</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_GET_FLAGS"><font size=6>sceINETC_CODE_GET_FLAGS<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>制御フラグの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_GET_FLAGS</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定されたConnectionに関する制御フラグを取得し、<i>ptr</i>と<i>len</i>で指定される領域に格納します。<i>len</i>にはsizeof(int)を指定してください。<br>各制御フラグの意味については、sceInetC_CODE_SET_FLAGSの解説を参照してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_GET_INFO"><font size=6>sceINETC_CODE_GET_INFO<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Connectionの情報取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_GET_INFO</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（sceInetInfo_t）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（バイト数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cid</i>で指定されたConnectionに関する情報（sceInetInfo_t構造体）を<i>ptr</i>と<i>len</i>で指定される領域に格納します。<i>len</i>には通常、sizeof(sceInetInfo_t)を指定することになります。<br>cidに0を指定すると、TCP、UDP、Raw IPすべてのConnectionに関する情報をsceInetInfo_t構造体の配列として、<i>ptr</i>と<i>len</i>で指定される領域に格納します。この場合は十分に大きな領域を用意してください。返り値が0以上であれば、指定領域に格納されたsceInetInfo_t構造体の数（つまりConnectionの数）を意味します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_SET_FLAGS"><font size=6>sceINETC_CODE_SET_FLAGS<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>制御フラグの設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_SET_FLAGS</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>ptr</i>と<i>len</i>で指定される領域に格納されている値を、<i>cid</i>で指定されたConnectionに関する制御フラグとして設定します。<i>len</i>にはsizeof(int)を指定してください。<br><br>現在定義されている制御フラグは次のとおりです。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>制御フラグ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値（ビット位置）</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETC&nbsp;<br>&nbsp;_FLAGS_NODELAY&nbsp;</td>
<td valign="TOP">&nbsp;0x01（bit0）&nbsp;</td>
<td valign="TOP">&nbsp;TCP no delay&nbsp;<br>&nbsp;0 Nagleのアルゴリズム有効&nbsp;<br>&nbsp;1 Nagleのアルゴリズム無効&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">TCPでは、送信効率を高めるためにセグメント長がある程度のサイズになるまで送信を遅らせる処理（Nagleアルゴリズム）がデフォルトで適用されます。制御フラグsceINETC_FLAGS_NODELAYを1に設定すると、この遅延処理を行わないようになります。<br>遅延に敏感で、小さいデータを頻繁にやりとりするようなアプリケーションなどで有効です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_SET_MULTICAST_IF"><font size=6>sceINETC_CODE_SET_MULTICAST_IF<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マルチキャストアドレスのインターフェース設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_SET_MULTICAST_IF</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(sceInetAddress_t)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信先がマルチキャストアドレスである場合の I/F を指定します。指定領域 (<i>ptr</i>,<i>len</i>) は sceInetAddress_t で、len には常にsizeof(sceInetAddress_t) を指定します。<br>I/F 指定の方法は次の 3 通りです。<br><br></div>
<div style="margin-left:70px;">0.0.0.0	- routing table にて動的に決めます(default)。<br>0.0.0.0/8	- その値を I/F ID と見なします。<br>その他	- local IP address による I/F の指定と見なします。<br></div>
<div style="margin-left:50px;"><br></div>
<div style="margin-left:70px;">例:<br>0.0.0.2	- I/F ID が 2 である I/F を用いて送信します。<br>192.168.0.1 - local IP address が 192.168.0.1 である I/F を用いて送信します。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_GET_MULTICAST_IF"><font size=6>sceINETC_CODE_GET_MULTICAST_IF<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マルチキャストアドレスのインターフェース取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_GET_MULTICAST_IF</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(sceInetAddress_t)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信先がマルチキャストアドレスである場合の I/F 指定を指定された領域 (<i>ptr</i>,<i>len</i>) に転送します。指定領域 (<i>ptr,len</i>) は sceInetAddress_t で、<i>len</i> には常にsizeof(sceInetAddress_t) を指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_SET_MULTICAST_TTL"><font size=6>sceINETC_CODE_SET_MULTICAST_TTL<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マルチキャストアドレスのTTL設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_SET_MULTICAST_TTL</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信先がマルチキャストアドレスである場合の TTL 値を指定領域 (<i>ptr</i>,<i>len</i>)で示された値に設定します。<i>len</i> には常に sizeof(int) を指定して下さい。<br>指定がない場合のマルチキャスト送信時の TTL 値は 1 です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_GET_MULTICAST_TTL"><font size=6>sceINETC_CODE_GET_MULTICAST_TTL<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マルチキャストアドレスのTTL取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_GET_MULTICAST_TTL</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信先がマルチキャストアドレスである場合の TTL 値を指定領域 (<i>ptr</i>,<i>len</i>)に格納します。<i>len</i> には常に sizeof(int) を指定して下さい。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_SET_MULTICAST_LOOP"><font size=6>sceINETC_CODE_SET_MULTICAST_LOOP<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マルチキャストアドレスのループバック設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_SET_MULTICAST_LOOP</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信先がマルチキャストアドレスであり、かつそのアドレスグループに参加している場合に、送信データをループバックさせるかどうかの指定です。指定領域 (<i>ptr</i>,<i>len</i>) で示される値が 0 の時にはループバックしません。値が 0 以外の場合にはループバックします(default)。<i>len</i> には常に sizeof(int) を指定して下さい。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_GET_MULTICAST_LOOP"><font size=6>sceINETC_CODE_GET_MULTICAST_LOOP<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マルチキャストアドレスのループバック取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_GET_MULTICAST_LOOP</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信先がマルチキャストアドレスであり、かつそのアドレスグループに参加している場合に、送信データをループバックさせるかどうかの設定を指定領域 (<i>ptr</i>,<i>len</i>) に格納します。値が 0 の時にはループバックしません。値が 0 以外の場合にはループバックします。<i>len</i> には常に sizeof(int) を指定して下さい。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_ADD_MEMBERSHIP"><font size=6>sceINETC_CODE_ADD_MEMBERSHIP<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>グループへの参加<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_ADD_MEMBERSHIP</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(sceInetIP_MREQ_t)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定領域 (<i>ptr</i>,<i>len</i>) で示されるアドレスグループへ参加します。<br>指定領域は sceInetIP_MREQ_t で、<i>len</i> には常に sizeof(sceInetIP_MREQ_t)を指定します。<br>この参加を行う事でそのアドレスグループ向けのマルチキャストパケットをこのコネクションで受信できるようになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_DROP_MEMBERSHIP"><font size=6>sceINETC_CODE_DROP_MEMBERSHIP<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>グループからの脱退<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_DROP_MEMBERSHIP</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(sceInetIP_MREQ_t)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定領域 (<i>ptr</i>,<i>len</i>) で示されるアドレスグループから脱退します。<br>指定領域は sceInetIP_MREQ_t で、<i>len</i> には常に sizeof(sceInetIP_MREQ_t)を指定します。<br>この脱退を行う事でそのアドレスグループ向けのマルチキャストパケットをこのコネクションで受信しないようになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_GET_SNDBUF"><font size=6>sceINETC_CODE_GET_SNDBUF<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>送信バッファリング動作の上限バイト数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_GET_SNDBUF</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定領域 (<i>ptr</i>,<i>len</i>) に現在の送信バッファリング動作の上限バイト数を設定します。<br><i>len</i> には常に sizeof(int) を指定します。<br>送信バッファリング動作は TCP でのみ有効です。<br>UDP,RAW に対する要求は常に sceINETE_INVALID_ARGUMENT となります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_SET_SNDBUF"><font size=6>sceINETC_CODE_SET_SNDBUF<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>送信バッファリング動作の上限バイト数設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_SET_SNDBUF</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">送信バッファリング動作の上限バイト数を指定領域 (<i>ptr,len</i>) で示された値に設定します。<br><i>len</i> には常に sizeof(int) を指定します。<br>この設定が可能なのは sceInetCreate() 直後でまだ sceInetOpen() を行っていない状態のコネクションに限られます。それ以外の状態の場合にはsceINETE_INVALID_CALL のエラーとなります。<br>送信バッファリング動作は TCP でのみ有効で、設定可能な上限値の範囲は<br><br></div>
<div style="margin-left:70px;">0 〜 0xffff　(default=22*1460)<br></div>
<div style="margin-left:50px;"><br>です。<br>UDP,RAW に対する要求は常に sceINETE_INVALID_ARGUMENT となります。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_GET_RCVBUF"><font size=6>sceINETC_CODE_GET_RCVBUF<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>受信バッファリング動作の上限バイト数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_GET_RCVBUF</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定領域 (<i>ptr</i>,<i>len</i>) に現在の受信バッファリング動作の上限バイト数を設定します。<br><i>len</i> には常に sizeof(int) を指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_SET_RCVBUF"><font size=6>sceINETC_CODE_SET_RCVBUF<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>受信バッファリング動作の上限バイト数設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_SET_RCVBUF</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">受信バッファリング動作の上限バイト数を指定領域 (<i>ptr,len</i>) で示された値に設定します。<br><i>len</i> には常に sizeof(int) を指定します。<br>この設定が可能なのは sceInetCreate() 直後でまだ sceInetOpen() を行っていない状態のコネクションに限られます。それ以外の状態の場合にはsceINETE_INVALID_CALL のエラーとなります。<br>設定可能な上限値の範囲は以下の通りです。<br><br></div>
<div style="margin-left:70px;">TCP	0 〜 0xffff　(default=22*1460)<br>UDP	0 〜 0x7fffffff  (default=8MB)<br>RAW	0 〜 0x7fffffff  (default=32KB)<br></div>
<div style="margin-left:50px;"><br>TCP の場合にはこの上限値を相手側への通知 window サイズとして使用しますが、相手側がこの値を正しく「符合なし」の 2 バイト値として扱わない場合には正しい TCP のやり取りは期待できませんので、相手側の実装が確実に確認できるケースを除き 0x8000 以上の値を設定する事は推奨いたしません。<br>UDP および RAW の場合にはこの上限値を越えるデータを持つパケットはすべて破棄し、sceInetRecv(),sceInetRecvFrom() がまだ呼ばれず INET 内部にバッファリングされているデータのバイト数の合計がこの上限値を越えた場合には上限以下になるまで先に届いたパケットから破棄します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceINETC_CODE_SEND_FIN"><font size=6>sceINETC_CODE_SEND_FIN<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>相手側にFINの送信<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int sceInetControl(
	int <i>cid</i>,
	<b>sceINETC_CODE_SEND_FIN</b>,
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>cid</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のConnection ID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域（制御フラグ）の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（＝sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">TCP の場合にコネクションの送信側を閉じる処理を行います。これによって通常は相手側に FIN を送信します。<br>指定領域 (ptr,len) にはタイムアウト値を指定します。タイムアウト値の指定方法はsceInetSend()などと同じです。このタイムアウト指定値は送信バッファにまだ確認応答されていない送信データがバッファに残っている場合にその送信完了を待つ上限時間として扱われます。<br>len には sizeof(int) を指定して下さい。<br><br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>INETレイヤ制御コード</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetAddress"><font size=6>sceInetCC_GetAddress<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IPアドレスの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetAddress</b>,	// 0x00000009
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(sceInetAddress_t)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのIPアドレスを取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がsizeof(sceInetAddress_t)でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetBroadcast"><font size=6>sceInetCC_GetBroadcast<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ブロードキャストアドレスの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetBroadcast</b>,	// 0x0000000b
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(sceInetAddress_t)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのブロードキャストアドレスを取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がsizeof(sceInetAddress_t)でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetBusLoc"><font size=6>sceInetCC_GetBusLoc<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>デバイス位置情報の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetBusLoc</b>,	// 0x00000005
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（31バイト）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースに対応するデバイスのバス上の位置情報を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br>現状ではバス種別がsceInetBus_USBのときのみ有効です。位置情報はsceUsbdGetDeviceLocationが返す形式です。<br>サイズは将来のために余裕を持たせて31バイトにしています。<br><i>len</i>が31でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetBusType"><font size=6>sceInetCC_GetBusType<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>バス種別の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetBusType</b>,	// 0x00000004
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_char)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのバス種別（現在はsceInetBus_USBのみ）を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br>現在定義されているバス種別は、次の通りです。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>バス種別</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetBus_USB&nbsp;</td>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;USBイーサネット&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetBus_NIC&nbsp;</td>
<td valign="TOP">&nbsp;5&nbsp;</td>
<td valign="TOP">&nbsp;HDDイーサネット&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;"><i>len</i>がsizeof(u_char)（=1）でない場合にはエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetDeviceName"><font size=6>sceInetCC_GetDeviceName<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>デバイス名の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetDeviceName</b>,	// 0x00000003
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（バイト数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのデバイス名を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がデバイス名を格納するのに十分なサイズでない場合にはエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetDHCPFlags"><font size=6>sceInetCC_GetDHCPFlags<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>DHCP用制御フラグの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetDHCPFlags</b>,	// 0x0000000f
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのDHCP用制御フラグを取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br>現在定義されているDHCP用制御フラグは次のとおりです。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>制御フラグ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値（ビット位置）</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceInetDevDHCP_RelOnStop&nbsp;</td>
<td valign="TOP">&nbsp;0x00000001&nbsp;</td>
<td valign="TOP">&nbsp;インタフェースdown時に&nbsp;<br>&nbsp;DHCPRELEASEを発行する&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;"><i>len</i>がsizeof(int) (=4)でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetDHCPHostName"><font size=6>sceInetCC_GetDHCPHostName<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>DHCP用ホスト名の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetDHCPHostName</b>,	// 0x0000000e
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（バイト数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのDHCP用ホスト名を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がDHCP用ホスト名を格納するのに十分なサイズでない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetFlags"><font size=6>sceInetCC_GetFlags<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>フラグの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetFlags</b>,	// 0x00000008
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースに対応するNETDEVモジュールが持つsceInetDevOps構造体中のフラグ（flags）を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。各フラグの詳細については、ネットワークデバイスI/F仕様を参照してください。<br><i>len</i>がsizeof(int)（=4）でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetHWaddr"><font size=6>sceInetCC_GetHWaddr<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ハードウェアアドレスの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetHWaddr</b>,	// 0x0000000d
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（16バイト）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのハードウェアアドレス（MACアドレス）を取得し、(<i>ptr</i>,<i>len</i>)の先頭6バイトに格納します。そのネットワークインタフェースがEthenet I/Fである場合のみ有効です。<br>ハードウェアアドレスとして返す値は6バイトですが、データ受け渡しバッファとしては16バイトの領域を用意してください。<i>len</i>が16でない場合にはエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetImpl"><font size=6>sceInetCC_GetImpl<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>実装バージョンの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetImpl</b>,	// 0x00000007
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_short)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースに対応するNETDEVモジュールの実装バージョンを取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がsizeof(u_short)（=2）でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetInterfaceName"><font size=6>sceInetCC_GetInterfaceName<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>インタフェース名の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetInterfaceName</b>,	// 0x00000000
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（8+1バイト）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのインタフェース名(eth0やppp0など)を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>が8+1でない場合にはエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetIP_RxPackets"><font size=6>sceInetCC_GetIP_RxPackets<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IP レイヤの受信パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetIP_RxPackets</b>,	// 0x00000200
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) に IP レイヤの受信パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetIP_TxPackets"><font size=6>sceInetCC_GetIP_TxPackets<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IP レイヤの送信パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetIP_TxPackets</b>,	// 0x00000201
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) に IP レイヤの送信パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetIP_RxDropped"><font size=6>sceInetCC_GetIP_RxDropped<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IP レイヤの受信時の破棄パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetIP_RxDropped</b>,	// 0x00000202
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) に IP レイヤの受信時の破棄パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetIP_TxDropped"><font size=6>sceInetCC_GetIP_TxDropped<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>IP レイヤの送信時の破棄パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetIP_TxDropped</b>,	// 0x00000203
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) に IP レイヤの送信時の破棄パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetTCP_RxPackets"><font size=6>sceInetCC_GetTCP_RxPackets<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>TCP レイヤの受信パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetTCP_RxPackets</b>,	// 0x00000204
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) に TCP レイヤの受信パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetTCP_TxPackets"><font size=6>sceInetCC_GetTCP_TxPackets<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>TCP レイヤの送信パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetTCP_TxPackets</b>,	// 0x00000205
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr</i>,<i>len</i>) に TCP レイヤの送信パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetTCP_RxDropped"><font size=6>sceInetCC_GetTCP_RxDropped<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>TCP レイヤの受信時の破棄パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetTCP_RxDropped</b>,	// 0x00000206
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr</i>,<i>len</i>) に TCP レイヤの受信時の破棄パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetTCP_TxDropped"><font size=6>sceInetCC_GetTCP_TxDropped<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>TCP レイヤの送信時の破棄パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetTCP_TxDropped</b>,	// 0x00000207
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr</i>,<i>len</i>) に TCP レイヤの送信時の破棄パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetUDP_RxPackets"><font size=6>sceInetCC_GetUDP_RxPackets<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>UDP レイヤの受信パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetUDP_RxPackets</b>,	// 0x00000208
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr</i>,<i>len</i>) に UDP レイヤの受信パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetUDP_TxPackets"><font size=6>sceInetCC_GetUDP_TxPackets<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>UDP レイヤの送信パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetUDP_TxPackets</b>,	// 0x00000209
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) に UDP レイヤの送信パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetUDP_RxDropped"><font size=6>sceInetCC_GetUDP_RxDropped<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>UDP レイヤの受信時の破棄パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetUDP_RxDropped</b>,	// 0x0000020a
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr</i>,<i>len</i>) に UDP レイヤの受信時の破棄パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetUDP_TxDropped"><font size=6>sceInetCC_GetUDP_TxDropped<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>UDP レイヤの送信時の破棄パケット総数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetUDP_TxDropped</b>,	// 0x0000020b
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) に UDP レイヤの送信時の破棄パケット総数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetMemFreeCurrent"><font size=6>sceInetCC_GetMemFreeCurrent<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>inet.irx の現在の空きメモリバイト数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetMemFreeCurrent</b>,	// 0x00000280
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr</i>,<i>len</i>) に inet.irx の現在の空きメモリバイト数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。interface_id には常に 0 を指定してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetMemFreeMinimum"><font size=6>sceInetCC_GetMemFreeMinimum<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>inet.irx の現在までの最小空きメモリバイト数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetMemFreeMinimum</b>,	// 0x00000281
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(<i>ptr,len</i>) にinet.irx の現在までの最小空きメモリバイト数を格納します。<i>len</i> が sizeof(u_int) (=4) でない場合にはエラーになります。interface_id には常に 0 を指定してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetModuleName"><font size=6>sceInetCC_GetModuleName<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>モジュール名の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetModuleName</b>,	// 0x00000001
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（バイト数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのモジュール名を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がモジュール名を格納するのに十分なサイズでない場合にはエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetMTU"><font size=6>sceInetCC_GetMTU<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>MTU値の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetMTU</b>,	// 0x0000000c
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(int)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのMTU値を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がsizeof(int)（＝4）でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetNetmask"><font size=6>sceInetCC_GetNetmask<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>サブネットマスクの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetNetmask</b>,	// 0x0000000a
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(sceInetAddress_t)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのサブネットマスクを取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がsizeof(sceInetAddress_t)でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetProt"><font size=6>sceInetCC_GetProt<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>プロトコルバージョンの取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetProt</b>,	// 0x00000006
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（sizeof(u_short)）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースに対応するNETDEVモジュールのプロトコルバージョンを取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がsizeof(u_short)（=2）でない場合はエラーとなります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceInetCC_GetVendorName"><font size=6>sceInetCC_GetVendorName<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ベンダ名の取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;inetctl.h&gt;
int <b>sceInetInterfaceControl</b>(
	int <i>interface_id</i>,
	<b>sceInetCC_GetVendorName</b>,	// 0x00000002
	void *<i>ptr</i>,
	int <i>len</i>
)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>interface_id</i>&nbsp;</td>
<td valign="TOP">&nbsp;操作対象のネットワークインタフェースID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域の先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>len</i>&nbsp;</td>
<td valign="TOP">&nbsp;データ領域のサイズ（バイト数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">正常終了の場合、sceINETE_OK（＝0）を返します。<br>エラーの場合、エラーコード（負の値）を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたネットワークインタフェースのベンダ名を取得し、(<i>ptr</i>,<i>len</i>)で指定された領域に格納します。<br><i>len</i>がベンダ名を格納するのに十分なサイズでない場合にはエラーとなります。<br><br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>エラーコード</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="エラーコード"><font size=6>エラーコード<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>INET関数の返り値<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_OK&nbsp;</td>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;正常終了&nbsp;<br>&nbsp;(関数によっては正常終了時に&nbsp;<br>&nbsp;正の値を返す事があります)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_TIMEOUT&nbsp;</td>
<td valign="TOP">&nbsp;-500&nbsp;</td>
<td valign="TOP">&nbsp;各関数に引数で指定したタイムアウトが&nbsp;<br>&nbsp;起こった、もしくはTCPの再送タイム&nbsp;<br>&nbsp;アウト発生&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_ABORT&nbsp;</td>
<td valign="TOP">&nbsp;-501&nbsp;</td>
<td valign="TOP">&nbsp;sceInetAbort()の呼び出しにより中断&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_BUSY&nbsp;</td>
<td valign="TOP">&nbsp;-502&nbsp;</td>
<td valign="TOP">&nbsp;INETモジュールの初期化が完了して&nbsp;<br>&nbsp;いない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_LINK_DOWN&nbsp;</td>
<td valign="TOP">&nbsp;-503&nbsp;</td>
<td valign="TOP">&nbsp;デバイスの初期化や接続処理が完了&nbsp;<br>&nbsp;していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_INSUFFICIENT_&nbsp;<br>&nbsp;RESOURCES&nbsp;</td>
<td valign="TOP">&nbsp;-504&nbsp;</td>
<td valign="TOP">&nbsp;メモリ領域不足&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_LOCAL_SOCKET_&nbsp;<br>&nbsp;UNSPECIFIED&nbsp;</td>
<td valign="TOP">&nbsp;-505&nbsp;</td>
<td valign="TOP">&nbsp;local_portとして不正な値を指定した&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_FOREIGN_SOCKET_&nbsp;<br>&nbsp;UNSPECIFIED&nbsp;</td>
<td valign="TOP">&nbsp;-506&nbsp;</td>
<td valign="TOP">&nbsp;remote_addr、remote_portとして&nbsp;<br>&nbsp;不正な値を指定した&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;ALREADY_EXISTS&nbsp;</td>
<td valign="TOP">&nbsp;-507&nbsp;</td>
<td valign="TOP">&nbsp;すでに確立しているConnectionを&nbsp;<br>&nbsp;オープンしようとした&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;DOES_NOT_EXIST&nbsp;</td>
<td valign="TOP">&nbsp;-508&nbsp;</td>
<td valign="TOP">&nbsp;Connectionが確立していない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;CLOSING&nbsp;</td>
<td valign="TOP">&nbsp;-509&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがClosing状態&nbsp;<br>&nbsp;（TCPのみ）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;RESET&nbsp;</td>
<td valign="TOP">&nbsp;-510&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがResetされた&nbsp;<br>&nbsp;（TCPのみ）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_CONNECTION_&nbsp;<br>&nbsp;REFUSED&nbsp;</td>
<td valign="TOP">&nbsp;-511&nbsp;</td>
<td valign="TOP">&nbsp;ConnectionがSyn-Recieved状態の&nbsp;<br>&nbsp;ときにResetされた（TCPのみ）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_INVALID_&nbsp;<br>&nbsp;ARGUMENT&nbsp;</td>
<td valign="TOP">&nbsp;-512&nbsp;</td>
<td valign="TOP">&nbsp;引数が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_INVALID_CALL&nbsp;</td>
<td valign="TOP">&nbsp;-513&nbsp;</td>
<td valign="TOP">&nbsp;不正な関数呼び出し&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;sceINETE_NO_ROUTE&nbsp;</td>
<td valign="TOP">&nbsp;-514&nbsp;</td>
<td valign="TOP">&nbsp;相手先へのルーティングが存在しない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">上記以外のエラーを表す負の値として、IOP Kernel APIの返り値（KE_xxx）が返されることがあります。それぞれの意味は IOP Kernel のドキュメントを参照して下さい。<br><br></div>
<p><p><hr>
<div ALIGN="right">
    Copyright (c) 2002 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
