<html lang="ja">
<!-- o@PCo -->
<head>

<script language="JavaScript">
<!--
  function startFixed(){
    fixedLAYER('fixedLay0','rightBottom',-35,-35)
  }

  var ie= !!document.all
  var n4= !!document.layers
  var w3c=!!document.getElementById
  var mac45 
    = navigator.userAgent.indexOf('MSIE 4.5; Mac_PowerPC')

  if(document.layers)window.onresize=resizeFunc
  function resizeFunc(e){location.reload()}

  function iniFunc(){
    if(ie&&!(mac45!=-1))window.onscroll = startFixed
    startFixed()
  }

  var tid=new Array()

  function fixedLAYER(layName,posString,offSetX,offSetY){

    offSetX = parseInt(offSetX,10)
    offSetY = parseInt(offSetY,10)

 if( posString == 'rightBottom' ){

      if(ie) offLeft = document.body.clientWidth   + offSetX
      else   offLeft = window.innerWidth           + offSetX
      if(ie) offTop  = document.body.clientHeight  + offSetY
      else   offTop  = window.innerHeight          + offSetY

    }
    else {

      if(ie) offLeft =                               offSetX
      else   offLeft =                               offSetX
      if(ie) offTop  =                               offSetY
      else   offTop  =                               offSetY

    }

    offLeft = parseInt(offLeft)
    offTop  = parseInt(offTop)

    if(document.all){
      var mx = parseInt(document.body.scrollLeft +offLeft)
      var my = parseInt(document.body.scrollTop  +offTop)
    } else {
      var mx = parseInt(self.pageXOffset+offLeft)
      var my = parseInt(self.pageYOffset+offTop)

    }

    moveLAYER(layName,mx,my)

    if(!(ie&&!(mac45!=-1)))
      setTimeout("fixedLAYER('"+layName+"','"+posString
                   +"','" +offSetX+"','"+offSetY+"')",100)
  }

  function moveLAYER(layName,x,y){
      
      if(document.getElementById){
        document.getElementById(layName).style.left=x
        document.getElementById(layName).style.top=y
      }
      else if(document.all){
        document.all(layName).style.pixelLeft=x
        document.all(layName).style.pixelTop=y
      }
      else if(document.layers)
        document.layers[layName].moveTo(x,y)
  }

// -->
</script>

<script language="JavaScript">
<!--
  function lj(ch,fm)
  {
    if ( parent.index ) {
      if ( ch == "libref" ){ parent.index.location.href="../libref/category.htm"; }
      else if ( ch == "../ee/libref" ){ parent.index.location.href="../../ee/libref/category.htm"; }
      else if ( ch == "../iop/libref" ){ parent.index.location.href="../../iop/libref/category.htm"; }
      else if ( ch == "../iop/overview" ){ parent.index.location.href="../../iop/overview/category.htm"; }
      else if ( ch == "../ee/overview" ){ parent.index.location.href="../../ee/overview/category.htm"; }
      else if ( ch == "overview" ){ parent.index.location.href="../overview/category.htm"; }
    }
    if ( parent.main ) {
      if ( fm != "" ){ parent.main.location.href=fm; }
    } else {
      if ( fm != "" ){ location.href=fm; }
    }
  }
//-->
</script>
<title>HTTPCu</title>
<meta http-equiv="Content-Type"content= text/html; charset=UTF-8 >
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" Content="Sony Computer Entertainment Inc.">
<style type="text/css"><!--
    div.fixedLay{position:absolute;z-index:100;left:0px;top:0px;}
--></style>
</head>
<body onload="iniFunc()" bgcolor="#ffffff" text="#000000" >
<div id="fixedLay0" class="fixedLay">
<a href="#top"><img src="gif/link.gif" border="0" alt="TOP"></a>
</div>
<table WIDTH="100%">
<tr><td>
<h3>"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3</h3>
</td>
</tr>
<tr><td align= right >
<script language="JavaScript">
<!--
   var p,q;
   if ( parent.index ) {
   p = parent.index.location;
   q = p.toString();
   result = q.match(/\/category\.htm/gi);
   if(result == "/category.htm"){
          document.writeln("<a href=\"JavaScript:lj('libref','../libref/http_rf.htm')\"><img src=\"./gif/arrow.png\" border=0>\́^֐ꗗ</a>");
    }
}
// -->
</script>
</td></tr>
</table>
<hr noshade size=6>
<a name=Heading2>
<center><h1>
HTTPCu
</h1></center>
</a>
<div align=center>
<table border=0 bgcolor=#F5F5F5 width=90%><tr><td>
<h2><u>
        <b>ڎ</b><br>
</u></h2>

<ul>
<p><a href="#Heading3_1">  1 <b>CuTv</b></a>
    <ul>
    <a href="#Heading4_1_1"> <b>Tv</b><br></a>
    <a href="#Heading4_1_2"> <b>֘At@C</b><br></a>
    <a href="#Heading4_1_3"> <b>TvvO</b><br></a>
    </ul>
<p><a href="#Heading3_2">  2 <b>@\ƃR[ht[</b></a>
    <ul>
    <a href="#Heading4_2_1"> <b>{Iȗ</b><br></a>
    <a href="#Heading4_2_2"> <b>IvVwb_̒ǉ</b><br></a>
    <a href="#Heading4_2_3"> <b>HTTP X|X̃IvVwb_Aу{fB̎擾</b><br></a>
    <a href="#Heading4_2_4"> <b>HTTPNGXg{fB̐ݒ</b><br></a>
    <a href="#Heading4_2_5"> <b>^CAEgݒAA{[g</b><br></a>
    <a href="#Heading4_2_6"> <b>vLVݒ</b><br></a>
    <a href="#Heading4_2_7"> <b>mubLO[h</b><br></a>
    <a href="#Heading4_2_8"> <b>_CNV</b><br></a>
    <a href="#Heading4_2_9"> <b>F؏</b><br></a>
    <a href="#Heading4_2_10"> <b>NbL[</b><br></a>
    <a href="#Heading4_2_11"> <b>MIME</b><br></a>
    <a href="#Heading4_2_12"> <b>`NM</b><br></a>
    <a href="#Heading4_2_13"> <b>GR[hAfR[h</b><br></a>
    <a href="#Heading4_2_14"> <b>t@CɂM</b><br></a>
    </ul>
<p><a href="#Heading3_3">  3 <b>ӎ</b></a>
    <ul>
    <a href="#Heading4_3_1"> <b>G[R[hɂ</b><br></a>
    <a href="#Heading4_3_2"> <b>[UG[WFgɂ</b><br></a>
    <a href="#Heading4_3_3"> <b>libhttpCuł̃Xbhɂ</b><br></a>
    </ul>
<br></td></tr></table></div>

<!-- o@QC͌o -->
<a name=#"Heading2">

<!-- o@RCߌo -->
<a name="Heading3_1">
<h2>
 1 <b>CuTv</b>
<hr noshade>
</h2>


<!-- o@SCo -->
<h3>
<a name="Heading4_1_1">
<a href="#Heading3_1"> 1. </a>1 <b>Tv</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ́AHTTPgpAvP[V̂߂̃CułB<br>{IȓƂāAAvP[Vw肳ꂽ URI ɑ΂HTTP NGXgMAX|XMsȂ܂Blibhttpł͂̊{ɑ΂AvLVݒF؏Ȃǂ܂܂ȋ@\CuŎ܂B<br>libhttp ł́A܂܂ȃvgRX^bNɑΉ邽߁Aʂ̃lbg[N API Ƃ BSD \Pbg̃bp[ API łnetglue 𗘗pĂ܂Bnetglue Cu libhttp ̓QƂ邽߁AAvP[V͒P netglue CuN邾ō\܂B<br>SDK ł́AЃlbg[NCu(inet)p BSD \PbgCułlibinsck g netglue CuAnetglue_insck.a WYtĂ܂̂ŁAinet 𗘗pꍇɂ netglue_insck.a NΎgp\łB<br>̑̃vgRX^bN libhttp 𗘗pꍇɂ́Ap netglue CupӂKv܂B<br></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_1_2">
<a href="#Heading3_1"> 1. </a>2 <b>֘At@C</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp gp邽߂ɕKvȃt@C͈ȉ̂ƂłB<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>JeS</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>t@C</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;wb_t@C&nbsp;</td>
<td valign="TOP">&nbsp;include/libhttp.h&nbsp;<br>&nbsp;(IɈȉ3t@Cinclude)&nbsp;<br>&nbsp;include/libhttp/http_method.h&nbsp;<br>&nbsp;include/libhttp/http_options.h&nbsp;<br>&nbsp;include/libhttp/http_status.h&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Cut@C&nbsp;</td>
<td valign="TOP">&nbsp;libhttp.a&nbsp;<br>&nbsp;inet Cugꍇ&nbsp;<br>&nbsp;netglue_insck.a&nbsp;<br>&nbsp;libinsck.a&nbsp;<br>&nbsp;libnet.a&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;W[t@C&nbsp;</td>
<td valign="TOP">&nbsp;inet Cugꍇ&nbsp;<br>&nbsp;netcnf.irx&nbsp;<br>&nbsp;inet.irx&nbsp;<br>&nbsp;inetctl.irx&nbsp;<br>&nbsp;msifrpc.irx&nbsp;<br>&nbsp;libnet.irx&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">ʏwb_t@ĆAinclude/libhttp.hCN[h邾ō\܂B<br></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_1_3">
<a href="#Heading3_1"> 1. </a>3 <b>TvvO</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp gpTvvOƂāAinet Cu𗘗p̂̂܂B<br></div>
<div style="margin-left:40px;"><ul>
         <li> ee/sample/inet/libhttp/normal@ w肵URIGETAHEADAPOSTsȂTv
         <li> ee/sample/inet/libhttp/proxy@@vLVĎw肵URI擾Tv
         <li> ee/sample/inet/libhttp/mime@@w肵URI擾AMIMEsȂTv
         <li> ee/sample/inet/libhttp/blocking@http_test ̃ubLO
         <li> ee/sample/inet/libhttp/chunk@@`N]Tv
         <li> ee/sample/inet/libhttp/cookie@@NbL[Tv
         <li> ee/sample/inet/libhttp/redirect@ _CNgTv
         <li> ee/sample/inet/libhttp/auth@@  F؏Tv
</ul></div>
<div style="margin-left:50px;">܂ libhttp ɗpӂꂽ BASE64, quoted-printable ̃GR[hEfR[hA URLGXP[vAAGXP[ṽTv܂B<br></div>
<div style="margin-left:40px;"><ul>
         <li> ee/sample/inet/libhttp/base64@BASE64 Tv
         <li> ee/sample/inet/libhttp/qp@@@quoted-printable Tv
         <li> ee/sample/inet/libhttp/urlesc@ URLGXP[vAAGXP[v̏Tv
</ul></div>

<!-- o@RCߌo -->
<a name="Heading3_2">
<h2>
 2 <b>@\ƃR[ht[</b>
<hr noshade>
</h2>


<!-- o@SCo -->
<h3>
<a name="Heading4_2_1">
<a href="#Heading3_2"> 2. </a>1 <b>{Iȗ</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ł́AAvP[V͂܂NCAg\̂쐬A삵A HTTP NGXgsȂ܂BHTTP NGXgɑ΂ HTTP X|XMAX|X\̂擾AX|Xʂ𔻒肵܂B<br><br>̓Iɂ́AAvP[V͂܂ sceHTTPInit() HTTPCȕsȂ܂B<br> sceHTTPCreate() ŃNCAg\̂쐬ACu̒񋟂邳܂܂ȋ@\păNCAg\̂ɐݒsȂAsceHTTPOpen()AsceHTTPRequest() ŎۂHTTP NGXg𑗐M܂BHTTP X|XM sceHTTPGetResponse() ŃX|X\̂擾ł܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>#define ERR_STOP while(1)
int main(int argc, char **argv){
	sceHTTPClient_t *client;
	sceHTTPResponse_t *response;
	sceHTTPParsedURI_t *p;
	int ret;
	char *target_uri;

	...
	/* lbg[NCȕsȂĂ */
	...

	/* libhttp  */
	if((ret = sceHTTPInit()) &lt; 0){
		printf("sceHTTPInit() failed.\n");
		ERR_STOP;
	}
	
	/* HTTP NCAg\̂̍쐬B
		libhttp ŃNCAg\̂B*/
	if((client = sceHTTPCreate()) == NULL){
		printf("sceHTTPCreate() failed.\n");
		ERR_STOP;
	}

	/* ړI URI  libhttp p URI \̂ɕϊB
	   target_uri ŖړI URI QƂĂƂ */
	if((p = sceHTTPParseURI(target_uri, (sceHTTPParseURI_FILENAME
		| sceHTTPParseURI_SEARCHPART))) == 0){
		printf("sceHTTPParseURI() failed.\n");
		ERR_STOP;
	}

	/* ړĨ\bhNCAg\̂ɐݒ肷 */
	if((ret = sceHTTPSetOption(client, sceHTTPO_Method, sceHTTPM_GET)) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* URI ANCAg\̂ɐݒ肷 */
	if((ret = sceHTTPSetOption(client, sceHTTPO_ParsedURI, p)) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* HTTP NGXg𑗐MOɁARlNVɑ΂
		Cӂ̐ݒsȂ */
	sceHTTPSetOption(client, ...);
	...

	/* HTTP ڑJnBۂɃRlNVm */
	if(sceHTTPOpen(client) &lt; 0){
		printf("sceHTTPOpen() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* HTTP NGXgMB
		ubLȌꍇ HTTP X|XM܂ŃubNB */
	if((ret = sceHTTPRequest(client)) &lt; 0){
		printf("sceHTTPRequest() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* HTTP X|X擾 */
	response = sceHTTPGetResponse(client);

	...
	/* 擾 HTTP X|Xɑ΂āACӂ̏sȂ */
	...

	/* IBRlNVؒf */
	if((ret = sceHTTPClose(client)) &lt; 0){
		printf("sceHTTPClose() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* CuŐNCAg\̂B
	   RÂĂ HTTP X|X\̂wb_Xg
	   ׂĉB */
	if((ret = sceHTTPDestroy(client)) &lt; 0){
		printf("sceHTTPDestroy() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* Cu̎gpI */
	if((ret = sceHTTPTerminate()) &lt; 0){
		printf("sceHTTPTerminate() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	return 0;

}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_2">
<a href="#Heading3_2"> 2. </a>2 <b>IvVwb_̒ǉ</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ł́AftHgňȉ̃IvVwb_ HTTP NGXgɒǉ܂B<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>wb_</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>l</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;HOST&nbsp;</td>
<td valign="TOP">&nbsp;ڑzXg&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Accept&nbsp;</td>
<td valign="TOP">&nbsp;*/*;q=0.01&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Accept-Encoding&nbsp;</td>
<td valign="TOP">&nbsp;gzip,compress&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Accept-Charset&nbsp;</td>
<td valign="TOP">&nbsp;iso-8859-1;q=0.01&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;User-Agent&nbsp;</td>
<td valign="TOP">&nbsp;sceHTTPSetOption() ɂݒl&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>sceHTTPSetRedirection() ɂă_CNg̐ݒĂꍇ</b><br></h4></div>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>wb_</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>l</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Pragma&nbsp;</td>
<td valign="TOP">&nbsp;no-cache&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Cache-Controll&nbsp;</td>
<td valign="TOP">&nbsp;no-cache&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>method  POST ̏ꍇŃ{fB URL GR[hĂꍇ</b><br></h4></div>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>wb_</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>l</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Content-Type&nbsp;</td>
<td valign="TOP">&nbsp;application/x-www-form-urlencoded&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>method  POST ̏ꍇ</b><br></h4></div>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>wb_</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>l</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Content-Length&nbsp;</td>
<td valign="TOP">&nbsp;{fB̃oCg&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>sceHTTPSetBasicAuth() ɂăx[VbNF؂sȂAsceHTTPSetDigestAuth() ɂă_CWFXgF؂sȂꍇ</b><br></h4></div>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>wb_</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>l</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Authorization&nbsp;</td>
<td valign="TOP">&nbsp;Fؒl&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>sceHTTPSetCookie() ɂăNbL[w肵ꍇ</b><br></h4></div>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>wb_</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>l</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Cookie&nbsp;</td>
<td valign="TOP">&nbsp;NbL[&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">AvP[VL̃wb_ɔCӂ̒lw肵ꍇA͏LȊÕwb_ǉꍇ́A܂sceHTTPAddHeaderList() ɂăwb_Alw肵ƁAsceHTTPSetOption()  sceHTTPO_RequestHeaders R[h ɂĒǉ܂B<br>AL̂悤ɐݒp API ʂɗpӂĂwb_́A API Őݒ肵܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	sceHTTPHeaderList_t *list;

	/* NCAg\̂쐬 */
	client = sceHTTPCreate();

	/* wb_Xg X-XXX: foobar ǉ */
	if((list = sceHTTPAddHeaderList(NULL, "X-XXX", "foobar")) == NULL){
		printf("sceHTTPAddHeaderList() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	/* wb_XgNCAg\̂ɓo^ */
	if(sceHTTPSetOption(client, sceHTTPO_RequestHeaders, list, 0) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* User-Agent: wb_ "SCEI Browser 1.0" Ƃ */
	if(sceHTTPSetOption(client, sceHTTPO_ClientName, "SCEI Brower 1.0") &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_3">
<a href="#Heading3_2"> 2. </a>3 <b>HTTP X|X̃IvVwb_Aу{fB̎擾</b><br>
</a>
</h3>
<div style="margin-left:50px;">HTTP X|XɊ܂܂IvVwb_擾ɂ́AsceHTTPResponse_t \̂̃o headers QƂ܂BHTTP X|X̃{fB擾ɂ́AHTTP X|X\̂̃o entity QƂ܂B{fB̒́Ao length 擾ł܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	sceHTTPResponse_t *response;
	sceHTTPHeaderList_t *list;
	int i;

	/* HTTP X|X擾 */
	response = sceHTTPGetResponse(client);

	/* IvVwb_Q */
	for(list = response-&gt;headers; list != NULL; list = sceHTTPNextHeader(list)){
		printf("response header:\n");
		printf("%s: %s\n", list-&gt;name, list-&gt;value);
	}

	/* {fB擾 */
	printf("response body:\n");
	for(i = 0; i &lt; response-&gt;length; i++)
		printf("%c", response-&gt;entity[i]);
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_4">
<a href="#Heading3_2"> 2. </a>4 <b>HTTPNGXg{fB̐ݒ</b><br>
</a>
</h3>
<div style="margin-left:50px;">POST\bh̍ہAHTTP NGXg̃{fB sceHTTPSetOption() sceHTTPO_RequestEntity R[hpĐݒ肵܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	char entity[256];

	/* NCAg\̂쐬 */
	client = sceHTTPCreate();

	/* NGXg{fBe̐ݒ */
	strncpy(entity, "foo bar", 256);

	/* NGXg{fBݒ肷 */
	if(sceHTTPSetOption(client, sceHTTPO_RequestEntity, entity, strlen(entity), sceHTTPInputF_LINK) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_5">
<a href="#Heading3_2"> 2. </a>5 <b>^CAEgݒAA{[g</b><br>
</a>
</h3>
<div style="margin-left:50px;">T[o HTTP X|XԂėȂꍇɔāA^CAEgݒ肷邱Ƃł܂BftHgł̓^CAEgl͖łB<br><br>^CAEgɂ́AHTTP X|Xwb_擾܂ł"X|Xwb_擾^CAEg" ƁAX|X{fB擾܂ł "X|Xf[^擾^CAEg" 2ނ܂B<br><br>܂AsceHTTPAbortRequest() ɂHTTP A{[g邱Ƃł܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;

	/* NCAg\̂쐬 */
	client = sceHTTPCreate();

	/* ^CAEgݒ肷(wb_60bA{fB120bƂ) */
	if(sceHTTPSetOption(client, sceHTTPO_ResponseTimeout, 60) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	if(sceHTTPSetOption(client, sceHTTPO_TransferTimeout, 120) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_6">
<a href="#Heading3_2"> 2. </a>6 <b>vLVݒ</b><br>
</a>
</h3>
<div style="margin-left:50px;">vLVoRł̐ڑACuŒ񋟂Ă܂BvLV𗘗pɂ́AړI URI ɉăvLVT[o URINCAg\̂ɐݒ肵܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	sceHTTPParsedURI_t *p;

	/* NCAg\̂쐬 */
	client = sceHTTPCreate();

	/* vLV URI (http://proxy.foobar.com)  HTTP Cup
		URI \̂ɕϊ */
	if((p = sceHTTPParseURI("http://proxy.foobar.com", 0)) == 0){
		printf("sceHTTPParseURI() failed.\n");
		ERR_STOP;
	}
	/* vLV URI NCAg\̂ɐݒ肷 */
	if(sceHTTPSetOption(client, sceHTTPO_ProxyURI, p) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_7">
<a href="#Heading3_2"> 2. </a>7 <b>mubLO[h</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ł́AftHgł HTTP NGXg𑗐MĂHTTP X|XM܂ŃubN܂AmubNő҂Ƃł܂B̏ꍇAHTTP X|XMIɌĂ΂R[obN֐炩ߓo^Ă܂B̂ƂR[obN֐̃[U`^ĂƂł܂B̈̒lR[obN֐Ă΂Ƃ̑O̒lɂȂ܂B<br><br>mubLO̐ݒ sceHTTPOption()  sceHTTPO_BlockingModeR[hŁAIR[obN֐ƃ[U`̓o^ sceHTTPOption() sceHTTPO_EndOfTransactionCB R[hōsȂ܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	static void end_cb(sceHTTPClient_t *p, int flags, void *uopt){
		...
	}

	sceHTTPClient_t *client;
	void *uopt;

	/* NCAg\̂쐬 */
	client = sceHTTPCreate();

	/* mubLO[hɐݒ肷 */
	if(sceHTTPSetOption(client, sceHTTPO_BlockingMode, 0) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	/* IR[obN֐ƃ[U`o^ */
	uopt = ...;
	if(sceHTTPSetOption(client, sceHTTPO_EndOfTransactionCB, end_cb, uopt) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_8">
<a href="#Heading3_2"> 2. </a>8 <b>_CNV</b><br>
</a>
</h3>
<div style="margin-left:50px;">T[o Location wb_ɂă_CNV̎wꍇACu URI \̂ɕϊANCAg\̂ɔf API pӂĂ܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	sceHTTPResponse_t *response;
	sceHTTPParsedURI_t *p;
	char **locations;
	int ret;

	/* HTTP X|X擾 */
	response = sceHTTPGetResponse(client);

	/* IBRlNVؒf */
	sceHTTPClose(client);

	/* _CNV̔ */
	switch(response-&gt;code){
	case sceHTTPC_MultipleChoices:
	case sceHTTPC_MovedPermanentry:
	case sceHTTPC_Found:
	case sceHTTPC_SeeOther:
	case sceHTTPC_TemporaryRedirect:
	case sceHTTPC_UseProxy:
		/* Location wb_ URI 𕶎zŎ擾 */
		if((locations = (char **)sceHTTPParseLocations(response)) == NULL){
			printf("can't redirect.\n");
			ERR_STOP;
		}

		/* Ƃ Location wb_1Ԗڂ URI IĂ݂ */
		if((p = sceHTTPParseURI(locations[0], (sceHTTPParseURI_FILENAME
			| sceHTTPParseURI_SEARCHPART))) == NULL){
			printf("bad URI.\n");
			ERR_STOP;
		}

		/* _CNg URI z */
		if((ret = sceHTTPFreeLocations(locations)) &lt; 0){
			printf("sceHTTPFreeLocations() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}

		/* _CNg URI NCAg\̂ɔf */
		if((ret = sceHTTPSetRedirection(client, p,
		                    (response-&gt;code == sceHTTPC_UseProxy))) &lt; 0){
			printf("sceHTTPSetRedirection() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}

		/* NCAg\̂ď */
		if((ret = sceHTTPCleanUpResponse(client)) &lt; 0){
			printf("sceHTTPCleanUpResponse() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}
		/* NGXgwb_[Sĉ */
		if(sceHTTPSetOption(client, sceHTTPO_RequestHeaders, NULL, 1) &lt; 0){
			printf("sceHTTPSetOption() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}

		/* _CNgɍĐڑ */
		if(sceHTTPOpen(client) &lt; 0){
			printf("sceHTTPOpen() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}

		...

	default:
		break;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_9">
<a href="#Heading3_2"> 2. </a>9 <b>F؏</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttṕA_CWFXgF؁Ax[VbNF؂T|[gĂ܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	sceHTTPResponse_t *response;
	sceHTTPAuthList_t *auth_list;
	sceHTTPDigest_t dig;
	int ret;

	/* HTTP X|X擾 */
	response = sceHTTPGetResponse(client);

	/* IBRlNVؒf */
	sceHTTPClose(client);

	/* F؏̔ */
	switch(response-&gt;code){
	case sceHTTPC_Unauthorized:
		/* HTTP F؍\̂擾 */
		if((auth_list = sceHTTPParseAuth(response)) == NULL){
			printf("can't get auth info.\n");
			ERR_STOP;
		}

		/* Ƃ www-authenticate wb_1ԖڂIĂ݂ */
		if(auth_list-&gt;auth.type == sceHTTPAuth_BASIC){
			/* x[VbNF */
			sceHTTPSetBasicAuth(client, "foo", "bar", 0);
		}
		else{
			/* _CWFXgF */

			/* _CWFXgv\̂ݒ */
			dig.username = "foo";
			dig.password = "bar";
			...

			/* _CWFXgF؂NCAg\̂ɐݒ肷 */
			if((ret = sceHTTPSetDigestAuth(client, &dig, 0)) &lt; 0){
				printf("sceHTTPSetDigestAuth() failed.(%d)\n",
					sceHTTPGetClientError(client));
				ERR_STOP;
			}
		}

		/* F؍\̂ */
		if((ret = sceHTTPFreeAuthList(auth_list)) &lt; 0){
			printf("sceHTTPFreeAuthList() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}

		/* NCAg\̂ď */
		if((ret = sceHTTPCleanUpResponse(client)) &lt; 0){
			printf("sceHTTPCleanUpResponse() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}
		/* NGXgwb_[Sĉ */
		if(sceHTTPSetOption(client, sceHTTPO_RequestHeaders, NULL, 1) &lt; 0){
			printf("sceHTTPSetOption() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}

		/* T[oɍĐڑ */
		if(sceHTTPOpen(client) &lt; 0){
			printf("sceHTTPOpen() failed.(%d)\n",
				sceHTTPGetClientError(client));
			ERR_STOP;
		}

		...

	default:
		break;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_10">
<a href="#Heading3_2"> 2. </a>10 <b>NbL[</b><br>
</a>
</h3>
<div style="margin-left:50px;">T[oNbL[ԂėꍇAsceHTTPParseCookie() ɂĂ\̂ƂĎ擾AsceHTTPSetCookie() ŃNCAg\̂ɔfł܂BĐڑɗLłB<br> sceHTTPParseCookie()  sceHTTPSetCookie() ̓NbL[ɂăpXAhCALȂǂ̍Œ̃`FbNs܂B̂ sceHTTPParseCookie() Ŏ擾NbL[Xĝ܂sceHTTPSetCookie() ̈ƂƃZLeBvCoV[̖N\邽߁AKvȃNbL[̐`FbN̓AvP[VōsȂĉB<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	sceHTTPResponse_t *response;
	sceHTTPCookieList_t *cookie;
	int ret;

	/* HTTP X|X擾 */
	response = sceHTTPGetResponse(client);

	/* IBRlNVؒf */
	if((ret = sceHTTPClose(client)) &lt; 0){
		printf("sceHTTPClose() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* NbL[擾 */
	if((cookie = sceHTTPParseCookie(client, response)) == NULL){
		return 0;
	}

	/* NCAg\̂ď */
	if((ret = sceHTTPCleanUpResponse(client)) &lt; 0){
		printf("sceHTTPCleanUpResponse() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	/* NGXgwb_[Sĉ */
	if(sceHTTPSetOption(client, sceHTTPO_RequestHeaders, NULL, 1) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* NbL[̐̃`FbN */
	...

	/* NbL[NCAg\̂ɐݒ */
	if((ret = sceHTTPSetCookie(client, cookie)) &lt; 0){
		printf("sceHTTPSetCookie() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	/* NbL[\̂ */
	if((ret = sceHTTPFreeCookieList(cookie)) &lt; 0){
		printf("sceHTTPFreeCookieList() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* T[oɍĐڑ */
	if(sceHTTPOpen(client) &lt; 0){
		printf("sceHTTPOpen() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

</pre></font></div>
<div style="margin-left:50px;">NbL[̐`FbNɕ֗Ȋ֐ƂsceHTTPFilterCookieList֐pӂĂ܂B̊֐gꍇAAvP[Vł͂炩ߑINbL[̏^tB^֐pӂ܂BႦ<br></div>
        <div style="margin-left:80px;"><pre><font size=3>
int filter(sceHTTPCookie_t *cp, void *arg){
	char *host = (char *)arg;
	if(host == NULL || cp-&gt;domain == NULL ||
			strlen(host) &lt; strlen(cp-&gt;domain))
		return(0);
	host += strlen(host) - strlen(cp-&gt;domain)
	return(strcmp(host, cp-&gt;domain) == 0);
}
</pre></font></div>
<div style="margin-left:50px;"><br>ƒ`<br><br>cooked_cookie = sceHTTPFilterCookieList(cookie, filter, hostname);<br><br>ƌĂяoƂ cooked_cookie Ɍ̃NbL[XghChostnameɃ}b`悤ȃNbL[݂̂̃XgV쐬邱Ƃł܂B<br></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_11">
<a href="#Heading3_2"> 2. </a>11 <b>MIME</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ł́AMIME }`p[gꂽf[^擾̂߂MIME @\񋟂Ă܂B<br>MIMEł́AMIME }`p[gꂽhLgtB^ƂTOp܂BtB^̓}`p[g̊eKw1݂܂B<br><br>AvP[V͂܂AΏۂMIMEhLgɑ΂ă[gtB^쐬܂B<br>̃[gtB^ɑ΂ sceHTTPMimeFilterParseHeaders() Ńwb_sȂAsceHTTPMimeFilterApply() Ŋep[gAtB^\̂Ɏ擾Ă܂B<br>sceHTTPMimeFilterParseHeaders()AsceHTTPMimeFilterApply() JԂɁÅKẘep[gɏĂ܂B<br><br>qKwꍇ́AqKwɑ΂tB^sceHTTPMimeFilterParseHeaders() ŎIɐ܂BqKw̍Ō̃p[g sceHTTPMimeFilterApply() IۂɎqtB^͎Iɉ܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	sceHTTPClient_t *client;
	sceHTTPResponse_t *response;
	sceHTTPMimeFilter_t *filter;
	int ret;

	/* HTTP X|X擾 */
	response = sceHTTPGetResponse(client);

	/* HTTP X|Xɑ΂āAMIME [gtB^쐬 */
	if((filter = sceHTTPMimeFilterCreate(sceHTTPMimeFilter_STRING,
		(void *)response-&gt;entity, response-&gt;length,
		sceHTTPMimeFilter_STRING, (void *)0)) == NULL){
		printf("sceHTTPMimeFilterCreate() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* MIME wb_͂A[gtB^̃Xg
		Tup[g̃tB^ǉ */
	if((ret = sceHTTPMimeFilterParseHeaders(filter)) &lt; 0){
		printf("sceHTTPMimeFilterParseHeaders() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	/* Tup[g1ɑ΂ďsȂB{́AqKw݂̑
		ׂđ݂Ȃ炻̏Kv邪Ał
		tbgɃp[g݂ƂOŏ */
	if((ret = sceHTTPMimeFilterApply(filter, NULL)) &lt; 0){
		printf("sceHTTPMimeFilterApply() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	/* Tup[g1̃wb_Xg */
	if((ret = sceHTTPFreeHeaderList(filter-&gt;headers)) &lt; 0){
		printf("sceHTTPFreeHeaderList() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	filter-&gt;headers = NULL;

	/* Tup[g2ɑ΂ďsȂ */
	if((ret = sceHTTPMimeFilterApply(filter, NULL)) &lt; 0){
		printf("sceHTTPMimeFilterApply() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	/* Tup[g2̃wb_Xg */
	if((ret = sceHTTPFreeHeaderList(filter-&gt;headers)) &lt; 0){
		printf("sceHTTPFreeHeaderList() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
	filter-&gt;headers = NULL;

	...
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_12">
<a href="#Heading3_2"> 2. </a>12 <b>`NM</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ł́AHTTP/1.1 ̃`N`GR[fBO̎MɑΉĂ܂B<br>̓Iɂ́AsceHTTPSetOption()  sceHTTPO_ReceiveChunkCB R[hɂă`NM̃R[obN֐ݒł܂B̂ƂR[obN֐̃[U`^ĂƂł܂B̈̒l`NM̃R[obN֐Ă΂Ƃ̑l̒lɂȂ܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	static void end_cb(sceHTTPClient_t *client, int flags, void *uopt){
		...
	}

	static void chunk_cb(sceHTTPClient_t *client, char *cdata, int clen, void *uopt){
		...
	}

	sceHTTPClient_t *client;
	void *uopt;

	/* NCAg\̂쐬 */
	client = sceHTTPCreate();

	uopt = ...;
	/* `NMR[obN֐ƃ[U`ݒ肷 */
	if(sceHTTPSetOption(client, sceHTTPO_ReceiveChunkCB, chunk_cb, uopt) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}
</pre></font></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_13">
<a href="#Heading3_2"> 2. </a>13 <b>GR[hAfR[h</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp̓{fB̃GR[hAfR[ĥ߂̃[`񋟂Ă܂BT|[gĂGR[hƃGR[hAfR[h֐͈ȉ̒ʂłB<br></div>
<div style="margin-left:90px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;EBase64&nbsp;</td>
<td valign="TOP">&nbsp;sceBASE64Encoder(), sceBASE64LineDecoder()&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Equoted-printable&nbsp;</td>
<td valign="TOP">&nbsp;sceQPrintableEncoder(), sceQPrintableLineDecoder()&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;Eurl-encode&nbsp;</td>
<td valign="TOP">&nbsp;sceURLEscape(), sceURLUnescape()&nbsp;</td>
</tr>
</table>
</div>

<!-- o@SCo -->
<h3>
<a name="Heading4_2_14">
<a href="#Heading3_2"> 2. </a>14 <b>t@CɂM</b><br>
</a>
</h3>
<div style="margin-left:50px;">傫ȃt@C̃_E[hȂǃɉ̌ʂƂłȂꍇ̂߂ɁAX|X̃GeBeB({fB)t@CɏoƂł܂B<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>	/* ݉\Ƃăt@CI[v */
	fd = sceOpen(filename, SCE_WRONLY|SCE_CREAT|SCE_TRUNC);
    	
	/* NCAg\̂쐬 */
	client = sceHTTPCreate();

	uopt = ...;
	/* [Jt@CfBXNv^ݒ肷 */
	if(sceHTTPSetOption(client, sceHTTPO_LocalFile, fd) &lt; 0){
		printf("sceHTTPSetOption() failed.(%d)\n",
			sceHTTPGetClientError(client));
		ERR_STOP;
	}

	...

	/* t@CN[Y */
	sceClose(fd);
</pre></font></div>
<div style="margin-left:50px;"><br>ftHgł libhttp̓t@Cւ̃Cg֐Ƃ sceWrite ݒ肳ꂽ[Jt@CfBXNv^Ăяo܂BCuŐݒ肳ꂽ[Jt@CfBXNv^ĝ͂̂Ƃł̂ŁÃ[Jt@CfBXNv^Ƃă\PbgfBXNv^w肵AsceWrite Ɠ`̃Cg֐^Đݒ肷邱Ƃŏo\PbgƂ邱Ƃł܂B<br></div>

<!-- o@RCߌo -->
<a name="Heading3_3">
<h2>
 3 <b>ӎ</b>
<hr noshade>
</h2>


<!-- o@SCo -->
<h3>
<a name="Heading4_3_1">
<a href="#Heading3_3"> 3. </a>1 <b>G[R[hɂ</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ŃG[NꍇAe֐̕Ԃl̓G[lƂȂAڍׂȃG[R sceHTTPGetClientError() ɂĎ擾ł܂B<br>܂CũG[ł͂ȂAHTTP ŋK肳Ă鉞R[h̊eG[ĺAsceHTTPErrorString() ɂĎ擾ł܂B<br>sceHTTPGetClientError()̕ԂlsceHTTPError_SOCKETA܂sceHTTPError_CONNECTꍇCɏڍׂnetglueCł̃G[R[h sceHTTPGetSocketError() ɂĎ擾ł܂B<br>sceHTTPOpen() ֐sAT[oڑ₽ꂽꍇɂ́Ǎ secHTTPRequest() ֐̌ĂяoԂl -1 ŎssceHTTPGetClientError() ֐Ŏ擾łl sceHTTPError_CONNECTƂȂ邱Ƃ܂B ̏ꍇ sceHTTPGetSocketError() ̓G[̗R܂B<br>sceHTTPGetSocketError() ̎G[R[ḧӖɂĂ netgluehLgQƂĂB<br></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_3_2">
<a href="#Heading3_3"> 3. </a>2 <b>[UG[WFgɂ</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttp ł́AftHg User-Agent wb_lƂ"unknown (sceHTTPLib-X.X.X)" (X.X.X ̓o[Wԍ) pӂĂ܂B<br>̓Tvpr݂̂̒lł̂ŁA^CgŎgpۂɂsceHTTPSetOption()  sceHTTPO_ClientName R[hɂUser-Agent lK؂ɏĉB<br></div>

<!-- o@SCo -->
<h3>
<a name="Heading4_3_3">
<a href="#Heading3_3"> 3. </a>3 <b>libhttpCuł̃Xbhɂ</b><br>
</a>
</h3>
<div style="margin-left:50px;">libhttpł́AIɃXbh𐶐܂B̂ EE kernel ̃Xbhő吔Ȃ悤ɒӂĉBIɐXbh̐ sceHTTPCreate()  2 AmubLO[hsceHTTPRequest()  1 łB Ȃ̃Xbh̗Dx͊֐sceHTTPGetOption(), sceHTTPSetOption() ɂĎ擾Eݒ\łB<br></div>
<p><p><hr>
<div ALIGN="right">
    Copyright (c) 2002 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
