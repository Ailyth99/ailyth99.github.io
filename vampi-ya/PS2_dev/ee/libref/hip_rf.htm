<html lang="ja">
<!-- 見出し　１，部見出し -->
<head>

<script language="JavaScript">
<!--
  function startFixed(){
    fixedLAYER('fixedLay0','rightBottom',-35,-35)
  }

  var ie= !!document.all
  var n4= !!document.layers
  var w3c=!!document.getElementById
  var mac45 
    = navigator.userAgent.indexOf('MSIE 4.5; Mac_PowerPC')

  if(document.layers)window.onresize=resizeFunc
  function resizeFunc(e){location.reload()}

  function iniFunc(){
    if(ie&&!(mac45!=-1))window.onscroll = startFixed
    startFixed()
  }

  var tid=new Array()

  function fixedLAYER(layName,posString,offSetX,offSetY){

    offSetX = parseInt(offSetX,10)
    offSetY = parseInt(offSetY,10)

 if( posString == 'rightBottom' ){

      if(ie) offLeft = document.body.clientWidth   + offSetX
      else   offLeft = window.innerWidth           + offSetX
      if(ie) offTop  = document.body.clientHeight  + offSetY
      else   offTop  = window.innerHeight          + offSetY

    }
    else {

      if(ie) offLeft =                               offSetX
      else   offLeft =                               offSetX
      if(ie) offTop  =                               offSetY
      else   offTop  =                               offSetY

    }

    offLeft = parseInt(offLeft)
    offTop  = parseInt(offTop)

    if(document.all){
      var mx = parseInt(document.body.scrollLeft +offLeft)
      var my = parseInt(document.body.scrollTop  +offTop)
    } else {
      var mx = parseInt(self.pageXOffset+offLeft)
      var my = parseInt(self.pageYOffset+offTop)

    }

    moveLAYER(layName,mx,my)

    if(!(ie&&!(mac45!=-1)))
      setTimeout("fixedLAYER('"+layName+"','"+posString
                   +"','" +offSetX+"','"+offSetY+"')",100)
  }

  function moveLAYER(layName,x,y){
      
      if(document.getElementById){
        document.getElementById(layName).style.left=x
        document.getElementById(layName).style.top=y
      }
      else if(document.all){
        document.all(layName).style.pixelLeft=x
        document.all(layName).style.pixelTop=y
      }
      else if(document.layers)
        document.layers[layName].moveTo(x,y)
  }

// -->
</script>

<script language="JavaScript">
<!--
  function lj(ch,fm)
  {
    if ( parent.index ) {
      if ( ch == "libref" ){ parent.index.location.href="../libref/category.htm"; }
      else if ( ch == "../ee/libref" ){ parent.index.location.href="../../ee/libref/category.htm"; }
      else if ( ch == "../iop/libref" ){ parent.index.location.href="../../iop/libref/category.htm"; }
      else if ( ch == "../iop/overview" ){ parent.index.location.href="../../iop/overview/category.htm"; }
      else if ( ch == "../ee/overview" ){ parent.index.location.href="../../ee/overview/category.htm"; }
      else if ( ch == "overview" ){ parent.index.location.href="../overview/category.htm"; }
    }
    if ( parent.main ) {
      if ( fm != "" ){ parent.main.location.href=fm; }
    } else {
      if ( fm != "" ){ location.href=fm; }
    }
  }
//-->
</script>
<title>高レベルグラフィックスプラグインライブラリ</title>
<meta http-equiv="Content-Type"content= text/html; charset=Shift_JIS >
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="Author" Content="Sony Computer Entertainment Inc.">
<style type="text/css"><!--
    div.fixedLay{position:absolute;z-index:100;left:0px;top:0px;}
--></style>
</head>
<body onload="iniFunc()" bgcolor="#ffffff" text="#000000" >
<div id="fixedLay0" class="fixedLay">
<a href="#top"><img src="gif/link.gif" border="0" alt="TOP"></a>
</div>
<table WIDTH="100%">
<tr><td>
<h3>"PlayStation 2" Programmer Tool Runtime Library Release 2.5.3</h3>
</td>
</tr>
<tr><td align= right >
<script language="JavaScript">
<!--
   var p,q;
   if ( parent.index ) {
   p = parent.index.location;
   q = p.toString();
   result = q.match(/\/category\.htm/gi);
   if(result == "/category.htm"){
          document.writeln("<a href=\"JavaScript:lj('overview','../overview/libhip.htm')\"><img src=\"./gif/arrow.png\" border=0>ライブラリ概要</a>");
    }
}
// -->
</script>
</td></tr>
</table>
<hr noshade size=6>
<a name=Heading2>
<center><h1>
高レベルグラフィックスプラグインライブラリ
</h1></center>
</a>
<font size=4><b>構造体</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimeData_t"> sceHiPlugAnimeData_t<br></a></td>
<td>&nbsp;</td><td>Animeデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimeHead_t"> sceHiPlugAnimeHead_t<br></a></td>
<td>&nbsp;</td><td>Animeヘッダー共用体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimePreCalcArg_t"> sceHiPlugAnimePreCalcArg_t<br></a></td>
<td>&nbsp;</td><td>Animeプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugCameraData_t"> sceHiPlugCameraData_t<br></a></td>
<td>&nbsp;</td><td>Cameraデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClipData_t"> sceHiPlugClipData_t<br></a></td>
<td>&nbsp;</td><td>Clipデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClipHead_t"> sceHiPlugClipHead_t<br></a></td>
<td>&nbsp;</td><td>Clipヘッダー構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClutBumpData_t"> sceHiPlugClutBumpData_t<br></a></td>
<td>&nbsp;</td><td>ClutBumpデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClutBumpHead_t"> sceHiPlugClutBumpHead_t<br></a></td>
<td>&nbsp;</td><td>ClutBumpヘッダー構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClutBumpPreArg_t"> sceHiPlugClutBumpPreArg_t<br></a></td>
<td>&nbsp;</td><td>ClutBumpプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugFishEyeInitArg_t"> sceHiPlugFishEyeInitArg_t<br></a></td>
<td>&nbsp;</td><td>FishEyeプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugFishEyePreArg_t"> sceHiPlugFishEyePreArg_t<br></a></td>
<td>&nbsp;</td><td>FishEyeプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugHrchyData_t"> sceHiPlugHrchyData_t<br></a></td>
<td>&nbsp;</td><td>Hrchyデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugHrchyHead_t"> sceHiPlugHrchyHead_t<br></a></td>
<td>&nbsp;</td><td>Hrchyヘッダー構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugHrchyPreCalcArg_t"> sceHiPlugHrchyPreCalcArg_t<br></a></td>
<td>&nbsp;</td><td>Hrchyプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugLightMapInitArg_t"> sceHiPlugLightMapInitArg_t<br></a></td>
<td>&nbsp;</td><td>LightMapプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicroAttr_t"> sceHiPlugMicroAttr_t<br></a></td>
<td>&nbsp;</td><td>Micro属性定数<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicroData_t"> sceHiPlugMicroData_t<br></a></td>
<td>&nbsp;</td><td>Microデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicroInitArg_t"> sceHiPlugMicroInitArg_t<br></a></td>
<td>&nbsp;</td><td>Microプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicroLight_t"> sceHiPlugMicroLight_t<br></a></td>
<td>&nbsp;</td><td>MicroLight構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicroPreCalcArg_t"> sceHiPlugMicroPreCalcArg_t<br></a></td>
<td>&nbsp;</td><td>Microプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicroTbl_t"> sceHiPlugMicroTbl_t<br></a></td>
<td>&nbsp;</td><td>マイクロプログラム登録テーブル型<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugReflectPreArg_t"> sceHiPlugReflectPreArg_t<br></a></td>
<td>&nbsp;</td><td>Refelctプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugRefractPreArg_t"> sceHiPlugRefractPreArg_t<br></a></td>
<td>&nbsp;</td><td>Refractプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShadowBoxData_t"> sceHiPlugShadowBoxData_t<br></a></td>
<td>&nbsp;</td><td>ShadowBoxデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShadowMapInitArg_t"> sceHiPlugShadowMapInitArg_t<br></a></td>
<td>&nbsp;</td><td>ShadowMapプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeHead_t"> sceHiPlugShapeHead_t<br></a></td>
<td>&nbsp;</td><td>Shapeヘッダー共用体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeMatrix_t"> sceHiPlugShapeMatrix_t<br></a></td>
<td>&nbsp;</td><td>BASEMATRIXデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareData_t"> sceHiPlugShareData_t<br></a></td>
<td>&nbsp;</td><td>Shareデータ共用体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareHead_t"> sceHiPlugShareHead_t<br></a></td>
<td>&nbsp;</td><td>Shareヘッダー共用体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkinData_t"> sceHiPlugSkinData_t<br></a></td>
<td>&nbsp;</td><td>Skinデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkinHead_t"> sceHiPlugSkinHead_t<br></a></td>
<td>&nbsp;</td><td>Skinヘッダー構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DData_t"> sceHiPlugTex2DData_t<br></a></td>
<td>&nbsp;</td><td>Tex2Dデータ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DHead_t"> sceHiPlugTex2DHead_t<br></a></td>
<td>&nbsp;</td><td>Tex2Dヘッダー構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2dInitArg_t"> sceHiPlugTex2dInitArg_t<br></a></td>
<td>&nbsp;</td><td>Tex2Dプラグイン引数構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2Data_t"> sceHiPlugTim2Data_t<br></a></td>
<td>&nbsp;</td><td>Tim2データ構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2Head_t"> sceHiPlugTim2Head_t<br></a></td>
<td>&nbsp;</td><td>Tim2ヘッダー構造体<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2InitArg_t"> sceHiPlugTim2InitArg_t<br></a></td>
<td>&nbsp;</td><td>Tim2プラグイン引数構造体<br></td></tr>
</table><br>
<font size=4><b>関数</b></font>
<a name=#"Heading2"></a>
<hr border=1 width=100%><br>
<table>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#FRAME_PLUG"> FRAME_PLUG<br></a></td>
<td>&nbsp;</td><td>Frameプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnime"> sceHiPlugAnime<br></a></td>
<td>&nbsp;</td><td>Animeプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimeGetData"> sceHiPlugAnimeGetData<br></a></td>
<td>&nbsp;</td><td>Animeデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimeGetFrame"> sceHiPlugAnimeGetFrame<br></a></td>
<td>&nbsp;</td><td>Animeフレームデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimeGetHead"> sceHiPlugAnimeGetHead<br></a></td>
<td>&nbsp;</td><td>Animeヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimeGetKeyHead"> sceHiPlugAnimeGetKeyHead<br></a></td>
<td>&nbsp;</td><td>Animeキーヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugAnimeGetValue"> sceHiPlugAnimeGetValue<br></a></td>
<td>&nbsp;</td><td>Animeバリューデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugCamera"> sceHiPlugCamera<br></a></td>
<td>&nbsp;</td><td>Cameraプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugCameraGetData"> sceHiPlugCameraGetData<br></a></td>
<td>&nbsp;</td><td>Cameraデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClip"> sceHiPlugClip<br></a></td>
<td>&nbsp;</td><td>Clipプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClipGetData"> sceHiPlugClipGetData<br></a></td>
<td>&nbsp;</td><td>Clipデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClipGetHead"> sceHiPlugClipGetHead<br></a></td>
<td>&nbsp;</td><td>Clipヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClutBump"> sceHiPlugClutBump<br></a></td>
<td>&nbsp;</td><td>ClutBumpプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClutBumpGetData"> sceHiPlugClutBumpGetData<br></a></td>
<td>&nbsp;</td><td>ClutBumpデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClutBumpGetHead"> sceHiPlugClutBumpGetHead<br></a></td>
<td>&nbsp;</td><td>ClutBumpヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugClutBumpGetNormal"> sceHiPlugClutBumpGetNormal<br></a></td>
<td>&nbsp;</td><td>ClutBump法線テーブル取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugFishEye"> sceHiPlugFishEye<br></a></td>
<td>&nbsp;</td><td>FishEyeプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugHrchy"> sceHiPlugHrchy<br></a></td>
<td>&nbsp;</td><td>Hrchyプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugHrchyGetData"> sceHiPlugHrchyGetData<br></a></td>
<td>&nbsp;</td><td>Hrchyデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugHrchyGetHead"> sceHiPlugHrchyGetHead<br></a></td>
<td>&nbsp;</td><td>Hrchyヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugHrchyGetPivot"> sceHiPlugHrchyGetPivot<br></a></td>
<td>&nbsp;</td><td>Pivotデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugLightMap"> sceHiPlugLightMap<br></a></td>
<td>&nbsp;</td><td>LightMapプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicro"> sceHiPlugMicro<br></a></td>
<td>&nbsp;</td><td>Microプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugMicroGetData"> sceHiPlugMicroGetData<br></a></td>
<td>&nbsp;</td><td>Microデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugReflect"> sceHiPlugReflect<br></a></td>
<td>&nbsp;</td><td>Reflectプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugRefract"> sceHiPlugRefract<br></a></td>
<td>&nbsp;</td><td>Refractプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShadowBox"> sceHiPlugShadowBox<br></a></td>
<td>&nbsp;</td><td>ShadowBoxプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShadowBoxGetData"> sceHiPlugShadowBoxGetData<br></a></td>
<td>&nbsp;</td><td>ShadowBoxデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShadowMap"> sceHiPlugShadowMap<br></a></td>
<td>&nbsp;</td><td>ShadowMapプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShape"> sceHiPlugShape<br></a></td>
<td>&nbsp;</td><td>Shapeプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetDataHead"> sceHiPlugShapeGetDataHead<br></a></td>
<td>&nbsp;</td><td>Shapeデータヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetGeometryColor"> sceHiPlugShapeGetGeometryColor<br></a></td>
<td>&nbsp;</td><td>Geometry頂点カラー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetGeometryHead"> sceHiPlugShapeGetGeometryHead<br></a></td>
<td>&nbsp;</td><td>Geometryデータヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetGeometryNormal"> sceHiPlugShapeGetGeometryNormal<br></a></td>
<td>&nbsp;</td><td>Geometry法線データ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetGeometryST"> sceHiPlugShapeGetGeometryST<br></a></td>
<td>&nbsp;</td><td>Geometryテクスチャ座標取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetGeometryVertex"> sceHiPlugShapeGetGeometryVertex<br></a></td>
<td>&nbsp;</td><td>Geometry頂点データ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetHead"> sceHiPlugShapeGetHead<br></a></td>
<td>&nbsp;</td><td>Shapeヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetMaterialAttrib"> sceHiPlugShapeGetMaterialAttrib<br></a></td>
<td>&nbsp;</td><td>Materialアトリビュート取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetMaterialGiftag"> sceHiPlugShapeGetMaterialGiftag<br></a></td>
<td>&nbsp;</td><td>MaterialGiftag取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetMaterialHead"> sceHiPlugShapeGetMaterialHead<br></a></td>
<td>&nbsp;</td><td>Materialデータヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeGetMatrix"> sceHiPlugShapeGetMatrix<br></a></td>
<td>&nbsp;</td><td>マトリクスデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeInvisible"> sceHiPlugShapeInvisible<br></a></td>
<td>&nbsp;</td><td>Shape可視・不可視設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShapeMasterChainSetting"> sceHiPlugShapeMasterChainSetting<br></a></td>
<td>&nbsp;</td><td>Shapeのパケット列の設定変更関数<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShare"> sceHiPlugShare<br></a></td>
<td>&nbsp;</td><td>Shareプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareGetData"> sceHiPlugShareGetData<br></a></td>
<td>&nbsp;</td><td>Shareデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareGetDst"> sceHiPlugShareGetDst<br></a></td>
<td>&nbsp;</td><td>Share頂点・法線デストデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareGetHead"> sceHiPlugShareGetHead<br></a></td>
<td>&nbsp;</td><td>Shareヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareGetIndex"> sceHiPlugShareGetIndex<br></a></td>
<td>&nbsp;</td><td>Shareインデックスデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareGetShare"> sceHiPlugShareGetShare<br></a></td>
<td>&nbsp;</td><td>Shareデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugShareGetSrc"> sceHiPlugShareGetSrc<br></a></td>
<td>&nbsp;</td><td>Share頂点・法線ソースデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkin"> sceHiPlugSkin<br></a></td>
<td>&nbsp;</td><td>Skinプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkinGetBW"> sceHiPlugSkinGetBW<br></a></td>
<td>&nbsp;</td><td>Skin ボーンワールドインデックス取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkinGetData"> sceHiPlugSkinGetData<br></a></td>
<td>&nbsp;</td><td>Skinデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkinGetHead"> sceHiPlugSkinGetHead<br></a></td>
<td>&nbsp;</td><td>Skinヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkinGetLB"> sceHiPlugSkinGetLB<br></a></td>
<td>&nbsp;</td><td>Skin ローカルボーンマトリクス取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugSkinGetLW"> sceHiPlugSkinGetLW<br></a></td>
<td>&nbsp;</td><td>Skin ローカルワールドマトリクス取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2D"> sceHiPlugTex2D<br></a></td>
<td>&nbsp;</td><td>２Ｄテクスチャプラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DGetClut"> sceHiPlugTex2DGetClut<br></a></td>
<td>&nbsp;</td><td>CLUTデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DGetData"> sceHiPlugTex2DGetData<br></a></td>
<td>&nbsp;</td><td>テクスチャデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DGetEnv"> sceHiPlugTex2DGetEnv<br></a></td>
<td>&nbsp;</td><td>テクスチャ環境データ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DGetHead"> sceHiPlugTex2DGetHead<br></a></td>
<td>&nbsp;</td><td>TEX2Dヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DGetTexel"> sceHiPlugTex2DGetTexel<br></a></td>
<td>&nbsp;</td><td>TEX2Dテクセルデータ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTex2DSize"> sceHiPlugTex2DSize<br></a></td>
<td>&nbsp;</td><td>テクスチャサイズ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2"> sceHiPlugTim2<br></a></td>
<td>&nbsp;</td><td>Tim2プラグイン<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2GetData"> sceHiPlugTim2GetData<br></a></td>
<td>&nbsp;</td><td>Tim2データ取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2GetHead"> sceHiPlugTim2GetHead<br></a></td>
<td>&nbsp;</td><td>Tim2ヘッダー取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2GetName"> sceHiPlugTim2GetName<br></a></td>
<td>&nbsp;</td><td>Tim2テクスチャファイル名取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2GetNPictures"> sceHiPlugTim2GetNPictures<br></a></td>
<td>&nbsp;</td><td>Tim2ピクチャー数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2Num"> sceHiPlugTim2Num<br></a></td>
<td>&nbsp;</td><td>Tim2プラグインテクスチャファイル数取得<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2SetData"> sceHiPlugTim2SetData<br></a></td>
<td>&nbsp;</td><td>Tim2テクスチャデータ設定<br></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
<td><a href="#sceHiPlugTim2SetPicture"> sceHiPlugTim2SetPicture<br></a></td>
<td>&nbsp;</td><td>Tim2プラグインピクチャー設定<br></td></tr>
</table>

<!-- 見出し　１，部見出し -->
<br></td></tr></table></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>構造体</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimeData_t"><font size=6>sceHiPlugAnimeData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>hrchy</i>;
	int <i>numframe</i>;
	int <i>keyframe</i>;
	int <i>keyvalue</i>; 
}<b>sceHiPlugAnimeData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>hrchy</i>&nbsp;</td>
<td valign="TOP">&nbsp;HrchyデータID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>numframe</i>&nbsp;</td>
<td valign="TOP">&nbsp;Frame数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>keyframe</i>&nbsp;</td>
<td valign="TOP">&nbsp;KeyFrameデータID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>keyvalue</i>&nbsp;</td>
<td valign="TOP">&nbsp;KeyValueデータID&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugAnimeGetData ()が返す構造体です。<br>ANIME_DATAデータブロックの1つのAnimeデータ構造体を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimeHead_t"><font size=6>sceHiPlugAnimeHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeヘッダー共用体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef union {
	struct {
		u_int <i>type</i>;
		int <i>index</i>; 
		size_t <i>size</i>;
		int <i>num</i>;
	}key;
	struct {
		int <i>reserve</i>[3];
		int <i>num</i>;
	}top;
}<b>sceHiPlugAnimeHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>key</i>&nbsp;</td>
<td valign="TOP">&nbsp;KeyFrameデータ、またはKeyValueデータ1つを示す構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;type：補完タイプ、またはファンクションカーブの指定&nbsp;<br>&nbsp;index：KeyFrameデータ、またはKeyValueデータのインデックス&nbsp;<br>&nbsp;size：KeyFrameデータ、またはKeyValueデータのワードサイズ&nbsp;<br>&nbsp;num：KeyFrameデータ数、またはKeyValueデータ数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>top</i>&nbsp;</td>
<td valign="TOP">&nbsp;データブロックの最初のヘッダーを示す構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;num：それぞれのデータ数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugAnimeGetHead (),sceHiPlugAnimeGetKeyHead()が返す構造体です。<br>sceHiPlugAnimeGetHead()の場合、ANIME_DATA,KEYFRAME,KEYVALUEデータブロック最初のヘッダー情報を意味しtop構造体を使用します。<br>sceHiPlugAnimeGetKeyHead()の場合、KEYFRAMEまたはKEYVALUEにある1つのデータのヘッダー情報を意味しkey構造体を使用します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimePreCalcArg_t"><font size=6>sceHiPlugAnimePreCalcArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typdef struct {
	u_int <i>setframe</i>;
	int <i>setframe_enable</i>;
	u_int <i>currentframe</i>;
} <b>sceHiPlugAnimePreCalcArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>setframe</i>&nbsp;</td>
<td valign="TOP">&nbsp;Animeプラグインに渡すフレーム番号&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>setframe_enable</i>&nbsp;</td>
<td valign="TOP">&nbsp;1: setframeをAnimeプラグインに渡す&nbsp;<br>&nbsp;0: 渡さない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>currentframe</i>&nbsp;</td>
<td valign="TOP">&nbsp;Animeプラグインが返す&nbsp;<br>&nbsp;現在のフレーム番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">AnimeプラグインのSCE_HIG_PRE_PROCESSに渡す引数の型です。<br>sceHiPlug型の変数のargメンバにこの型の変数のアドレスをセットすることによって引数として渡すことができます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugCameraData_t"><font size=6>sceHiPlugCameraData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Cameraデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[4];
	sceVu0FVECTOR <i>screen</i>;
	sceVu0FVECTOR <i>window</i>;
	sceVu0FVECTOR <i>depth</i>;
	sceVu0FVECTOR <i>position</i>;
	sceVu0FVECTOR <i>rotation</i>;
	sceVu0FVECTOR <i>interest</i>;
	sceVu0FVECTOR <i>upvector</i>;
}<b>sceHiPlugCameraData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>screen</i>&nbsp;</td>
<td valign="TOP">&nbsp;幅, 高さ, 距離, クリップ追加サイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>window</i>&nbsp;</td>
<td valign="TOP">&nbsp;アスペクトx,y, 中心 x,y&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>depth</i>&nbsp;</td>
<td valign="TOP">&nbsp;最小値,最大値, ニア, ファー&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>position</i>&nbsp;</td>
<td valign="TOP">&nbsp;視点&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>rotation</i>&nbsp;</td>
<td valign="TOP">&nbsp;回転&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>interest</i>&nbsp;</td>
<td valign="TOP">&nbsp;注視点&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>upvector</i>&nbsp;</td>
<td valign="TOP">&nbsp;上向きベクトル&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugCameraGetData()が返す構造体です。<br>CAMERA_DATAデータブロックを表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClipData_t"><font size=6>sceHiPlugClipData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Clipデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR min;
	sceVu0FVECTOR max;
}<b>sceHiPlugClipData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>min</i>&nbsp;</td>
<td valign="TOP">&nbsp;バウンディングボックス最小サイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>max</i>&nbsp;</td>
<td valign="TOP">&nbsp;バウンディングボックス最大サイズ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugClipGetData()が返す構造体です。<br>CLIP_DATAデータブロックの1つのClipデータ構造体を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClipHead_t"><font size=6>sceHiPlugClipHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Clipヘッダー構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[3];
	int <i>num</i>;
}<b>sceHiPlugClipHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;Clipデータ数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugClipGetHead ()が返す構造体です。<br>CLIP_DATAデータブロックの最初のヘッダー情報を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClutBumpData_t"><font size=6>sceHiPlugClutBumpData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ClutBumpデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>shape</i>;
	int <i>tex2d</i>;
	int <i>normal</i>;
	int <i>reserve</i>;
}<b>sceHiPlugClutBumpData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>shape</i>&nbsp;</td>
<td valign="TOP">&nbsp;ShapeデータID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>tex2d</i>&nbsp;</td>
<td valign="TOP">&nbsp;Tex2DデータID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>normal</i>&nbsp;</td>
<td valign="TOP">&nbsp;NormalテーブルデータID&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugClutBumpGetData()が返す構造体です。<br>CLUTBUMP_DATAデータブロックの1つのClutBumpデータ構造を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClutBumpHead_t"><font size=6>sceHiPlugClutBumpHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ClutBumpヘッダー構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[3];
	int <i>num</i>;
}<b>sceHiPlugClutBumpHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;ClutBumpデータ数またはNormalテーブルデータ数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugClutBumpGetHead()が返す構造体です。<br>CLUTBUMP_DATAまたはCLUTBUMP_NORAMLデータブロックの最初のヘッダー情報を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClutBumpPreArg_t"><font size=6>sceHiPlugClutBumpPreArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ClutBumpプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR <i>light_dir</i>;
	sceVu0FVECTOR <i>shading</i>;
} <b>sceHiPlugClutBumpPreArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>light_dir</i>&nbsp;</td>
<td valign="TOP">&nbsp;ライト方向&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>shading</i>&nbsp;</td>
<td valign="TOP">&nbsp;シェーディングパラメータ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>light_dir</i>にはシェーディング計算のためのライトベクトルをセットします。<br><i>shading</i>には下記のそれぞれの要素が入ります。<br></div>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;shading[0]&nbsp;</td>
<td valign="TOP">&nbsp;ambientα値&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;shading[1]&nbsp;</td>
<td valign="TOP">&nbsp;diffuseα値&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;shading[2]&nbsp;</td>
<td valign="TOP">&nbsp;specularα値&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;shading[3]&nbsp;</td>
<td valign="TOP">&nbsp;shininess値&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;">これらのパラメータから下記の式を使ってCLUTαを算出します。(.)はベクトル内積。<br>CLUT α = ambientα + diffuseα * (light.normal) + specularα*(light.normal)^shininess<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugFishEyeInitArg_t"><font size=6>sceHiPlugFishEyeInitArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>FishEyeプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	u_int <i>zdepth</i>;
	float <i>rmin</i>;
	float <i>rmax</i>;
} <b>sceHiPlugFishEyeInitArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>zdepth</i>&nbsp;</td>
<td valign="TOP">&nbsp;Zバッファ格納フォーマット&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>rmin</i>&nbsp;</td>
<td valign="TOP">&nbsp;Zバッファリング時の最小半径&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>rmax</i>&nbsp;</td>
<td valign="TOP">&nbsp;Zバッファリング時の最大半径&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>zdepth</i>には、SCE_GS_PSMZ32, SCE_GS_PSMZ24,SCE_GS_PSM16, SCE_GS_PSM16Sのいずれかを指定します。<br><i>rmin</i>,<i>rmax</i>はZバッファリングを行うときの有効範囲を設定します。<br>もし視点座標系でのカメラ位置と頂点との間の距離がこの有効範囲内であればZバッファリングは正しく行われます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugFishEyePreArg_t"><font size=6>sceHiPlugFishEyePreArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>FishEyeプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR *<i>camera_pos</i>;
	sceVu0FVECTOR *<i>camera_zdir</i>;
	sceVu0FVECTOR *<i>camera_up</i>;
	float <i>tex_size</i>;
} <b>sceHiPlugFishEyePreArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>camera_pos</i>&nbsp;</td>
<td valign="TOP">&nbsp;視点位置のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>camera_zdir</i>&nbsp;</td>
<td valign="TOP">&nbsp;視線方向のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>camera_up</i>&nbsp;</td>
<td valign="TOP">&nbsp;垂直方向のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>tex_size</i>&nbsp;</td>
<td valign="TOP">&nbsp;レンダリングサイズ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>camera_pos</i>,<i>camera_zdir</i>,<i>camera_up</i>からワールドビューマトリクスを作成します。<br><i>tex_size</i>は実際のレンダリング矩形サイズとは異なった、魚眼レンズ効果による球状サイズを別途指定できます。ただしSCISSORレジスタが正しく設定されている必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugHrchyData_t"><font size=6>sceHiPlugHrchyData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Hrchyデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR <i>trans</i>;
	sceVu0FVECTOR <i>rot</i>; 
	sceVu0FVECTOR <i>scale</i>;
	int <i>shape</i>;
	int <i>parent</i>;
	int <i>child</i>;
	int <i>sibling</i>;
}<b>sceHiPlugHrchyData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>trans</i>&nbsp;</td>
<td valign="TOP">&nbsp;平行移動&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>rot</i>&nbsp;</td>
<td valign="TOP">&nbsp;回転&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>scale</i>&nbsp;</td>
<td valign="TOP">&nbsp;拡大縮小&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>shape</i>&nbsp;</td>
<td valign="TOP">&nbsp;ShapeデータID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>parent</i>&nbsp;</td>
<td valign="TOP">&nbsp;親階層のID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>child</i>&nbsp;</td>
<td valign="TOP">&nbsp;子階層のID。現在未使用&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>sibling</i>&nbsp;</td>
<td valign="TOP">&nbsp;兄弟階層のID。現在未使用&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugHrchyGetData()が返す構造体です。<br>HRCHY_DATAデータブロックの1つの階層構造を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugHrchyHead_t"><font size=6>sceHiPlugHrchyHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Hrchyヘッダー構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[2];
	u_int <i>rorder</i>;
	int <i>num</i>;
}<b>sceHiPlugHrchyHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>rorder</i>&nbsp;</td>
<td valign="TOP">&nbsp;回転順の指定、PIVOTの場合は未使用&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;HRCHYのデータ数、またはPIVOTのデータ数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugHrchyGetHead()が返す構造体です。<br>HRCHY_DATAまたはPIVOT_DATAデータブロックの最初のヘッダー情報を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugHrchyPreCalcArg_t"><font size=6>sceHiPlugHrchyPreCalcArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Hrchyプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FMATRIX <i>*root</i>;
} <b>sceHiPlugHrchyPreCalcArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>root</i>&nbsp;</td>
<td valign="TOP">&nbsp;ルート階層に乗算するマトリクスのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">HrchyプラグインのSCE_HIG_PRE_PROCESSに渡す引数の型です。<br>sceHiPlug型の変数のargメンバにこの型の変数のアドレスをセットすることによって引数として渡すことができます。<br>階層構造の最上層になるルート階層に任意のマトリクスを乗算することにより、ルートに続く階層の座標変換をコントロールすることができます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugLightMapInitArg_t"><font size=6>sceHiPlugLightMapInitArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>LightMapプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>width</i>;
	int <i>height</i>;
	int <i>fov</i>;
} <b>sceHiPlugLightMapInitArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>width</i>&nbsp;</td>
<td valign="TOP">&nbsp;LightMapテクスチャの幅&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>height</i>&nbsp;</td>
<td valign="TOP">&nbsp;LightMapテクスチャの高さ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>fov</i>&nbsp;</td>
<td valign="TOP">&nbsp;画角の基準, TRUEの時width, FALSEの時height&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>width</i>,<i>height</i>はライトマップとして使用するテクスチャのサイズを指定します。<br><i>fov</i>はテクスチャマトリクスを生成するための画角(field of view)の基準を<i>width</i>,<i>height</i>のどちらで行うかを指定します。<i>fov</i>=TRUEの時は<i>width</i>を、<i>fov</i>=FALSEの時は<i>height</i>を基準とします。テクスチャが正方形の場合はどちらを指定していても構いません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicroAttr_t"><font size=6>sceHiPlugMicroAttr_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Micro属性定数<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typdef enum {
	SCE_HIP_MICRO_ATTR_NONE,
	SCE_HIP_MICRO_ATTR_FGE,
	SCE_HIP_MICRO_ATTR_ANTI
} <b>sceHiPlugMicroAttr_t</b>;

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugMicroAttr_t型はマイクロプログラムの属性を指定するための定数です。<br>各属性値はbit値として扱われ、複数の属性を重複して持つことができます。<br>複数の属性を重複して持つマイクロプログラムの属性指定ではbit orをとることでおこなってください。<br><br>例： Fogを扱い、かつAntiを行うマイクロプログラムの属性<br></div>
<div style="margin-left:70px;">SCE_HIP_MICRO_ATTR_FGE | SCE_HIP_MICRO_ATTR_ANTI<br></div>
<div style="margin-left:50px;"><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>定数</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>意味</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_MICRO_ATTR_NONE&nbsp;</td>
<td valign="TOP">&nbsp;特別属性なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_MICRO_ATTR_FGE&nbsp;</td>
<td valign="TOP">&nbsp;フォグ属性&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_MICRO_ATTR_ANTI&nbsp;</td>
<td valign="TOP">&nbsp;アンチ属性&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicroData_t"><font size=6>sceHiPlugMicroData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Microデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FMATRIX <i>wscreen</i>;
	union {
		sceVu0FMATRIX <i>wview</i>;
		sceVu0FMATRIX <i>texproj</i>;
	}mtx;
	sceVu0FMATRIX <i>material</i>;
	float <i>camx</i>,<i>camy</i>,<i>camz</i>;
	float <i>aa1</i>;
	float <i>fogA</i>,<i>fogB</i>; 
	u_int <i>prmode</i>;
	int <i>reserve</i>;
	union {
		sceVu0FVECTOR <i>clip</i>;
		struct {
			float <i>texsize</i>;
			float <i>ZA</i>,<i>ZB</i>;
			int <i>reserve</i>;
		}fisheye;
	}clp;
	float <i>shift</i>;
	float <i>refidx</i>;
	float <i>zoom</i>; 
	float <i>zshift</i>;
	sceHiPlugMicroLight_t <i>light</i>[3];
} <b>sceHiPlugMicroData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>wscreen</i>&nbsp;</td>
<td valign="TOP">&nbsp;ワールドスクリーンマトリクス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>mtx</i>&nbsp;</td>
<td valign="TOP">&nbsp;特別なマトリクス領域を示す構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;wview：ワールドビューマトリクス&nbsp;<br>&nbsp;texproj：テクスチャプロジェクションマトリクス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>material</i>&nbsp;</td>
<td valign="TOP">&nbsp;マテリアルデータ。&nbsp;<br>&nbsp;この領域はShapeデータのマテリアルデータに&nbsp;<br>&nbsp;上書きされる&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>camx,y,z</i>&nbsp;</td>
<td valign="TOP">&nbsp;カメラ位置&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>aa1</i>&nbsp;</td>
<td valign="TOP">&nbsp;AA1カットオフ値&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>fogA,fogB</i>&nbsp;</td>
<td valign="TOP">&nbsp;フォグパラメータ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>prmode</i>&nbsp;</td>
<td valign="TOP">&nbsp;Gs PRMODEレジスタビット&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>clp</i>&nbsp;</td>
<td valign="TOP">&nbsp;クリップまたは魚眼レンズパラメータを示す構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;clip：クリップパラメータ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>fisheye</i>&nbsp;</td>
<td valign="TOP">&nbsp;魚眼レンズパラメータ構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;texsize：球面テクスチャサイズ&nbsp;<br>&nbsp;ZA,ZB：デプスパラメータ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>shift</i>&nbsp;</td>
<td valign="TOP">&nbsp;EmbossBumpテクスチャシフト量&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>refidx</i>&nbsp;</td>
<td valign="TOP">&nbsp;Refraction屈折率&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>zoom</i>&nbsp;</td>
<td valign="TOP">&nbsp;Reflection/Refractionテクスチャズームサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>zshift</i>&nbsp;</td>
<td valign="TOP">&nbsp;Reflection/Refraction Zシフト量&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>light</i>&nbsp;</td>
<td valign="TOP">&nbsp;平行光源、ポイントライト、スポットライト情報&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">MICRO_DATAデータブロック構造体です。<br>対応するマイクロプログラムにより必要となるパラメータは異なります。<br>ここでのマテリアルデータはSHAPE_DATAにあるマテリアルデータによって上書きされます。ここでは便宜上メンバ名を定義しています。<br>このデータブロックはMicroプラグインによりそのままVU1ローカルメモリに転送されます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicroInitArg_t"><font size=6>sceHiPlugMicroInitArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Microプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceHiPlugMicroTbl_t *<i>tbl</i>;
	u_int <i>tblnum</i>;
} <b>sceHiPlugMicroInitArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>tbl</i>&nbsp;</td>
<td valign="TOP">&nbsp;マイクロプログラムのアドレスおよび属性を定義している&nbsp;<br>&nbsp;テーブルへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>tblnum</i>&nbsp;</td>
<td valign="TOP">&nbsp;tblに存在する数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">MicroプラグインのSCE_HIG_INIT_PROCESSで受理される引数の型です。<br>sceHiPlug型の変数のargメンバにこの型の変数のアドレスをセットすることによって引数として渡すことができます。<br>この構造体をMicroプラグインに渡さない場合はデフォルトマイクロプログラムが選択されます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicroLight_t"><font size=6>sceHiPlugMicroLight_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>MicroLight構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR <i>dir</i>[4];
	sceVu0FVECTOR <i>pos</i>[4];
	sceVu0FVECTOR <i>col</i>[4];
}<b>sceHiPlugMicroLight_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>dir</i>&nbsp;</td>
<td valign="TOP">&nbsp;ライト方向&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>pos</i>&nbsp;</td>
<td valign="TOP">&nbsp;ライト位置&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>col</i>&nbsp;</td>
<td valign="TOP">&nbsp;ライトカラー＋1アンビエントカラー&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">MICRO_DATAの中のライト情報を表す構造体です。<br>平行光源の4番目のライトカラーがアンビエントカラーとなります。<br>平行光源のライト方向は転置になっているので注意してください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicroPreCalcArg_t"><font size=6>sceHiPlugMicroPreCalcArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Microプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typdef struct {
	int <i>micro</i>;
	float <i>anticutoff</i>;
	float <i>fogbegin</i>;
	float <i>fogend</i>;
} <b>sceHiPlugMicroPreCalcArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>micro</i>&nbsp;</td>
<td valign="TOP">&nbsp;転送（使用）するマイクロプログラム番号。&nbsp;<br>&nbsp;SCE_HIG_INIT_PROCESSで渡したテーブルの&nbsp;<br>&nbsp;先頭を0とした番号です。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>aticutoff</i>&nbsp;</td>
<td valign="TOP">&nbsp;マイクロプログラムに渡すアンチパラメータ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>fogbegin</i>&nbsp;</td>
<td valign="TOP">&nbsp;マイクロプログラムに渡すフォグパラメータ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>fogend</i>&nbsp;</td>
<td valign="TOP">&nbsp;マイクロプログラムに渡すフォグパラメータ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">MicroプラグインのSCE_HIG_PRE_PROCESSに渡す引数の型です。<br>sceHiPlug型の変数のargメンバにこの型の変数のアドレスをセットすることによって引数として渡すことができます。<br>メンバ<i>micro</i>に-1を与えた場合はマイクロプログラムの転送をしません。<br>メンバ<i>anticutoff</i>,<i>fogbegin</i>,<i>fogend</i>を使用する場合は対応したマイクロプログラムを登録している必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicroTbl_t"><font size=6>sceHiPlugMicroTbl_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マイクロプログラム登録テーブル型<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typdef struct {
	u_int *<i>micro</i>;
	u_int <i>attr</i>;
} <b>sceHiPlugMicroTbl_t</b>

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>micro</i>&nbsp;</td>
<td valign="TOP">&nbsp;マイクロプログラムのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>attr</i>&nbsp;</td>
<td valign="TOP">&nbsp;マイクロプログラムの属性&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">マイクロプログラムを登録するためのテーブルの型です。<br>Microプラグインが受理する引数型 sceHiPlugMicroInitArg_tのメンバtblは、この型の配列である必要があります。<br><i>attr</i>は sceHiPlugMicroAttr_tで定義されている定数のORである必要があります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugReflectPreArg_t"><font size=6>sceHiPlugReflectPreArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Refelctプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR *<i>camera_pos</i>;
	sceVu0FVECTOR *<i>camera_zdir</i>;
	sceVu0FVECTOR *<i>camera_up</i>;
	float <i>zoom</i>;
	float <i>z_shift</i>;
} <b>sceHiPlugReflectPreArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>camera_pos</i>&nbsp;</td>
<td valign="TOP">&nbsp;視点位置のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>camera_zdir</i>&nbsp;</td>
<td valign="TOP">&nbsp;視線方向のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>camera_up</i>&nbsp;</td>
<td valign="TOP">&nbsp;垂直方向のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>zoom</i>&nbsp;</td>
<td valign="TOP">&nbsp;拡大率&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>z_shift</i>&nbsp;</td>
<td valign="TOP">&nbsp;Zシフト量&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>camera_pos</i>,<i>camera_zdir</i>,<i>camera_up</i>からワールドビューマトリクスを作成します。<br><i>zoom</i>,<i>z_shift</i>はリフレクションする上で適切なSTベクトル算出のために使用します。<br>STベクトルの演算式は下記の式を用います。(.) はベクトル内積。<br></div>
<div style="margin-left:70px;">reflect=2*(normal,eye)-eye<br>reflect.x=reflect.x*zoom<br>reflect.y=reflect.y*zoom<br>m=sqrt(reflect.x^2+reflect.y^2+(reflect.z+z_shift)^2)<br>S= reflect.x/(2*m)+0.5<br>T= reflect.y/(2*m)+0.5<br></div>
<div style="margin-left:50px;"><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugRefractPreArg_t"><font size=6>sceHiPlugRefractPreArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Refractプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR *<i>camera_pos</i>;
	sceVu0FVECTOR *<i>camera_zdir</i>;
	sceVu0FVECTOR *<i>camera_up</i>;
	float <i>refract_index</i>;
	float <i>zoom</i>;
	float <i>z_shift</i>;
} <b>sceHiPlugRefractPreArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>camera_pos</i>&nbsp;</td>
<td valign="TOP">&nbsp;視点位置のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>camera_zdir</i>&nbsp;</td>
<td valign="TOP">&nbsp;視線方向のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>camera_up</i>&nbsp;</td>
<td valign="TOP">&nbsp;垂直方向のポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>refract_index</i>&nbsp;</td>
<td valign="TOP">&nbsp;屈折率&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>zoom</i>&nbsp;</td>
<td valign="TOP">&nbsp;拡大率&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>z_shift</i>&nbsp;</td>
<td valign="TOP">&nbsp;Zシフト量&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>camera_pos</i>,<i>camera_zdir</i>,<i>camera_up</i>はワールドビューマトリクスを作成ために用います。<br><i>zoom</i>,<i>z_shift</i>はリフレクションする上で適切なSTベクトル算出のために使用します。<br>STベクトルの演算式は下記の式を用います。(.) はベクトル内積。<br></div>
<div style="margin-left:70px;">refract=2*(refract_index*normal.eye)+eye<br>refract.x=refract.x*zoom<br>refract.y=refract.y*zoom<br>m=sqrt(refract.x^2+refract.y^2+(refract.z+z_shift)^2)<br>S= refract.x/(2*m)+0.5<br>T= refract.y/(2*m)+0.5<br></div>
<div style="margin-left:50px;"><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShadowBoxData_t"><font size=6>sceHiPlugShadowBoxData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ShadowBoxデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR <i>min</i>;
	sceVu0FVECTOR <i>max</i>;
	sceVu0FVECTOR <i>box</i>[8];
}<b>sceHiPlugShadowBoxData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>min</i>&nbsp;</td>
<td valign="TOP">&nbsp;バウンディングボックス最小サイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>max</i>&nbsp;</td>
<td valign="TOP">&nbsp;バウンディングボックス最大サイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>box</i>&nbsp;</td>
<td valign="TOP">&nbsp;演算後のバウンディングボックスサイズ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugShadowBoxGetData()が返す構造体です。<br>SHADOWBOX_DATAデータブロックの情報を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShadowMapInitArg_t"><font size=6>sceHiPlugShadowMapInitArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ShadowMapプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>width</i>;
	int <i>height</i>;
	u_int *<i>box</i>;
} <b>sceHiPlugShadowMapInitArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>width</i>&nbsp;</td>
<td valign="TOP">&nbsp;シャドーテクスチャの幅&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>height</i>&nbsp;</td>
<td valign="TOP">&nbsp;シャドーテクスチャの高さ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>box</i>&nbsp;</td>
<td valign="TOP">&nbsp;ShadowBoxへのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>width</i>,<i>height</i>はシャドーテクスチャのサイズを指定します。<br><i>box</i>はシャドーマトリクス生成に使用するバウンディングボックスです。<br>ShadowMapプラグインブロックがShadowBoxデータブロック(SCE_HIP_SHADOWBOX_DATA) を保持している場合はNULL指定でも構いません。<br>ShadowBoxはシャドーテクスチャのレンダリング元・シャドーオブジェクトの最大・最小サイズから対角線で構成されるバウンディングボックスです。<br>ShadowMapプラグインを使用する場合必ずこの構造体を与えてください。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeHead_t"><font size=6>sceHiPlugShapeHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shapeヘッダー共用体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef union {
	struct {
		int <i>id</i>;
		size_t <i>size</i>;
		u_int <i>prim</i>;
		int <i>num</i>;
	}geo;
	struct {
		int <i>id</i>;
		int <i>num</i>;
		int <i>tex_id</i>;
		int <i>tex_num</i>;
	}mat;
	struct {
		int <i>id</i>;
		size_t <i>size</i>;
		int <i>reserve</i>;
		int <i>num</i>;
	}dat;
	struct {
		int <i>reserve</i>[3];
		int <i>num</i>;
	}top;
}<b>sceHiPlugShapeHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>geo</i>&nbsp;</td>
<td valign="TOP">&nbsp;Geometryデータヘッダー構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;id：GeometryデータID&nbsp;<br>&nbsp;size：Geometryデータワードサイズ&nbsp;<br>&nbsp;prim：Gs PRIMレジスタビット&nbsp;<br>&nbsp;num：プリミティブ数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>mat</i>&nbsp;</td>
<td valign="TOP">&nbsp;Materialデータヘッダー構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;id：MaterialデータID&nbsp;<br>&nbsp;num：Materialデータ内Geometryデータ数&nbsp;<br>&nbsp;tex_id：Materialデータ内TexturデータID&nbsp;<br>&nbsp;tex_num：Materialデータ内Textureデータ数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>dat</i>&nbsp;</td>
<td valign="TOP">&nbsp;Shapeデータヘッダー構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;id：ShapeデータID&nbsp;<br>&nbsp;size：Shapeデータワードサイズ&nbsp;<br>&nbsp;num：Shapeデータ内Materialデータ数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>top</i>&nbsp;</td>
<td valign="TOP">&nbsp;SHAPE_DATAの最初のヘッダー情報を示す構造体、&nbsp;<br>&nbsp;またはBASEMATRIXの最初のヘッダー情報を示す構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;num：SHAPE_DATA内Shapeデータ数、または&nbsp;<br>&nbsp;　　　BASEMATRIX内Matrix数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugShapeGetHead() / sceHiPlugShapeGetDataHead() / sceHiPlugShapeGetMaterialHead() / sceHiPlugShapeGetGeometryHead()が返す共用体です。<br>カテゴリSHAPEに属するデータタイプSHAPE_DATA,BASEMATRIXのデータブロックのヘッダー情報を表します。<br>sceHiPlugShapeGetHead()の場合は、SHAPE_DATAまたはBASEMATRIXの最初のヘッダー情報を意味しtop構造体を使用します。<br>sceHiPlugShapeGetDataHead()の場合は、SHAPE_DATAの1つのShapeデータヘッダー情報を意味しdat構造体を使用します。<br>sceHiPlugShapeGetMaterialHead()の場合は、SHAPE_DATAの1つのMaterialデータヘッダー情報を意味しmat構造体を使用します。<br>sceHiPlugShapeGetGeometryHead()の場合は、SHAPE_DATAの1つのGeometryデータヘッダー情報を意味しgeo構造体を使用します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeMatrix_t"><font size=6>sceHiPlugShapeMatrix_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>BASEMATRIXデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[2];
	int <i>flags</i>;
	int <i>shap</i>e;
	sceVu0FMATRIX <i>local</i>;
	sceVu0FMATRIX <i>light</i>;
}<b>sceHiPlugShapeMatrix_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>flag</i>&nbsp;</td>
<td valign="TOP">&nbsp;Shapeデータ可視・不可視フラグ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>shape</i>&nbsp;</td>
<td valign="TOP">&nbsp;ShapeデータID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>local</i>&nbsp;</td>
<td valign="TOP">&nbsp;ローカルワールドマトリクス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>light</i>&nbsp;</td>
<td valign="TOP">&nbsp;ライトロテーションマトリクス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugShapeGetMatrix()が返す構造体です。<br>BASEMATRIXデータブロックの1つのマトリクス構造体を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareData_t"><font size=6>sceHiPlugShareData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shareデータ共用体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef union {
	struct {
		int <i>offset</i>;
		int <i>geomid</i>;
		int <i>reserve</i>;
		int <i>num</i>;
	}shr;
	struct {
		int <i>voffset</i>;
		int <i>vlength</i>;
		int <i>noffset</i>;
		int <i>nlength</i>;
	}dat;
}<b>sceHiPlugShareData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>shr</i>&nbsp;</td>
<td valign="TOP">&nbsp;SHAREVERTEX,SHARENORMALを示す構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;offset：SHAREVERTEX,SHARENORMALオフセット位置&nbsp;<br>&nbsp;geomid：GeometryデータID&nbsp;<br>&nbsp;num：SHAREVERTEX,SHARENORMALデータ数&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>dat</i>&nbsp;</td>
<td valign="TOP">&nbsp;SHARE_DATAを示す構造体&nbsp;<br>&nbsp;メンバは以下のとおりです。&nbsp;<br>&nbsp;voffset：VERTEXINDEXオフセット位置&nbsp;<br>&nbsp;vlength：VERTEXINDEXオフセット位置からの頂点長（数）&nbsp;<br>&nbsp;noffset：NORMALINDEXオフセット位置&nbsp;<br>&nbsp;nlength：NORMALINDEXオフセット位置からの法線長（数）&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugShareGetData(), sceHiPlugShareGetShare()が返す構造体です。<br>sceHiPlugShareGetData()の場合はSHARE_DATAを意味し、dat構造体を使用します。<br>sceHiPlugShareGetShare()の場合はSHAREVERTEX,SHARENORMALを意味し、shr構造体を使用します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareHead_t"><font size=6>sceHiPlugShareHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shareヘッダー共用体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[2];
	int <i>shape</i>;
	int <i>num</i>;
}<b>sceHiPlugShareHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>shape</i>&nbsp;</td>
<td valign="TOP">&nbsp;ShapeデータID&nbsp;<br>&nbsp;SHAREVERTEX,SHARENORMALの時のみ使用&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;それぞれのデータ数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugShareGetHead()が返す構造体です。<br>SHARE_DATA,<br>VERTEXINDEX,NORMALINDEX,<br>SRCDSTVERTEX,SRCDSTNORMAL<br>SHAREVERTEX,SHARENORMAL,<br>のそれぞれのデータブロックの最初のヘッダー情報を表す構造体です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkinData_t"><font size=6>sceHiPlugSkinData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skinデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceVu0FVECTOR <i>vertex</i>;
	sceVu0FVECTOR <i>normal</i>;
	sceVu0FVECTOR <i>weight</i>;
	int <i>matrix</i>[4];
	int <i>id</i>[4];
}<b>sceHiPlugClipData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>vertex</i>&nbsp;</td>
<td valign="TOP">&nbsp;頂点データ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>normal</i>&nbsp;</td>
<td valign="TOP">&nbsp;法線データ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>weight</i>&nbsp;</td>
<td valign="TOP">&nbsp;頂点の重み係数　最大４つ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>id</i>&nbsp;</td>
<td valign="TOP">&nbsp;重み係数に対応したBASEMATRIXにおけるボーンID&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugSkinGetData()が返す構造体です。<br>SKIN_DATAデータブロックの1つのSkinデータ構造体を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkinHead_t"><font size=6>sceHiPlugSkinHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skinヘッダー構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[2];
	int <i>func</i>;
	int <i>num</i>;
}<b>sceHiPlugSkinHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>func</i>&nbsp;</td>
<td valign="TOP">&nbsp;機能オプション&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;Skinデータ数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugSkinGetHead ()が返す構造体です。<br>SKIN_DATA,<br>SKIN_LB,<br>SKIN_LW<br>SKIN_BW,<br>のそれぞれのデータブロックの最初のヘッダー情報を表す構造体です。<br><br>メンバ<i>func</i>に関してはSKIN_DATAのときのみ使用します。<br><br></div>
<div style="margin-left:35px;"><ul>
         <li> <i>func</i> 下位16bit<br>スキンの法線の処理オプション<br>0: 法線の計算を正規化処理つきでおこなう<br>1: 法線の計算をおこなうが正規化処理はしない<br>2: reserved<br>3: 法線の計算をおこなわない
         <li> <i>func</i> 上位16bit<br>スキンをかける親 SHAPE の BASEMATRIX の形態オプション<br>0: 回転と移動のみを含み、４行目が {0,0,0,1} である行列に対応できる処理をおこなう<br>1: ４行目が {0,0,0,1} である可逆行列に対応できる処理をおこなう<br>2: 単位行列の場合に限って対応できる処理をおこなう
</ul></div>
<div style="margin-left:50px;"><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DData_t"><font size=6>sceHiPlugTex2DData_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tex2Dデータ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	sceGsTex0 <i>tex0</i>;
	u_long <i>addr</i>;
	size_t <i>texelsize</i>;
	size_t <i>clutsize</i>;
	u_short <i>texelwidth</i>;
	u_short <i>texelheight</i>;
	u_short <i>clutwidth</i>;	
	u_short <i>clutheight</i>;
}<b>sceHiPlugTex2DData_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>tex0</i>&nbsp;</td>
<td valign="TOP">&nbsp;Gs TEX0レジスタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>addr</i>&nbsp;</td>
<td valign="TOP">&nbsp;Gs TEX0レジスタアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>texelsize</i>&nbsp;</td>
<td valign="TOP">&nbsp;テクセルワードサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>clutsize</i>&nbsp;</td>
<td valign="TOP">&nbsp;CLUTワードサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>texelwidth</i>&nbsp;</td>
<td valign="TOP">&nbsp;テクセルの幅&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>texelheight</i>&nbsp;</td>
<td valign="TOP">&nbsp;テクセルの高さ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>clutwidth</i>&nbsp;</td>
<td valign="TOP">&nbsp;CLUTの幅&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>clutheight</i>&nbsp;</td>
<td valign="TOP">&nbsp;CLUTの高さ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugTex2DGetData()が返す構造体です。TEX2D_DATAデータブロックの1つのテクスチャ情報を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DHead_t"><font size=6>sceHiPlugTex2DHead_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tex2Dヘッダー構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[3];
	int <i>num</i>;
}<b>sceHiPlugTex2DHead_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;TEX2D_DATAのテクスチャ数、&nbsp;<br>&nbsp;またはTEX2D_ENVのテクスチャ環境数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugTex2DGetHead()が返す構造体です。<br>TEX2D_DATAまたはTEX2D_ENVデータブロックの最初のヘッダー情報を表します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2dInitArg_t"><font size=6>sceHiPlugTex2dInitArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tex2Dプラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>resident</i>;
	sceHiGsMemTbl *<i>tbl</i>;
} <b>sceHiPlugTex2dInitArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>resident</i>&nbsp;</td>
<td valign="TOP">&nbsp;テクスチャデータのGS Memoryの常駐・&nbsp;<br>&nbsp;非常駐の切り替えフラグ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>tbl</i>&nbsp;</td>
<td valign="TOP">&nbsp;TBP/CBPの設定をユーザーが指示するための&nbsp;<br>&nbsp;GS Service構造体&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Tex2DプラグインのSCE_HIG_INIT_PROCESSで受理される引数の型です。<br>sceHiPlug型の変数のargメンバにこの型の変数のアドレスをセットすることによって引数として渡すことができます。<br><i>resident</i>=TRUE,<i>tbl</i>=NULLの場合、ライブラリ内部でテクスチャサイズの確保を行います。SCE_HIG_END_PROCESSが呼び出されたときテクスチャサイズを開放します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2Data_t"><font size=6>sceHiPlugTim2Data_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2データ構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>id</i>;
	int *<i>ptr</i>;
	size_t <i>size</i>;
	size_t <i>length</i>;
	char <i>fname</i>[16];
}<b>sceHiPlugTim2Data_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>id</i>&nbsp;</td>
<td valign="TOP">&nbsp;Tim2データID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>ptr</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードしたファイルのポインタ（ユーザーが設定）&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>size</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードするファイルのワードサイズ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>length</i>&nbsp;</td>
<td valign="TOP">&nbsp;ファイル名の長さ、現在固定16文字&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>fname</i>&nbsp;</td>
<td valign="TOP">&nbsp;ロードするファイル名、現在固定16文字まで&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugTim2GetData()が返す構造体です。<br>TIM2_DATAデータブロックの1つのTim2データ構造体を表します。<br>Tim2フォーマットの解析は別途必要です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2Head_t"><font size=6>sceHiPlugTim2Head_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2ヘッダー構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>reserve</i>[3];
	int <i>num</i>;
}<b>sceHiPlugTim2Head_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;Tim2データ数&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データアクセス関数sceHiPlugTim2GetHead ()が返す構造体です。<br>TIM2_DATAデータブロックの最初のヘッダー情報を表します。<br>Tim2フォーマットの解析は別途必要です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2InitArg_t"><font size=6>sceHiPlugTim2InitArg_t<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2プラグイン引数構造体<br></div>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	int <i>resident</i>;
	sceHiGsMemTbl *<i>tbl</i>;
} <b>sceHiPlugTim2InitArg_t</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>resident</i>&nbsp;</td>
<td valign="TOP">&nbsp;テクスチャデータのGS Memoryの常駐・&nbsp;<br>&nbsp;非常駐の切り替えフラグ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>tbl</i>&nbsp;</td>
<td valign="TOP">&nbsp;TBP/CBPの設定をユーザーが指示するための&nbsp;<br>&nbsp;GS Service構造体&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Tim2プラグインのSCE_HIG_INIT_PROCESSで受理される引数の型です。<br>sceHiPlug型の変数のargメンバにこの型の変数のアドレスをセットすることによって引数として渡すことができます。<br></div>

<!-- 見出し　２，章見出し -->
<hr border=1 width=100%><br>
<center><h2>関数</h2></center>
<a name=#"Heading2"></a>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="FRAME_PLUG"><font size=6>FRAME_PLUG<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Frameプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>(プラグイン関数なし)

</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(プラグイン引数なし)<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">(プラグイン返り値なし)<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">プラグイン関数を持たない仮想的プラグインです。<br>挿入されたプラグイン機能を一括実行します。<br>プラグインの呼び出しの依存関係は挿入プラグインブロックリストの並びで記述されています。<br>sceHiCallPlug()を呼び出すことで挿入プラグインが実行されます。<br>基本的にはどんなプラグインブロックでも挿入可能です。<br>ユーザーはFrameプラグインブロックをカスタマイズして適切なプラグインの呼び出しを行なうことができます。<br><br>このプラグインのタイプ属性および必要とするデータのタイプ属性を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAME&nbsp;</td>
<td valign="TOP">&nbsp;FRAME_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">なし<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnime"><font size=6>sceHiPlugAnime<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugAnime</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;NULLポインタが与えられた&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプが不一致&nbsp;<br>&nbsp;- アニメーション数が0以下&nbsp;<br>&nbsp;- キーフレーム数が0以下&nbsp;<br>&nbsp;- キーバリュー数が0以下&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;データブロックが見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">階層構造データの移動・回転・拡大縮小のそれぞれの値をキーフレーム間で補間します。<br><br><i>process</i>に指定した値に応じて以下の処理が呼び出されます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;階層構造データ、キーフレームデータ、&nbsp;<br>&nbsp;キーバリューデータ、アニメーション&nbsp;<br>&nbsp;データの読み込み。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;階層構造データの座標変換、移動・回転・&nbsp;<br>&nbsp;拡縮をキーフレーム間で補間します。&nbsp;<br>&nbsp;プラグインブロック実引数(HiPlug型の&nbsp;<br>&nbsp;メンバargs)が存在する場合(NULLで&nbsp;<br>&nbsp;ない場合）は以下の処理もおこないます。&nbsp;<br>&nbsp;実引数の要素 setframe_enableが&nbsp;<br>&nbsp;1の場合は要素setframeの値を現在の&nbsp;<br>&nbsp;キーフレームとして設定します。&nbsp;<br>&nbsp;実引数の要素currentframeには、&nbsp;<br>&nbsp;常に現在のキーフレーム番号を返します。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの解放。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインを使用する際に消費するメモリ容量を下記に示します。<br>この消費量を考慮して sceHiMemInit();関数で内部バッファの十分なバッファサイズを指定してください。<br>このサイズは、1プラグインブロック単位ごとに消費します。<br></div>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;2(word/keyframe) + 1 (word/keyvalue) + 3 (qword)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインのタイプ属性と、必要とするデータのタイプ属性および書き込みの有無を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;ANIME&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_ANIME_&nbsp;<br>&nbsp;PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;ANIME&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;ANIME_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;ANIME&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;KEYFRAME&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;ANIME&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;KEYVALUE&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;HRCHY&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;HRCHY_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimeGetData"><font size=6>sceHiPlugAnimeGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugAnimeData_t *<b>sceHiPlugAnimeGetData</b>(
	sceHiPlugAnimeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugAnimeData_t型　　Animeデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプANIME_DATAの1つのAnimeデータを取得します。<br><i>*h</i> にはsceHiPlugAnimeGetHead()で取得したANIME_DATAヘッダーポインタを与えます。<br><i>idx</i>には何番目のAnimeデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimeGetFrame"><font size=6>sceHiPlugAnimeGetFrame<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeフレームデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int *<b>sceHiPlugAnimeGetFrame</b>(
	sceHiPlugAnimeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">int型　　アニメーションフレームデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプKEYFRAMEの1つのアニメーションフレームデータを取得します。<br><i>*h</i> にはsceHiPlugAnimeGetKeyHead()で取得したKEYFRAMEヘッダーポインタを与えます。<br><i>idx</i> には何番目のフレームデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimeGetHead"><font size=6>sceHiPlugAnimeGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugAnimeHead_t *<b>sceHiPlugAnimeGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugAnimeHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリANIMEに属するデータタイプ、ANIME_DATA,KEYFRAME,KEYVALUEのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合、NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimeGetKeyHead"><font size=6>sceHiPlugAnimeGetKeyHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeキーヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugAnimeHead_t *<b>sceHiPlugAnimeGetKeyHead</b>(
	sceHiPlugAnimeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugAnimeHead_t型　　アニメーションキーヘッダーのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプKEYFRAME,KEYVALUEの1つのアニメーションキーヘッダーを取得します。<br><i>*h</i> にはsceHiPlugAnimeGetHead()で取得したKEYFRAME,KEYVALUEヘッダーポインタを与えます。<br><i>idx </i>には何番目のキーヘッダーを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugAnimeGetValue"><font size=6>sceHiPlugAnimeGetValue<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Animeバリューデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugAnimeGetValue</b>(
	sceHiPlugAnimeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　アニメーションバリューデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプKEYVALUEの1つのアニメーションバリューデータを取得します。<br><i>*h</i> にはsceHiPlugAnimeGetKeyHead()で取得したKEYVALUEヘッダーポインタを与えます。<br><i>idx</i> には何番目のバリューデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugCamera"><font size=6>sceHiPlugCamera<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Cameraプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugCamera</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  CAMERA_DATAが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_DATAが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackがNULL&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cameraプラグインは与えられたCameraデータからスクリーンマトリクスおよび<br>ビューマトリクス、クリップボリュームを求めMicroデータに結果をコピーします。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;スクリーンマトリクスの生成&nbsp;<br>&nbsp;クリップボリュームを求め&nbsp;<br>&nbsp;Microデータにコピー&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;ビューマトリクスの生成&nbsp;<br>&nbsp;ビュースクリーンマトリクスを求め&nbsp;<br>&nbsp;Microデータにコピー。&nbsp;<br>&nbsp;カメラ位置を求めMicroデータにコピー。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1 qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CAMERA&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CAMERA_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CAMERA&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CAMERA_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugCameraGetData"><font size=6>sceHiPlugCameraGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Cameraデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugCameraData_t *<b>sceHiPlugCameraGetData</b>(
	sceHiPlug *<i>p</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugCameraData_t型　　Cameraデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプCAMERA_DATAのデータポインタを取得します。<br>データがない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClip"><font size=6>sceHiPlugClip<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Clipプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugClip</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  CLIP_DATAが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  BASEMATRIXが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_DATAが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ClipプラグインはClipデータのバウンディングボックスとMicroデータにあるクリッピングボリュームからボリューム外のオブジェクトクリッピング処理を行い、描画転送を制御します。<br>クリッピング対象の場合はマトリクスの不可視フラグがONに、非対象の場合はマトリクスの不可視フラグがOFFに設定されます。不可視フラグがONのオブジェクトはDMA転送のエントリから外されDMA転送しません。これは無駄なDMA転送を制御します。可視・不可視フラグの設定に関してはsceHiPlugShapeInvisible()関数もあわせて参照ください。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;マトリクス単位のクリッピング処理&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CLIP&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CLIP_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CLIP&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CLIP_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BASEMATRIX&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClipGetData"><font size=6>sceHiPlugClipGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Clipデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugClipData_t *<b>sceHiPlugClipGetData</b>(
	sceHiPlugClipHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugClipData_t型　　Clipデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプCLIP_DATAの1つのClipデータを取得します。<br><i>*h</i>にはsceHiPlugClipGetHead()で取得したCLIP_DATAヘッダーポインタを与えます。<br><i>idx</i>には何番目のClipデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClipGetHead"><font size=6>sceHiPlugClipGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Clipヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugClipHead_t *<b>sceHiPlugClipGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugClipHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリCLIPに属するデータタイプ、CLIP_DATAのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClutBump"><font size=6>sceHiPlugClutBump<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ClutBumpプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugClutBump</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  CLUTBUMP_DATAが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  TEX2D_DATAが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  BASEMATRIXが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  CLUTBUMP_NORMALが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">256個の法線テーブルからシェーディング強度を算出しテクスチャCLUTのα値として書き込みを行います。基底となるテクスチャとのαブレンドによる輝度の変化によりバンプ効果を演出します。<br><br>演算式：<br></div>
<div style="margin-left:70px;">CLUTα = ambientα + diffuseα * (light.normal) + specularα*(light.normal)^shininess<br></div>
<div style="margin-left:50px;"><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;CLUTαの演算とテクスチャへの書き込み。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1qword + 1qword/clut&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BUMP&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CLUTBUMP_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BUMP&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CLUTBUMP_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BUMP&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;CLUTBUMP_NORMAL&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BASEMATRIX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClutBumpGetData"><font size=6>sceHiPlugClutBumpGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ClutBumpデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugClutBumpData_t *<b>sceHiPlugClutBumpGetData</b>(
	sceHiPlugClutBumpHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugClutBumpData_t型　　ClutBumpデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプCLUTBUMP_DATAの1つのClutBumpデータを取得します。<br><i>*h</i> には sceHiPlugClutBumpGetHead()で取得したCLUTBUMP_DATAヘッダーポインタを与えます。<br><i>idx </i>には何番目のClutBumpデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClutBumpGetHead"><font size=6>sceHiPlugClutBumpGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ClutBumpヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugClutBumpHead_t *<b>sceHiPlugClutBumpGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugClutBumpHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリCLUTBUMPに属するデータタイプ、CLUTBUMP_DATA,CLUTBUMP_NORAMLのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugClutBumpGetNormal"><font size=6>sceHiPlugClutBumpGetNormal<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ClutBump法線テーブル取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugClutBumpGetNormal</b>(
	sceHiPlugClutBumpHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　CLUTBUMP法線テーブルのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプCLUTBUMP_NORMALの1つの法線テーブルを取得します。<br><i>*h</i> にはsceHiPlugClutBumpGetHead()で取得したCLUTBUMP_NORMALヘッダーポインタを与えます。<br><i>idx</i>には何番目の法線テーブルを取得するかを指定します。<br>1つの法線テーブルは256個の法線を持ちます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugFishEye"><font size=6>sceHiPlugFishEye<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>FishEyeプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugFishEye</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- プラグインタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_PLUGが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_DATAが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">魚眼レンズ効果によるシーンレンダリングを行います。<br>シーンレンダリングのために別途対応したマイクロプログラムおよびMicroプラグインが必要です。データフォーマット上はMicroプラグインが挿入されています。<br>魚眼レンズレンダリングのためには適切な描画環境を必要とします。<br>具体的な使用方法はサンプルのソースおよびデータを参照してください。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;ビューマトリクスの生成。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;挿入Microプラグインによるレンダリング。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Repository</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Project</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Category</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;REFLECT&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FISHEYE_PLUG&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_PLUG&nbsp;</td>
</tr></table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Repository</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Project</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Categoy</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>     Data ID</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="top">&nbsp;r/w&nbsp;</td>
</tr></table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugHrchy"><font size=6>sceHiPlugHrchy<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Hrchyプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugHrchy</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;ハイアラキプラグインブロックへのポインタ。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子。&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;NULLポインタが与えられた&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプが不一致&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;データブロックが見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">内部で階層構造のマトリクスを生成します。<br>階層デプスの制限はありません。<br><br><i>process</i>に指定した値に応じて以下の処理が呼び出されます。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;階層構造データとマトリクスデータの&nbsp;<br>&nbsp;読み込み。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;座標変換、移動・回転・拡縮と階層構造&nbsp;<br>&nbsp;から累積マトリクスを生成し、データに&nbsp;<br>&nbsp;反映。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの解放。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインを使用する際に消費するメモリ容量を下記に示します。<br>この消費量を考慮してsceHiMemInit(); 関数で内部バッファの十分なバッファサイズを指定してください。<br>このサイズは、1プラグインブロック単位ごとに消費します。<br></div>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1 (qword)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインのタイプ属性と、必要とするデータのタイプ属性および書き込みの有無を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;HRCHY&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;HRCHY_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;HRCHY&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;HRCHY_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;HRCHY&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;PIVOT_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BASEMATRIX&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugHrchyGetData"><font size=6>sceHiPlugHrchyGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Hrchyデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugHrchyData_t *<b>sceHiPlugHrchyGetData</b>(
	sceHiPlugHrchyHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugHrchyData_t型　　Hrchyデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプHRCHY_DATAの1つの階層構造を取得します。<br><i>*h</i>にはsceHiPlugHrchyGetHead()で取得したHRCHY_DATAヘッダーポインタを与えます。<br><i>idx</i>には何番目のHRCHYデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugHrchyGetHead"><font size=6>sceHiPlugHrchyGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Hrchyヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugHrchyHead_t *<b>sceHiPlugHrchyGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugHrchyHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリHRCHYに属するデータタイプ、HRCHY_DATA,PIVOT_DATAのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugHrchyGetPivot"><font size=6>sceHiPlugHrchyGetPivot<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Pivotデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugHrchyGetPivot</b>(
	sceHiPlugHrchyHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　Pivotデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプPIVOT_DATAの1つのPivotデータを取得します。<br><i>*h</i> にはsceHiPlugHrchyGetHead()で取得したPIVOT_DATAヘッダーポインタを与えます。<br><i>idx </i>には何番目のPivotデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugLightMap"><font size=6>sceHiPlugLightMap<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>LightMapプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugLightMap</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;plug-&gt;argsがNULL&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- プラグインタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_PLUGが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_DATAが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Microデータにあるライト情報からテクスチャプロジェクションマトリクスを生成しライトテクスチャをオブジェクトに投影することでライティング効果を演出します。<br>別途対応したマイクロプログラムおよびMicroプラグインを必要とします。<br>Microデータにあるライト情報の内、平行光源の0番のみに対応しています。<br>SCE_HIG_INIT_PROCESS時に必ずsceHiPlugLightMapInitArg_tを指定してください。<br>具体的な使用方法はサンプルのソースおよびデータを参照してください。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;テクスチャプロジェクションマトリクスの&nbsp;<br>&nbsp;生成。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;挿入Microプラグインによる&nbsp;<br>&nbsp;ライトマッピング。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;LIGHT&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;LIGHTMAP_PLUG&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Repository</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Project</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Categoy</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>     Data ID</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="top">&nbsp;r/w&nbsp;</td>
</tr></table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicro"><font size=6>sceHiPlugMicro<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Microプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugMicro</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックのアドレス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;指定したMicroコード番号(ID)が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- plug-&gt;stackが破壊されている&nbsp;<br>&nbsp;- データタイプが不一致&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;- MicroプログラムのDMAパケット生成に失敗&nbsp;<br>&nbsp;- MicroデータのDMAパケット生成に失敗&nbsp;<br>&nbsp;- データブロックが見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">マイクロプログラムをVU1マイクロメモリへDMA転送しVU1ダブルバッファの準備をします。<br>登録した複数のマイクロプログラムの切り替えをします。<br><br><i>process</i>に指定した値に応じて以下の処理が呼び出されます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;実装されているマイクロプログラムの&nbsp;<br>&nbsp;DMAパケットを生成。&nbsp;<br>&nbsp;sceHiPlugMicroInitArg_tによる複数&nbsp;<br>&nbsp;マイクロプログラムの登録と属性の設定&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロック実引数(HiPlug型の&nbsp;<br>&nbsp;メンバargs) に&nbsp;<br>&nbsp;sceHiPlugMicroPreCalcArg_tによる&nbsp;<br>&nbsp;マイクロプログラムの切り替え。&nbsp;<br>&nbsp;argsがNULLの場合はライブラリ&nbsp;<br>&nbsp;保有の平行光源のみ行うマイクロプログラムを使用&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;マイクロプログラムのDMAパケットを&nbsp;<br>&nbsp;DMA転送するChainをsceHiDMARegist&nbsp;<br>&nbsp;で登録します。&nbsp;<br>&nbsp;DMA転送自体はしません。&nbsp;<br>&nbsp;別途 sceHiDMASend(); を呼び出すこと&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファ、DMAパケットバッファの&nbsp;<br>&nbsp;解放。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインを使用する際に消費するメモリ容量を下記に示します。<br>この消費量を考慮してsceHiDMAInit(); 関数で DMAパケットバッファおよびパケット管理領域、sceHiMemInit(); 関数で内部バッファの十分なバッファサイズを指定してください。<br>このサイズは、1プラグインブロック単位ごとに消費します。<br></div>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;1 qword&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;4 qword&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;2 qword + 2word * num-of-micro code&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインのタイプ属性と、必要とするデータのタイプ属性および書き込みの有無を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugMicroGetData"><font size=6>sceHiPlugMicroGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Microデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugMicroData_t *<b>sceHiPlugMicroGetData</b>(
	sceHiPlug *<i>p</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugMicroData_t型　　Microデータポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリMICROに属するデータタイプMICRO_DATAのMicroデータポインタを取得します。<br>データがない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugReflect"><font size=6>sceHiPlugReflect<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Reflectプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugReflect</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;-プラグインタイプ SCE_HIP_&nbsp;<br>&nbsp; MICRO_PLUG が見つからない&nbsp;<br>&nbsp;-データタイプ SCE_HIP_&nbsp;<br>&nbsp; MICRO_DATA が見つからない&nbsp;<br>&nbsp;-plug-&gt;stack が破壊されている&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">リフレクションマッピングの効果を演出します。<br>演算式：<br></div>
<div style="margin-left:70px;">reflect=2*(normal,eye)-eye<br>reflect.x=reflect.x*zoom<br>reflect.y=reflect.y*zoom<br>m=sqrt(reflect.x^2+reflect.y^2+(reflect.z+z_shift)^2)<br>S= reflect.x/(2*m)<br>T= reflect.y/(2*m)<br></div>
<div style="margin-left:50px;">マッピングのために別途対応したマイクロプログラムおよびMicroプラグインが必要です。<br>データフォーマット上はMicroプラグインが挿入されています。具体的にはサンプルのソースおよびデータを参照してください。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;ビューマトリクスの生成。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;挿入Microプラグインによるマッピング。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;REFLECT&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;REFLECT_PLUG&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Repository</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Project</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Categoy</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>     Data ID</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="top">&nbsp;r/w&nbsp;</td>
</tr></table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugRefract"><font size=6>sceHiPlugRefract<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Refractプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugRefract</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- プラグインタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_PLUGが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_DATAが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">リフラクションマッピングの効果を演出します。<br><br>演算式：<br></div>
<div style="margin-left:70px;">refract=2*(refract_index*normal.eye)+eye<br>refract.x=refract.x*zoom<br>refract.y=refract.y*zoom<br>m=sqrt(refract.x^2+refract.y^2+(refract.z+z_shift)^2)<br>S= refract.x/(2*m)<br>T= refract.y/(2*m)<br></div>
<div style="margin-left:50px;"><br>マッピングのために別途対応したマイクロプログラムおよびMicroプラグインが必要です。<br>データフォーマット上はMicroプラグインが挿入されています。具体的にはサンプルのソースおよびデータを参照してください。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;ビューマトリクスの生成。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;挿入Microプラグインによるマッピング。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Repository</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Project</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Category</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;REFLECT&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;REFRACT_PLUG&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_PLUG&nbsp;</td>
</tr></table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Repository</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Project</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Categoy</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>     Data ID</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="top">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="top">&nbsp;r/w&nbsp;</td>
</tr></table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShadowBox"><font size=6>sceHiPlugShadowBox<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ShadowBoxプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugShadowBox</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  SHADOWBOX_DATAが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  BASEMATRIXが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">シャドーとなるオブジェクトのバウンディングボックスからワールド座標値を算出します。このバウンディングボックスの結果はShadowMapプラグインで使用します。<br>階層構造のルートマトリクスからワールド座標の頂点を算出します。<br>ShadowMapプラグインのPRE_PROCESSの前にこのプラグインのPRE_PROCESSが呼び出されている必要があります。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;バウンディングボックスを構成する８頂点の&nbsp;<br>&nbsp;ワールド座標値を算出。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOW&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOWBOX_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOW&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOWBOX_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BASEMATRIX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShadowBoxGetData"><font size=6>sceHiPlugShadowBoxGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ShadowBoxデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShadowBoxData_t *<b>sceHiPlugShadowBoxGetData</b>(
	sceHiPlug *<i>p</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShadowBoxData_t型　　ShadowBoxデータポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリSHADOWに属するデータタイプSHADOWBOX_DATAのデータポインタを取得します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShadowMap"><font size=6>sceHiPlugShadowMap<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>ShadowMapプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugShadowMap</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;plug-&gt;argsがNULL&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- プラグインタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_PLUGが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  MICRO_DATAが見つからない&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  SHADOWBOX_DATA&nbsp;<br>&nbsp;  が見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">シャドーテクスチャレンダリングのためのビュースクリーンマトリクスの生成、およびテクスチャプロジェクションマトリクスの生成。レンダリングされたシャドーテクスチャからテクスチャマトリクスを使ってテクスチャマッピングすることでシャドー効果を演出します。<br>INIT_PROCESS時に必ずsceHiPlugShadowMapInitArg_tでシャドーテクスチャサイズを指定してください。<br>PRE_PROCESS時には事前にShadowBoxプラグインのPRE_PROCESSが呼ばれていることが必要です。<br>シャドーテクスチャのレンダリングには別途対応したマイクロプログラムおよびMicroプラグインが必要です。データフォーマット上はMicroプラグインが挿入されています。<br>シャドーテクスチャのマッピングにはFrameプラグインを使用します。Frameプラグインが持つMicroプラグインに対応したマイクロプログラムを指定する必要があります。<br>ShadowMapが持つMicroデータのライト情報の内、平行光源0番のみ対応しています。<br>レンダリングおよびマッピングには適切な描画環境を必要とします。<br>具体的な使用方法はサンプルのソースおよびデータを参照してください。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;シャドーテクスチャレンダリングのための&nbsp;<br>&nbsp;ビュースクリーンマトリクスの生成。&nbsp;<br>&nbsp;シャドーマッピングのための&nbsp;<br>&nbsp;テクスチャマトリクスの生成。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;挿入Microプラグインによる&nbsp;<br>&nbsp;シャドーテクスチャのレンダリング。&nbsp;<br>&nbsp;Frameプラグインによるシャドー&nbsp;<br>&nbsp;マッピング。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;2qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOW&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOWMAP_PLUG&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOW&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHADOWBOX_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;MICRO_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShape"><font size=6>sceHiPlugShape<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shapeプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugShape</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子。&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;- 内部メモリ領域確保失敗&nbsp;<br>&nbsp;- sceHiDMA*()が返すエラー&nbsp;<br>&nbsp;- VU1 Memのオーバーフロー&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;Matrix番号(ID)が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- plug-&gt;stackが破壊されている&nbsp;<br>&nbsp;- データタイプが不一致&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;- sceHiDMA*()が返すエラー&nbsp;<br>&nbsp;- データブロックが見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Shapeデータ(形状データ)をVU1ローカルメモリへDMA転送するパケットを生成し転送およびマイクロプログラムの実行、描画を行います。<br><br><i>process</i>に指定した値に応じて以下の処理が呼び出されます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;Shapeデータ・&nbsp;<br>&nbsp;マトリクスデータ・テクスチャデータ&nbsp;<br>&nbsp;を解析してVU Mem1へDMA転送する&nbsp;<br>&nbsp;パケットを生成。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;ShapeデータをVU Mem1へDMA&nbsp;<br>&nbsp;転送するChainをsceHiDMARegistで&nbsp;<br>&nbsp;登録します。&nbsp;<br>&nbsp;DMA転送自体はしません。&nbsp;<br>&nbsp;別途sceHiDMASend(); を呼び出すこと&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;DMAパケットバッファの解放。&nbsp;<br>&nbsp;内部バッファの解放。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインを使用する際に消費するメモリ容量を下記に示します。<br>この消費量を考慮してsceHiDMAInit(); 関数でDMAパケットバッファおよびパケット管理領域、sceHiMemInit(); 関数で内部バッファの十分なバッファサイズを指定してください。<br>このサイズは、1プラグインブロック単位ごとに消費します。<br></div>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;最小1 (qword/shape) + 1 (qword)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケット&nbsp;<br>&nbsp;バッファ&nbsp;</td>
<td valign="TOP">&nbsp;最大3 (qword/matrix : skinなし)&nbsp;<br>&nbsp;最大４(qword/matrix : skinあり）&nbsp;<br>&nbsp;最大3 (qword/shape)&nbsp;<br>&nbsp;最大2 (qword/material : textureあり, material dataなし)&nbsp;<br>&nbsp;最大5 (qword/material : textureあり, material dataあり)&nbsp;<br>&nbsp;最大3 (qword/material : textureなし, material dataあり)&nbsp;<br>&nbsp;最大8 (qword/geometry : 最大50vertexを1geometryと&nbsp;<br>&nbsp;して。50以上の場合は分割される)&nbsp;<br>&nbsp;最大2(qword/skin/4)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;1word/shape+1word/basematrix + 4 (qword)&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">※ <br></div>
<div style="margin-left:70px;">(qword/matrix) = qword per materix : 1 materixあたりのqword数<br>(qword/shape) = qword per shape : 1 shapeあたりのqword数<br>(qword/material) = qword per material : 1 materialあたりのqword数<br>(qword/geometry) = qword per geometry : 1 geometryあたりのqword数<br>　　　　　　　　　50vertexを超えるGeometryの場合は内部で分割して操作されます。<br> (qword/skin/4) = qword per num of SKIN_LW / 4(max bone num) : <br>　　　　　　　　　1 skin dataあたりのqword数<br></div>
<div style="margin-left:50px;"><br>ただし、Primitiveの種類や、DMA Serviceのスライス管理状況によって、多少の増減があります。消費メモリの目安として参考にしてください。<br><br>このプラグインのタイプ属性と、必要とするデータのタイプ属性および書き込みの有無を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BASEMATRIX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D_ENV&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetDataHead"><font size=6>sceHiPlugShapeGetDataHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shapeデータヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShapeHead_t *<b>sceHiPlugShapeGetDataHead</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShapeHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのShapeデータのヘッダーを取得します。<br><i>*h</i> には sceHiPlugShapeGetHead()で取得したヘッダーポインタを与えます。<br><i>idx </i>には何番目のShapeデータを取得するかを指定します。<br>返り値ではdat構造体を使用します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetGeometryColor"><font size=6>sceHiPlugShapeGetGeometryColor<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Geometry頂点カラー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugShapeGetGeometryColor</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　頂点カラーのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのGeometryデータの頂点カラーを取得します。<br><i>*h</i> には sceHiPlugShapeGetGeometryHead()で取得したヘッダーポインタを与えます。<br><i>idx </i>には何番目の頂点カラーを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetGeometryHead"><font size=6>sceHiPlugShapeGetGeometryHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Geometryデータヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShapeHead_t *<b>sceHiPlugShapeGetGeometryHead</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShapeHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのGeometryデータのヘッダーを取得します。<br><i>*h</i> には sceHiPlugShapeGetMaterialHead()で取得したヘッダーポインタを与えます。<br><i>idx</i> には何番目のGeometryデータを取得するかを指定します。<br>返り値ではgeo構造体を使用します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetGeometryNormal"><font size=6>sceHiPlugShapeGetGeometryNormal<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Geometry法線データ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugShapeGetGeometryNormal</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　法線データのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのGeometryデータの法線データを取得します。<br><i>*h</i> には sceHiPlugShapeGetGeometryHead()で取得したヘッダーポインタを与えます。<br><i>idx</i> には何番目の法線データを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetGeometryST"><font size=6>sceHiPlugShapeGetGeometryST<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Geometryテクスチャ座標取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugShapeGetGeometryST</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　テクスチャ座標データのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのGeometryデータのテクスチャ座標を取得します。<br><i>*h</i> には sceHiPlugShapeGetGeometryHead()で取得したヘッダーポインタを与えます。<br><i>idx </i>には何番目のテクスチャ座標を取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetGeometryVertex"><font size=6>sceHiPlugShapeGetGeometryVertex<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Geometry頂点データ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugShapeGetGeometryVertex</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　頂点データのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのGeometryデータの頂点データを取得します。<br><i>*h</i> には sceHiPlugShapeGetGeometryHead()で取得したヘッダーポインタを与えます。<br><i>idx</i> には何番目の頂点データを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetHead"><font size=6>sceHiPlugShapeGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shapeヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShapeHead_t *<b>sceHiPlugShapeGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShapeHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリSHAPEに属するデータタイプ、SHAPE_DATA,BASEMATRIXのデータブロック最初のヘッダーを取得します。<br>返り値ではtop構造体を使用します。<br>指定したデータタイプが見つかない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetMaterialAttrib"><font size=6>sceHiPlugShapeGetMaterialAttrib<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Materialアトリビュート取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FMATRIX *<b>sceHiPlugShapeGetMaterialAttrib</b>(
	sceHiPlugShapeHead_t *<i>h</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FMATRIX型　　Materialアトリビュート<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのMaterialデータのアトリビュートを取得します。<br>アトリビュートとは、ambient,diffuse,specularなどのデータを指します。<br><i>*h</i> には sceHiPlugShapeGetMaterialHead()で取得したヘッダーポインタを与えます。<br>データがない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetMaterialGiftag"><font size=6>sceHiPlugShapeGetMaterialGiftag<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>MaterialGiftag取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiGsGiftag *<b>sceHiPlugShapeGetMaterialGiftag</b>(
	sceHiPlugShapeHead_t *<i>h</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiGsGiftag型　　MaterialGiftagポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのMaterialデータのGiftagを取得します。<br><i>*h</i> には sceHiPlugShapeGetMaterialHead()で取得したヘッダーポインタを与えます。<br>データがない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetMaterialHead"><font size=6>sceHiPlugShapeGetMaterialHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Materialデータヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShapeHead_t *<b>sceHiPlugShapeGetMaterialHead</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShapeHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAPE_DATAの1つのMaterialデータのヘッダーを取得します。<br><i>*h</i> には sceHiPlugShapeGetDataHead()で取得したヘッダーポインタを与えます。<br><i>idx</i> には何番目のMaterialデータを取得するかを指定します。<br>返り値ではmat構造体を使用します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeGetMatrix"><font size=6>sceHiPlugShapeGetMatrix<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>マトリクスデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShapeMatrix_t *<b>sceHiPlugShapeGetMatrix</b>(
	sceHiPlugShapeHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShapeMatrix_t型　　マトリクスデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプBASEMATRIXの1つのマトリクスデータを取得します。<br><i>*h</i> には sceHiPlugShapeGetHead()で取得したBASEMATRIXヘッダーポインタを与えます。<br><i>idx</i> には何番目のマトリクスデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeInvisible"><font size=6>sceHiPlugShapeInvisible<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shape可視・不可視設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugShapeInvisible</b>(
	sceHiPlug *<i>plug</i>;
	int <i>matidx</i>;
	int <i>flag</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>matidx</i>&nbsp;</td>
<td valign="TOP">&nbsp;設定を行う対象のシェイプを表示するための&nbsp;<br>&nbsp;ベースマトリクスID&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>flag</i>&nbsp;</td>
<td valign="TOP">&nbsp;1で不可視、0で可視に設定する&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;sceHiDMA*()が返すエラー&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;Matrix番号(ID)が不正&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;sceHiDMA*()が返すエラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">表示対象のShapeデータに対して、可視・不可視設定を行います。<br>不可視設定された場合は、DMA転送を行う時点でエントリから削除されます。<br>（不可視の場合、DMA転送がされません）<br>設定はマトリクス単位で行います。したがって、同一Shapeデータを複数のマトリクスで複数表示をしている場合でも、各々の表示対象に対して設定する事が可能です。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShapeMasterChainSetting"><font size=6>sceHiPlugShapeMasterChainSetting<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shapeのパケット列の設定変更関数<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugShapeMasterChainSetting</b>(
	sceHiPlug *<i>plug</i>;
	int <i>flag</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>flag</i>&nbsp;</td>
<td valign="TOP">&nbsp;flag値&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;sceHiDMA*()が返すエラー&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;sceHiDMA*()が返すエラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ShapeパケットのMaster Chain(表示するオブジェクトのパケットChainをCallTagでつないでいるパケット列)の設定変更をする関数です。<br>現在設定できるのは、以下のものになっています。<br></div>
<div style="margin-left:35px;"><ul>
         <li> Dynamic/Static切り替え：0 bit目<br>Master ChainをDynamicに作るか、Staticに作るかの切り替えが行えます。<br>Dynacmicの場合flagの0bitを0に、Staticにする場合は1にしてください。<br>DefaultはDynamic（毎転送後、パケット列を削除）になっています。
</ul></div>
<div style="margin-left:50px;"><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShare"><font size=6>sceHiPlugShare<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shareプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugShare</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子。&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- plug-&gt;stack が破壊されている&nbsp;<br>&nbsp;- Shapeデータの頂点データが取得できない&nbsp;<br>&nbsp;- データタイプが不一致&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;データブロックが見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">異なった座標変換で共有している頂点・法線から形状を生成します。<br>擬似的なスキンデフォメーションの効果があります。<br><br><i>process</i>に指定した値に応じて以下の処理が呼び出されます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;共有頂点データ、共有法線データ、&nbsp;<br>&nbsp;共有頂点インデックスデータ、共有法線&nbsp;<br>&nbsp;インデックスデータ、共有頂点連結データ、&nbsp;<br>&nbsp;共有法線連結データ、Shapeデータ、&nbsp;<br>&nbsp;マトリクスデータそれぞれの読み込み。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;マトリクスデータから頂点・法線の座標変換を&nbsp;<br>&nbsp;行い、連結データから形状を生成し、&nbsp;<br>&nbsp;Shapeデータに反映します。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの解放。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインを使用する際に消費するメモリ容量を下記に示します。<br>この消費量を考慮して sceHiMemInit(); 関数で内部バッファの十分なバッファサイズを指定してください。<br>このサイズは、1プラグインブロック単位ごとに消費します。<br></div>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;2 (word/geometry)(in share) + 3 (qword)&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインのタイプ属性と、必要とするデータのタイプ属性および書き込みの有無を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_SHARE_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_SRCDSTVERTEX&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_SRCDSTNORMAL&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_VERTEXINDEX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_NORMALINDEX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_SHAREVERTEX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHARE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_SHARENORMAL&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_SHAPE_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_BASEMATRIX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareGetData"><font size=6>sceHiPlugShareGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shareデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShareData_t *<b>sceHiPlugShareGetData</b>(
	sceHiPlugShareHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShareData_t型　　Shareデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHARE_DATAの1つのShareデータを取得します。<br><i>*h</i> には sceHiPlugShareGetHead()で取得したSHARE_DATAヘッダーポインタを与えます。<br><i>idx</i> には何番目のShareデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareGetDst"><font size=6>sceHiPlugShareGetDst<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Share頂点・法線デストデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugShareGetDst</b>(
	sceHiPlugShareHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　SHARE頂点・法線デストデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSRCDSTVERTEX,SRCDSTNORMALの1つのデストデータを取得します。<br><i>*h</i> には sceHiPlugShareGetHead()で取得したSRCDSTVERTEX,SRCDSTNORMALヘッダーポインタを与えます。<br><i>idx</i> には何番目のデストデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareGetHead"><font size=6>sceHiPlugShareGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shareヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShareHead_t *<b>sceHiPlugShareGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShareHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリSHAREに属するデータタイプ、SHARE_DATA,SRCDSTVERTEX,SRCDSTNORMAL,VERTEXINDEX,NORMALINDEX,SHAREVERTEX,SHARENORMALのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareGetIndex"><font size=6>sceHiPlugShareGetIndex<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shareインデックスデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int *<b>sceHiPlugShareGetIndex</b>(
	sceHiPlugShareHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">int型　　インデックスデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプVERTEXINDEX,NORMALINDEXの1つのインデックスデータを取得します。<br><i>*h</i> には sceHiPlugShareGetHead()で取得したVERTEXINDEX,NORMALINDEXヘッダーポインタを与えます。<br><i>idx</i> には何番目のインデックスデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareGetShare"><font size=6>sceHiPlugShareGetShare<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Shareデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugShareData_t *<b>sceHiPlugShareGetShare</b>(
	sceHiPlugShareHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugShareData_t型　　Shareデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSHAREVERTEX,SHARENORMALの1つのShareデータを取得します。<br><i>*h</i> には sceHiPlugShareGetHead()で取得したSHAREVERTEX,SHARENORMALヘッダーポインタを与えます。<br><i>idx </i>には何番目のShareデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugShareGetSrc"><font size=6>sceHiPlugShareGetSrc<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Share頂点・法線ソースデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FVECTOR *<b>sceHiPlugShareGetSrc</b>(
	sceHiPlugShareHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FVECTOR型　　頂点・法線ソースデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSRCDSTVERTEX,SRCDSTNORMALの1つのソースデータを取得します。<br><i>*h</i> には sceHiPlugShareGetHead()で取得したSRCDSTVERTEX,SRCDSTNORMALヘッダーポインタを与えます。<br><i>idx</i> には何番目のソースデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkin"><font size=6>sceHiPlugSkin<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skinプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugSkin</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;内部メモリ領域確保失敗&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  SKIN_LBが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  SKIN_LWが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  SKIN_BWが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  BASEMATRIXが見つからない&nbsp;<br>&nbsp;- データタイプSCE_HIP_&nbsp;<br>&nbsp;  SHAPE_DATAが見つからない&nbsp;<br>&nbsp;- Shapeデータが不正&nbsp;<br>&nbsp;- funcの指定が不正&nbsp;<br>&nbsp;- plug-&gt;stackがNULL&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Skinプラグインはボーンによる影響度を重み係数として各頂点に与えることでボーン階層のアニメーションによるスキンデフォメーション効果を得ることができます。<br>ライブラリとしてVU0とVU1の両方に対するスキニングを提供します。<br>それぞれ以下の特徴と制限があります。<br>VU0: １スキン、ボーン制限なし、４ウェイト<br>VU1: １スキン、４ボーン、４ウェイト<br><br>VU0においてはSkinデータの機能オプション(func)のビット指定により下記処理を別途行います。<br></div>
<div style="margin-left:35px;"><ul>
         <li> func 下位16bit<br>スキンの法線の処理オプション<br>0: 法線の計算を正規化処理つきでおこなう<br>1: 法線の計算をおこなうが正規化処理はしない<br>2: reserved<br>3: 法線の計算をおこなわない
         <li> func 上位16bit<br>スキンをかける親 SHAPE の BASEMATRIX の形態オプション<br>0: 回転と移動のみを含み、４行目が {0,0,0,1} である行列に対応できる処理をおこなう<br>1: ４行目が {0,0,0,1} である可逆行列に対応できる処理をおこなう<br>2: 単位行列の場合に限って対応できる処理をおこなう
</ul></div>
<div style="margin-left:50px;"><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;データブロックの読み込みと解析。&nbsp;<br>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;ローカルボーンマトリクス(LB)と&nbsp;<br>&nbsp;ボーンワールドマトリクス(BW)から&nbsp;<br>&nbsp;ローカルワールドマトリクス(LW)を求める。&nbsp;<br>&nbsp;VU0使用時はSkinデータから&nbsp;<br>&nbsp;デフォメーション結果の頂点・法線を&nbsp;<br>&nbsp;Shapeデータに書き込む。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの開放。&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;なし&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;2 qword&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN_LB&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN_LW&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN_BW&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SKIN_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;BASEMATRIX&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;SHAPE_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkinGetBW"><font size=6>sceHiPlugSkinGetBW<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skin ボーンワールドインデックス取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int *<b>sceHiPlugSkinGetBW</b>(
	sceHiPlugSkinHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">int型　　Skin ボーンワールドインデックスのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSKIN_BWの1つのSkinボーンワールドインデックスのポインタを取得します。<br><i>*h</i>にはsceHiPlugSkinGetHead()で取得したSKIN_BWヘッダーポインタを与えます。<br><i>idx</i>には何番目のインデックスを取得するかを指定します。<br>モデル階層とボーン階層は区別していません。<br>よってモデルのマトリクスとボーンのマトリクスはBASEMATRIXに混在しています。<br>ここで取得したインデックスはBASEMATRIXのインデックスを示しています。<br>BASEMATRIXの持つローカルワールドマトリクスがボーンワールドマトリクスになります。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkinGetData"><font size=6>sceHiPlugSkinGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skinデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugSkinData_t *<b>sceHiPlugSkinGetData</b>(
	sceHiPlugSkinHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugSkinData_t型　　Skinデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSKIN_DATAの1つのSkinデータを取得します。<br><i>*h</i>にはsceHiPlugSkinGetHead()で取得したSKIN_DATAヘッダーポインタを与えます。<br><i>idx</i>には何番目のSkinデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkinGetHead"><font size=6>sceHiPlugSkinGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skinヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugSkinHead_t *<b>sceHiPlugSkinGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugSkinHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリSKINに属するデータタイプ、SKIN_LB,SKIN_LW,SKIN_BW,SKIN_DATAのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkinGetLB"><font size=6>sceHiPlugSkinGetLB<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skin ローカルボーンマトリクス取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FMATRIX *<b>sceHiPlugSkinGetLB</b>(
	sceHiPlugSkinHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FMATRIX型　　Skin ローカルボーンマトリクスのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSKIN_LBの1つのSkinローカルボーンマトリクスのポインタを取得します。<br><i>*h</i>にはsceHiPlugSkinGetHead()で取得したSKIN_LBヘッダーポインタを与えます。<br><i>idx</i>には何番目のマトリクスを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugSkinGetLW"><font size=6>sceHiPlugSkinGetLW<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Skin ローカルワールドマトリクス取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceVu0FMATRIX *<b>sceHiPlugSkinGetLW</b>(
	sceHiPlugSkinHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceVu0FMATRIX型　　Skin ローカルワールドマトリクスのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプSKIN_LWの1つのSkinローカルワールドマトリクスのポインタを取得します。<br><i>*h</i>にはsceHiPlugSkinGetHead()で取得したSKIN_LWヘッダーポインタを与えます。<br><i>idx</i>には何番目のマトリクスを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2D"><font size=6>sceHiPlugTex2D<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>２Ｄテクスチャプラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugTex2D</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;2Dテクスチャプラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;- 内部メモリ領域確保失敗&nbsp;<br>&nbsp;- GSメモリ領域確保失敗&nbsp;<br>&nbsp;- sceHiDMA*()が返すエラー&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データタイプが不一致&nbsp;<br>&nbsp;- plug-&gt;stackが破壊されている&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;- データブロックが見つからない&nbsp;<br>&nbsp;- sceHiDMA*()が返すエラー&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">2DテクスチャデータをGSローカルメモリへDMA転送します。<br><br><i>process</i>に指定した値に応じて以下の処理が呼び出されます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;sceHiPlugTex2dInitArg_tによるGS転送&nbsp;<br>&nbsp;先のTBP, CBPの設定および常駐・非常駐&nbsp;<br>&nbsp;の指定。&nbsp;<br>&nbsp;テクスチャデータの解析。&nbsp;<br>&nbsp;テクスチャデータのDMAパケットを生成。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;テクスチャデータのDMAパケットをGSへ&nbsp;<br>&nbsp;DMA転送する登録をsceHiDMARegist();&nbsp;<br>&nbsp;で行います。&nbsp;<br>&nbsp;DMA転送自体はしません。&nbsp;<br>&nbsp;別途sceHiDMASend();を呼び出して&nbsp;<br>&nbsp;ください。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;DMAパケットバッファの解放。&nbsp;<br>&nbsp;内部バッファの解放。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインを使用する際に消費するメモリ容量を下記に示します。<br>この消費量を考慮してsceHiDMAInit(); 関数でDMAパケットバッファおよびパケット管理領域、sceHiMemInit(); 関数で内部バッファの十分なバッファサイズを指定してください。このサイズは、1プラグインブロック単位ごとに消費します。<br></div>

<div style="margin-left:40px;"><h4><b>消費メモリ容量</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>用途</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>消費量</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;パケット管理領域&nbsp;</td>
<td valign="TOP">&nbsp;1 qword&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;DMAパケットバッファ&nbsp;</td>
<td valign="TOP">&nbsp;with clut　8 (qword/texture) + 1 (qword)&nbsp;<br>&nbsp;without　 5 (qword/texture) + 1 (qword)&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;内部バッファ&nbsp;</td>
<td valign="TOP">&nbsp;15 (qword/texture) + 2 (qword)&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">※ (qword/texture) = qword per texture : 1 textureあたりのqword数<br><br>sceHiPlugTex2dInitArg_tに使用可能なテクスチャバッファを指定します。<br>TBPはトップから、CBPはボトムから積み重ねています。<br>お互い干渉しあうまでの積載が可能です。<br>指定がない場合にはトップアドレスは0x1a40、ボトムアドレスは0x4000としてTBP,CBPの設定を行います。<br><br>このプラグインのタイプ属性と、必要とするデータのタイプ属性および書き込みの有無を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D_ENV&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DGetClut"><font size=6>sceHiPlugTex2DGetClut<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>CLUTデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>u_int *<b>sceHiPlugTex2DGetClut</b>(
	sceHiPlugTex2DData_t *<i>d</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>d</i>&nbsp;</td>
<td valign="TOP">&nbsp;データポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">u_int型　　CLUTデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプTEX2D_DATAの1つのCLUTデータを取得します。<br><i>*d</i> にはsceHiPlugTex2DGetData()で取得したTEX2D_DATAの１つのテクスチャデータポインタを与えます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DGetData"><font size=6>sceHiPlugTex2DGetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>テクスチャデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugTex2DData_t *<b>sceHiPlugTex2DGetData</b>(
	sceHiPlugTex2DHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugTex2DData_t型　　テクスチャデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプTEX2D_DATAの1つのテクスチャデータを取得します。<br><i>*h</i>にはsceHiPlugTex2DGetHead()で取得したTEX2D_DATAヘッダーポインタを与えます。<br><i>idx</i>には何番目のテクスチャデータを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DGetEnv"><font size=6>sceHiPlugTex2DGetEnv<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>テクスチャ環境データ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiGsGiftag *<b>sceHiPlugTex2DGetEnv</b>(
	sceHiPlugTex2DHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiGsGiftag型　　テクスチャ環境データのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプTEX2D_ENVの1つのテクスチャ環境データを取得します。<br><i>*h</i>にはsceHiPlugTex2DGetHead()で取得したTEX2D_ENVヘッダーポインタを与えます。<br><i>idx</i>には何番目のテクスチャ環境データを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DGetHead"><font size=6>sceHiPlugTex2DGetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>TEX2Dヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugTex2DHead_t *<b>sceHiPlugTex2DGetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugTex2DHead_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリTEX2Dに属するデータタイプ、TEX2D_DATA,TEX2D_ENVのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DGetTexel"><font size=6>sceHiPlugTex2DGetTexel<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>TEX2Dテクセルデータ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>u_int *<b>sceHiPlugTex2DGetTexel</b>(
	sceHiPlugTex2DData_t *<i>d</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>d</i>&nbsp;</td>
<td valign="TOP">&nbsp;データポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">u_int型　　テクセルデータのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプTEX2D_DATAの1つのテクセルデータを取得します。<br><i>*d</i> にはsceHiPlugTex2DGetData()で取得したTEX2D_DATAの１つのテクスチャデータポインタを与えます。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTex2DSize"><font size=6>sceHiPlugTex2DSize<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>テクスチャサイズ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>size_t <b>sceHiPlugTex2DSize</b>(
	sceHiPlug *<i>plug</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">size_t　　テクスチャ容量<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Tex2Dプラグインブロックが保有する総テクスチャ容量を返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2"><font size=6>sceHiPlugTim2<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2プラグイン<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugTim2</b>(
	sceHiPlug *<i>plug</i>;
	int <i>process</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフでない（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>process</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインプロセス識別子&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;1&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_HEAP&nbsp;</td>
<td valign="TOP">&nbsp;- HiGのヒープから領域を確保できない&nbsp;<br>&nbsp;- DMA Bufferのオーバーフロー&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;指定のピクチャー番号のテクスチャーが&nbsp;<br>&nbsp;TIM2データの中にない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- データがTim2ファイルでない&nbsp;<br>&nbsp;- Tim2ファイルのバージョンが違う&nbsp;<br>&nbsp;- Data Listに書かれたTypeと&nbsp;<br>&nbsp;  DataのTypeが一致していない&nbsp;<br>&nbsp;- Tim2データのアドレスが&nbsp;<br>&nbsp;  設定されていない&nbsp;<br>&nbsp;- Tim2データの中にImageがない&nbsp;<br>&nbsp;- Tim2データの中のClutの&nbsp;<br>&nbsp;  フォーマットIDが不正&nbsp;<br>&nbsp;- PluginのStackが壊れている&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;Typeで指定されたデータが見付からない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">2Dイメージフォーマット「TIM2」データをGSローカルメモリへDMA転送します<br>TIM2フォーマットの技術情報に関しては別途SCE-NETからダウンロードしてください。<br>sceHiPlugTim2InitArg_tに使用可能なテクスチャバッファを指定します。<br><i>process</i>に指定した値に応じて以下の処理が呼び出されます<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>指定値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>処理内容</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_INIT_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;内部バッファの確保。&nbsp;<br>&nbsp;Tim2フォーマットのデーコード&nbsp;<br>&nbsp;テクスチャデータのDMAパケットを&nbsp;<br>&nbsp;生成。&nbsp;<br>&nbsp;sceHiPlugTim2InitArg_tによるGS&nbsp;<br>&nbsp;転送先のTBP, CBPの設定および&nbsp;<br>&nbsp;常駐・非常駐の指定。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_PRE_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;何もしません。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_POST_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;テクスチャデータのDMAパケットを&nbsp;<br>&nbsp;GSへDMA転送する登録を&nbsp;<br>&nbsp;sceHiDMARegist();で行います。&nbsp;<br>&nbsp;DMA転送自体はしません。&nbsp;<br>&nbsp;別途 sceHiDMASend(); を呼び出し&nbsp;<br>&nbsp;てください。&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIG_END_PROCESS&nbsp;</td>
<td valign="TOP">&nbsp;DMAパケットバッファの解放。&nbsp;<br>&nbsp;内部バッファの解放。&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">このプラグインを使用する際に消費するメモリ容量は、Tex2Dプラグインを参照してください。<br><br>このプラグインのタイプ属性と、必要とするデータのタイプ属性および書き込みの有無を示します。<br></div>

<div style="margin-left:40px;"><h4><b>プラグインタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Plugin ID</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TIM2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TIM2_PLUG&nbsp;</td>
</tr>
</table>
</div>
<br>

<div style="margin-left:40px;"><h4><b>データタイプ属性</b><br></h4></div>

<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Repository</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Project</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Category</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>Data ID</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>r/w</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TIM2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TIM2_DATA&nbsp;</td>
<td valign="TOP">&nbsp;r/o&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;COMMON&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;FRAMEWORK&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIP_&nbsp;<br>&nbsp;TEX2D_ENV&nbsp;</td>
<td valign="TOP">&nbsp;r/w&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2GetData"><font size=6>sceHiPlugTim2GetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2データ取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugTim2Data_t *<b>sceHiPlugTim2GetData</b>(
	sceHiPlugTex2DHead_t *<i>h</i>,
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>h</i>&nbsp;</td>
<td valign="TOP">&nbsp;ヘッダーポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;インデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugTim2Data_t型　　Tim2データのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">データタイプTIM2_DATAの1つのTim2データを取得します。<br><i>*h</i> にはsceHiPlugTim2GetHead()で取得したTIM2_DATAヘッダーポインタを与えます。<br><i>idx</i> には何番目のTim2データを取得するかを指定します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2GetHead"><font size=6>sceHiPlugTim2GetHead<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2ヘッダー取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiPlugTim2Head_t *<b>sceHiPlugTim2GetHead</b>(
	sceHiPlug *<i>p</i>;
	sceHiType <i>t</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>p</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>t</i>&nbsp;</td>
<td valign="TOP">&nbsp;データタイプ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiPlugTim2Head_t型　　ヘッダーポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">カテゴリTIM2に属するデータタイプ、TIM2_DATAのデータブロック最初のヘッダーを取得します。<br>指定したデータタイプが見つからない場合NULLを返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2GetName"><font size=6>sceHiPlugTim2GetName<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2テクスチャファイル名取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>char *<b>sceHiPlugTim2GetName</b>(
	sceHiPlug *<i>plug</i>;
	int <i>idx</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;データインデックス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">char*　　Tim2テクスチャファイル名へのポインタ<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Tim2プラグインブロックが保有する指定インデックス番目のファイル名を取得します。<br>Tim2データが存在しない場合、indexが大きすぎる場合はNULLを返します。<br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2GetNPictures"><font size=6>sceHiPlugTim2GetNPictures<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2ピクチャー数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugTim2GetNPictures</b> (
	sceHiPlug *<i>plug</i>;
	int <i>n</i>;
	int *<i>num</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>n</i>&nbsp;</td>
<td valign="TOP">&nbsp;データブロックインデックス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;該当データに存在するピクチャーの数を&nbsp;<br>&nbsp;返すためのint型変数のアドレス&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;データタイプSCE_HIP_&nbsp;<br>&nbsp;TIM2_DATAが見つからない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;データタイプSCE_HIP_&nbsp;<br>&nbsp;TIM2_DATAが見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>plug</i>が持つTim2データリスト上の<i>n</i>番目のデータについて、そのデータが持つピクチャー数<br>を<i>num</i>に入れて返します。<br>注意：<br>一つのデータブロックインデックスが示すTim2データ（一つのTim2データファイル）は、同じWidth/Height/PixelFormat/Clutであるピクチャーのみがサポートされます。<br>これらが相違したピクチャーを持つTim2データでのテクスチャーチェンジはサポートされていません。またClutアニメーションもサポートされていません。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2Num"><font size=6>sceHiPlugTim2Num<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2プラグインテクスチャファイル数取得<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceHiPlugTim2Num</b>(
	sceHiPlug *<i>plug</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">int　　Tim2テクスチャファイル数<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Tim2プラグインブロックが保有する総テクスチャファイル数を返します。<br>Tim2データが存在しない場合は-1を返します。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2SetData"><font size=6>sceHiPlugTim2SetData<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2テクスチャデータ設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugTim2SetData</b>(
	sceHiPlug *<i>plug</i>;
	int <i>idx</i>;
	u_int *<i>fdata</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>idx</i>&nbsp;</td>
<td valign="TOP">&nbsp;データインデックス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>fdata</i>&nbsp;</td>
<td valign="TOP">&nbsp;ファイルデータのポインタ&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;データタイプSCE_HIP_&nbsp;<br>&nbsp;TIM2_DATA&nbsp;<br>&nbsp;が見つからない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;4&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_FAILURE&nbsp;</td>
<td valign="TOP">&nbsp;データタイプSCE_HIP_&nbsp;<br>&nbsp;TIM2_DATA&nbsp;<br>&nbsp;が見つからない&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">タイプ属性、SCE_HIP_TIM2_DATAのデータリストに対して別途読み込みしたTim2データを指定インデックスの場所にポインタセットします。<br><br></div>
<!-- 関数名 -->
<hr noshade Size=6 >
<a name="sceHiPlugTim2SetPicture"><font size=6>sceHiPlugTim2SetPicture<br></font></a>
<hr noshade Size=4 >
<!-- 関数説明 -->
<div align=right>Tim2プラグインピクチャー設定<br></div>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>sceHiErr <b>sceHiPlugTim2SetPicture</b> (
	sceHiPlug *<i>plug</i>;
	int <i>n</i>;
	int <i>num</i>;
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能<br>マルチスレッドセーフである（割り込み禁止、許可状態に依存しない）<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;<i>plug</i>&nbsp;</td>
<td valign="TOP">&nbsp;プラグインブロックへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>n</i>&nbsp;</td>
<td valign="TOP">&nbsp;データブロックインデックス&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;<i>num</i>&nbsp;</td>
<td valign="TOP">&nbsp;ピクチャー番号&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceHiErrStateType変数によって以下の詳細なエラー状態を取得することができます。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>値</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>マクロ</b>&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;<b>結果</b>&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;0&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_NO_ERR&nbsp;</td>
<td valign="TOP">&nbsp;成功&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;2&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_VALUE&nbsp;</td>
<td valign="TOP">&nbsp;指定のピクチャー番号のテクスチャーが&nbsp;<br>&nbsp;Tim22データの中にない&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;3&nbsp;</td>
<td valign="TOP">&nbsp;SCE_HIG_INVALID_DATA&nbsp;</td>
<td valign="TOP">&nbsp;- PluginのStackが壊れている&nbsp;<br>&nbsp;- データがTim2ファイルでない&nbsp;<br>&nbsp;- TIM2ファイルのバージョンが違う&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>plug</i>が<i>n</i>番目のデータのテクスチャーデータとして参照するデータを、<i>num</i>番目のピクチャーとするように設定します。<br>適切なタイミングで切り替えることにより、テクスチャーチェンジアニメーションが可能になります。<br><br>注意：<br>一つのデータブロックインデックスが示すTim2データ（一つのTim2データファイル）は、同じWidth/Height/PixelFormat/Clutであるピクチャーのみがサポートされます。<br>これらが相違したピクチャーを持つTim2データでのテクスチャーチェンジはサポートされていません。またClutアニメーションもサポートされていません。<br></div>
<p><p><hr>
<div ALIGN="right">
    Copyright (c) 2002 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
